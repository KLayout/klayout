<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <doc>@class [db] PCellDeclarationHelper &lt; PCellDeclaration
@brief A helper class to simplify the declaration of a PCell (Ruby version)

This class provides adds some convenience to the PCell declaration based
on PCellDeclaration. PCellDeclaration is a C++ object which is less
convenient to use than a Ruby-based approach. In particular this class
simplifies the declaration and use of parameters through accessor methods
that are created automatically from the declaration of the parameters.

The basic usage of this class is the following:

@code
# Derive your PCell from PCellDeclarationHelper
class MyPCell &lt; RBA::PCellDeclarationHelper

  # initalize
  def initialize
    super
    # your initialization: add parameters with name, type, description and
    # optional other values
    param :p, TypeInt, "The parameter", :default => 1
    param :l, TypeLayer, "The layer", :default => RBA::LayerInfo::new(1, 0)
    # add other parameters ..
  end

  # reimplement display_text_impl
  def display_text_impl
    # implement the method here
  end

  # reimplement produce_impl
  def produce_impl
    # implement the method here
  end

  # optionally reimplement coerce_parameters_impl
  def coerce_parameters_impl
    # implement the method here
  end

end
@/code

An implementation of \\display_text_impl could look like this:

@code
  def display_text_impl
    "We have p=#{p}"
  end
@/code

Because in the sample declaration above we have declared parameter "p" we can access the value of p inside
the implementation simply by using the "p" method.

Similarily the \\produce_impl implementation could use code like the following. Please note that
\\layout and \\cell are available to get the layout and cell. Also because we have declared a layer parameter "l", 
we can access the layer index with the "l_layer" method:

@code
  def produce_impl
    cell.shapes(l_layer).insert(RBA::Box.new(0, 0, p*100, p*200))
  end
@/code

Again in this sample, we used "p" to access the parameter "p".

The implementation of \\coerce_parameter_impl can make use of the parameter setters. In the case of the "p"
parameter, the setter is "set_p":

@code
  def coerce_parameter_impl
    p &lt; 10 || set_p(10)
  end
@/code

@method initialize
@brief Initializes this instance

@method layout
@brief Gets the reference to the current layout within \\produce_impl, \\can_create_from_shape_impl, \\parameters_from_shape_impl and \\transformation_from_shape_impl

The object returned is the \\Layout object of the shape which will be converted.

@method shape
@brief Gets the reference to the current shape within \\can_create_from_shape_impl, \\parameters_from_shape_impl and \\transformation_from_shape_impl

The object returned is the \\Shape object of the shape which will be converted.

@method layer
@brief Gets the reference to the current layer index within \\can_create_from_shape_impl, \\parameters_from_shape_impl and \\transformation_from_shape_impl

The object returned is the layer index within the \\Layout object of the shape which will be converted.

@method cell
@brief Gets the reference to the current cell within \\produce_impl

@method param
@args name, type, description, ...

@brief Declares a parameter with the given name, type and description and optional attributes.

@param name The name of the parameter. Must be a simple word.
@param type The type. One of the Type... constants, that this class borrowed from \\PCellParameterDeclaration.
@param description The description text for this parameter

Optional, named parameters are

@ul
  @li 
    @b:hidden@/b: (boolean) true, if the parameter is not shown in the dialog
  @/li
  @li 
    @b:readonly@/b: (boolean) true, if the parameter cannot be edited
  @/li
  @li 
    @b:unit@/b: the unit string
  @/li
  @li 
    @b:min_value@/b: the minimum value (effective for numerical types and if no choices are present)
  @/li
  @li 
    @b:max_value@/b: the maximum value (effective for numerical types and if no choices are present)
  @/li
  @li 
    @b:default@/b: the default value
  @/li
  @li 
    @b:choices@/b: ([ [ d, v ], ... ]) choice descriptions/value for choice type
  @/li
@/ul

":choices" must be an array of two-element arrays (description text, value) which specify one
choice each for parameters with a choice of values. Such parameters are represented by a drop-down box.

This declaration will create accessor methods "x" and "set_x", where "x" is the name of the parameter.
If the type is TypeLayer, an accessor "x_layer" delivering the layer index inside \\produce_impl is
created as well.

@method display_text_impl

@brief Delivers the display text

This method must be reimplemented in a PCell class to identify the PCell in human-readable form.
This text is shown in the cell tree for the PCell for example.

@method produce_impl

@brief Produces the layout

This method must be reimplemented in a PCell class.
Using the parameter values provided by the parameter accessor methods and the layout and cell through \\layout and \\cell,
this method is supposed to produce the final layout inside the given cell.

@method coerce_parameters_impl

@brief Coerces the parameters

This method can be reimplemented in a PCell class.
It is supposed to adjust parameters to render a consistent parameter set and to fix 
parameter range errors. This method is called for example inside the PCell user interface to 
compute the actual parameters when "Apply" is pressed.

@method callback_impl(name)

@brief Provides a callback on a parameter change

This method applies to user interface changes only. Whenever a parameter is changed
on the parameter page, this method is called with the name of the parameter.

On some occasions, this method called to establish a configuration unspecifically.
In this case, the name is an empty string - indicating "all parameters may have changed".

This method can change the state of this or any other parameter. For this, the 
state objects are supplied instead of the parameter values. For example to enable 
parameter "b" when a boolean parameter "a" is true, use the following code:

@code
def callback_impl(name)
  if name == "a" || name == ""
    b.enabled = a.value
  end
end
@/code

The "enabled" attribute of the \\PCellParameterState object indicates whether the
parameter is enabled in the user interface. "a.value" delivers the value of the 
(boolean type assumed) parameter "a".

Note that the above code also checks for empty name to consider the case of a
global refresh.

Further useful attributes of the parameters are:

@ul
  @li 
    @b enabled @/b: the parameter entry is grayed out if false
  @/li
  @li 
    @b readonly @/b: the parameter cannot be edited (less strict than enabled)
  @/li
  @li 
    @b visible @/b: the parameter entry is not visible if false
  @/li
  @li 
    @b icon @/b: Sets an icon in front of the parameter indicating an error or a 
      warning (use \\PCellParameterState#WarningIcon or \\PCellParameterState#ErrorIcon).
  @/li
@/ul

@method can_create_from_shape_impl

@brief Returns true if the PCell can be created from the given shape

This method can be reimplemented in a PCell class.
If the PCell can be created from the shape available through the \\shape accessor (a \\Shape object), this
method is supposed to return true. The layout the shape lives in can be accessed with \\layout and the 
layer with \\layer.

The default implementation returns false.

@method parameters_from_shape_impl

@brief Sets the parameters from a shape

This method can be reimplemented in a PCell class.
If \\can_create_from_shape_impl returns true, this method is called to set the parameters from the 
given shape (see \\shape, \\layout and \\layer). Note, that for setting a layer parameter you need
to create the \\LayerInfo object, i.e. like this:

@code
  set_l layout.get_info(layer)
@/code

The default implementation does nothing. All parameters not set in this method will receive their default value.

If you use a parameter called "layer" for example, the parameter getter will hide the
"layer" argument. Use "_layer" for the argument in this case (same for "layout", "shape" or "cell):

@code
  set_layer layout.get_info(_layer)
@/code

@method transformation_from_shape_impl

@brief Gets the initial PCell instance transformation when creating from a shape

This method can be reimplemented in a PCell class.
If \\can_create_from_shape_impl returns true, this method is called to get the initial transformation from the 
given shape (see \\shape, \\layout and \\layer). 

This method must return a \\Trans object. The default implementation returns a unit transformation (no displacement, no rotation).

 </doc>
 <format>general</format>
 <autorun>false</autorun>
 <autorun-early>true</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>ruby</interpreter>
 <text>
module RBA

  # A helper class that somewhat simplifies the implementation
  # of a PCell
  class PCellDeclarationHelper &lt; PCellDeclaration

    # import the Type... constants from PCellParameterDeclaration
    PCellParameterDeclaration.constants.each do |c|
      if !const_defined?(c)
        const_set(c, PCellParameterDeclaration::const_get(c))
      end
    end
    
    # initialize this instance
    def initialize
      @param_decls = []
      @param_values = nil
      @param_states = nil
      @layout = nil
      @shape = nil
      @layer = nil
      @cell = nil
      @layer_param_index = []
      @layers = nil
    end
    
    # provide accessors for the current layout and cell (for prod)
    attr_reader :layout, :cell, :shape, :layer

    # provide fallback accessors in case of a name clash with a 
    # parameter
    def _layer; @layer; end
    def _layout; @layout; end
    def _cell; @cell; end
    def _shape; @shape; end

    # A helper method to access the nth parameter
    
    def _get_param(nth, name)
      if @param_states
        if ! @param_states.has_parameter?(name)
          return RBA::PCellParameterState::new
        else
          return @param_states.parameter(name)
        end
      else
        @param_values || raise("No parameters available.")
        while @param_values.size &lt;= nth
          @param_values &lt;&lt; nil
        end
        return @param_values[nth]
      end
    end
    
    # A helper method to set the nth parameter
    
    def _set_param(nth, value)
      @param_values || raise("Cannot set parameter - inside 'callback_impl' use 'param_name.value = ...' to set the parameter's value.")
      if @param_values.size &gt; nth
        @param_values[nth] = value
      end
    end
    
    # A helper method to access the nth layer
    
    def _get_layer(nth)
      @layers || raise("No layer index available - layers can be used only inside 'produce_impl'.")
      @layers[nth]
    end
    
    # define a parameter
    #   name         -&gt; the short name of the parameter
    #   type         -&gt; the type of the parameter
    #   description  -&gt; the description text
    # named parameters
    #   :hidden      -&gt; (boolean) true, if the parameter is not shown in the dialog
    #   :readonly    -&gt; (boolean) true, if the parameter cannot be edited
    #   :unit        -&gt; the unit string
    #   :min_value   -&gt; the minimum value (only effective for numerical types and if no choices are present)
    #   :max_value   -&gt; the maximum value (only effective for numerical types and if no choices are present)
    #   :default     -&gt; the default value
    #   :choices     -&gt; ([ [ d, v ], ...) choice descriptions/value for choice type
    # this method defines accessor methods for the parameters
    #   {name}       -&gt; read accessor
    #   set_{name}   -&gt; write accessor ({name}= does not work because the
    #                   Ruby confuses that method with variables)
    #   {name}_layer -&gt; read accessor for the layer index for TypeLayer parameters
    # in addition, fallback accessors are defined which can be used if 
    # the parameter's name clashes with another name:
    #   param_{name}
    #   set_param_{name}
    #   param_{name}_layer

    def param(name, type, description, args = {})

      if name !~ /^[_A-Za-z]\w*$/
        raise "Invalid parameter name #{name} (needs to be a word)"
      end
    
      # create accessor methods for the parameters
      param_index = @param_decls.length
      self.instance_eval("def #{name.to_s}; self._get_param(#{param_index}, '#{name}'); end")
      self.instance_eval("def set_#{name.to_s}(v); self._set_param(#{param_index}, v); end")
      self.instance_eval("def #{name.to_s}=(v); self._set_param(#{param_index}, v); end")
      if type == TypeLayer
        self.instance_eval("def #{name.to_s}_layer; self._get_layer(#{@layer_param_index.length}); end")
        @layer_param_index.push(param_index)
      end
      
      # store the parameter declarations
      pdecl = PCellParameterDeclaration.new(name.to_s, type, description)
      @param_decls.push(pdecl)    
      
      # set additional attributes of the parameters
      args[:default] &amp;&amp; pdecl.default = args[:default]
      args[:hidden] &amp;&amp; pdecl.hidden = args[:hidden]
      args[:readonly] &amp;&amp; pdecl.readonly = args[:readonly]
      args[:unit] &amp;&amp; pdecl.unit = args[:unit]
      args[:min_value] &amp;&amp; pdecl.min_value = args[:min_value]
      args[:max_value] &amp;&amp; pdecl.max_value = args[:max_value]
      if args[:choices]
        if !args[:choices].is_a?(Array)
          raise ":choices value must be an array of two-element arrays (description, value)"
        end
        args[:choices].each do |c|
          if !c.is_a?(Array) || c.length != 2
            raise ":choices value must be an array of two-element arrays (description, value)"
          end
          pdecl.add_choice(c[0],c[1])
        end
      end
      
      # return the declaration object for further operations
      pdecl
      
    end
    
    # implementation of display_text
    def display_text(parameters)
      @param_values = parameters
      begin
        text = display_text_impl
      ensure
        @param_values = nil
      end
      text
    end
    
    # get the parameters
    def get_parameters
      @param_decls
    end
    
    # get the layer definitions
    def get_layers(parameters)
      @layer_param_index.collect { |i| parameters[i] || RBA::LayerInfo::new }
    end
      
    # coerce parameters (make consistent)
    def coerce_parameters(layout, parameters)
      @param_values = parameters
      @layout = layout
      ret = parameters
      begin
        coerce_parameters_impl
      ensure
        @layout = nil
        ret = @param_values
        @param_values = nil
      end
      ret
    end

    # parameter change callback
    def callback(layout, name, states)
      @param_values = nil
      @param_states = states
      @layout = layout
      begin
        callback_impl(name)
      ensure
        @param_states = nil
        @layout = nil
      end
    end

    # produce the layout    
    def produce(layout, layers, parameters, cell)
      @layers = layers
      @cell = cell
      @param_values = parameters
      @layout = layout
      begin
        produce_impl
      ensure
        @layers = nil
        @cell = nil
        @param_values = nil
        @layout = nil
      end
    end

    # produce a helper for can_create_from_shape
    def can_create_from_shape(layout, shape, layer)
      ret = false
      @layout = layout
      @shape = shape
      @layer = layer
      begin
        ret = can_create_from_shape_impl
      ensure
        @layout = nil
        @shape = nil
        @layer = nil
      end
      ret
    end
    
    # produce a helper for parameters_from_shape
    def transformation_from_shape(layout, shape, layer)
      @layout = layout
      @shape = shape
      @layer = layer
      begin
        t = transformation_from_shape_impl
      ensure
        @layout = nil
        @shape = nil
        @layer = nil
      end
      t
    end
    
    # produce a helper for parameters_from_shape
    # with this helper, the implementation can use the parameter setters
    def parameters_from_shape(layout, shape, layer)
      @param_values = @param_decls.map { |pd| pd.default }
      @layout = layout
      @shape = shape
      @layer = layer
      begin
        parameters_from_shape_impl
      ensure
        @layout = nil
        @shape = nil
        @layer = nil
      end
      @param_values
    end
    
    # default implementation
    def display_text_impl
      ""
    end
   
    # default implementation 
    def coerce_parameters_impl
    end
    
    # default implementation 
    def callback_impl(name)
    end
    
    # default implementation
    def produce_impl
    end

    # default implementation
    def can_create_from_shape_impl
      false
    end
    
    # default implementation
    def parameters_from_shape_impl
    end
    
    # default implementation
    def transformation_from_shape_impl
      Trans.new
    end
    
  end

end
</text>
</klayout-macro>
