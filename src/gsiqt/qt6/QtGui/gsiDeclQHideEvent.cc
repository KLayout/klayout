
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2022 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQHideEvent.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QHideEvent>
#include <QEvent>
#include "gsiQt.h"
#include "gsiQtGuiCommon.h"
#include <memory>

// -----------------------------------------------------------------------
// class QHideEvent

namespace gsi
{

static gsi::Methods methods_QHideEvent () {
  gsi::Methods methods;
  return methods;
}

gsi::Class<QEvent> &qtdecl_QEvent ();

gsi::Class<QHideEvent> decl_QHideEvent (qtdecl_QEvent (), "QtGui", "QHideEvent_Native",
  methods_QHideEvent (),
  "@hide\n@alias QHideEvent");

GSI_QTGUI_PUBLIC gsi::Class<QHideEvent> &qtdecl_QHideEvent () { return decl_QHideEvent; }

}


class QHideEvent_Adaptor : public QHideEvent, public qt_gsi::QtObjectBase
{
public:

  virtual ~QHideEvent_Adaptor();

  //  [adaptor ctor] QHideEvent::QHideEvent()
  QHideEvent_Adaptor() : QHideEvent()
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  [adaptor impl] QEvent *QHideEvent::clone()
  QEvent * cbs_clone_c0_0() const
  {
    return QHideEvent::clone();
  }

  virtual QEvent * clone() const
  {
    if (cb_clone_c0_0.can_issue()) {
      return cb_clone_c0_0.issue<QHideEvent_Adaptor, QEvent *>(&QHideEvent_Adaptor::cbs_clone_c0_0);
    } else {
      return QHideEvent::clone();
    }
  }

  //  [adaptor impl] void QHideEvent::setAccepted(bool accepted)
  void cbs_setAccepted_864_0(bool accepted)
  {
    QHideEvent::setAccepted(accepted);
  }

  virtual void setAccepted(bool accepted)
  {
    if (cb_setAccepted_864_0.can_issue()) {
      cb_setAccepted_864_0.issue<QHideEvent_Adaptor, bool>(&QHideEvent_Adaptor::cbs_setAccepted_864_0, accepted);
    } else {
      QHideEvent::setAccepted(accepted);
    }
  }

  gsi::Callback cb_clone_c0_0;
  gsi::Callback cb_setAccepted_864_0;
};

QHideEvent_Adaptor::~QHideEvent_Adaptor() { }

//  Constructor QHideEvent::QHideEvent() (adaptor class)

static void _init_ctor_QHideEvent_Adaptor_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QHideEvent_Adaptor> ();
}

static void _call_ctor_QHideEvent_Adaptor_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QHideEvent_Adaptor *> (new QHideEvent_Adaptor ());
}


// QEvent *QHideEvent::clone()

static void _init_cbs_clone_c0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QEvent * > ();
}

static void _call_cbs_clone_c0_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QEvent * > ((QEvent *)((QHideEvent_Adaptor *)cls)->cbs_clone_c0_0 ());
}

static void _set_callback_cbs_clone_c0_0 (void *cls, const gsi::Callback &cb)
{
  ((QHideEvent_Adaptor *)cls)->cb_clone_c0_0 = cb;
}


// void QHideEvent::setAccepted(bool accepted)

static void _init_cbs_setAccepted_864_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("accepted");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_setAccepted_864_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  bool arg1 = args.read<bool > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QHideEvent_Adaptor *)cls)->cbs_setAccepted_864_0 (arg1);
}

static void _set_callback_cbs_setAccepted_864_0 (void *cls, const gsi::Callback &cb)
{
  ((QHideEvent_Adaptor *)cls)->cb_setAccepted_864_0 = cb;
}


namespace gsi
{

gsi::Class<QHideEvent> &qtdecl_QHideEvent ();

static gsi::Methods methods_QHideEvent_Adaptor () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QHideEvent::QHideEvent()\nThis method creates an object of class QHideEvent.", &_init_ctor_QHideEvent_Adaptor_0, &_call_ctor_QHideEvent_Adaptor_0);
  methods += new qt_gsi::GenericMethod ("clone", "@brief Virtual method QEvent *QHideEvent::clone()\nThis method can be reimplemented in a derived class.", true, &_init_cbs_clone_c0_0, &_call_cbs_clone_c0_0);
  methods += new qt_gsi::GenericMethod ("clone", "@hide", true, &_init_cbs_clone_c0_0, &_call_cbs_clone_c0_0, &_set_callback_cbs_clone_c0_0);
  methods += new qt_gsi::GenericMethod ("setAccepted", "@brief Virtual method void QHideEvent::setAccepted(bool accepted)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_setAccepted_864_0, &_call_cbs_setAccepted_864_0);
  methods += new qt_gsi::GenericMethod ("setAccepted", "@hide", false, &_init_cbs_setAccepted_864_0, &_call_cbs_setAccepted_864_0, &_set_callback_cbs_setAccepted_864_0);
  return methods;
}

gsi::Class<QHideEvent_Adaptor> decl_QHideEvent_Adaptor (qtdecl_QHideEvent (), "QtGui", "QHideEvent",
  methods_QHideEvent_Adaptor (),
  "@qt\n@brief Binding of QHideEvent");

}

