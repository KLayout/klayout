
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2019 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQEventLoopLocker.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QEventLoopLocker>
#include <QEventLoop>
#include <QThread>
#include "gsiQt.h"
#include "gsiQtCoreCommon.h"
#include "gsiDeclQtCoreTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// class QEventLoopLocker

//  Constructor QEventLoopLocker::QEventLoopLocker()


static void _init_ctor_QEventLoopLocker_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QEventLoopLocker> ();
}

static void _call_ctor_QEventLoopLocker_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QEventLoopLocker *> (new QEventLoopLocker ());
}


//  Constructor QEventLoopLocker::QEventLoopLocker(QEventLoop *loop)


static void _init_ctor_QEventLoopLocker_1627 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("loop");
  decl->add_arg<QEventLoop * > (argspec_0);
  decl->set_return_new<QEventLoopLocker> ();
}

static void _call_ctor_QEventLoopLocker_1627 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QEventLoop *arg1 = gsi::arg_reader<QEventLoop * >() (args, heap);
  ret.write<QEventLoopLocker *> (new QEventLoopLocker (arg1));
}


//  Constructor QEventLoopLocker::QEventLoopLocker(QThread *thread)


static void _init_ctor_QEventLoopLocker_1303 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("thread");
  decl->add_arg<QThread * > (argspec_0);
  decl->set_return_new<QEventLoopLocker> ();
}

static void _call_ctor_QEventLoopLocker_1303 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QThread *arg1 = gsi::arg_reader<QThread * >() (args, heap);
  ret.write<QEventLoopLocker *> (new QEventLoopLocker (arg1));
}



namespace gsi
{

static gsi::Methods methods_QEventLoopLocker () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QEventLoopLocker::QEventLoopLocker()\nThis method creates an object of class QEventLoopLocker.", &_init_ctor_QEventLoopLocker_0, &_call_ctor_QEventLoopLocker_0);
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QEventLoopLocker::QEventLoopLocker(QEventLoop *loop)\nThis method creates an object of class QEventLoopLocker.", &_init_ctor_QEventLoopLocker_1627, &_call_ctor_QEventLoopLocker_1627);
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QEventLoopLocker::QEventLoopLocker(QThread *thread)\nThis method creates an object of class QEventLoopLocker.", &_init_ctor_QEventLoopLocker_1303, &_call_ctor_QEventLoopLocker_1303);
  return methods;
}

gsi::Class<QEventLoopLocker> decl_QEventLoopLocker ("QtCore", "QEventLoopLocker",
  methods_QEventLoopLocker (),
  "@qt\n@brief Binding of QEventLoopLocker");


GSI_QTCORE_PUBLIC gsi::Class<QEventLoopLocker> &qtdecl_QEventLoopLocker () { return decl_QEventLoopLocker; }

}

