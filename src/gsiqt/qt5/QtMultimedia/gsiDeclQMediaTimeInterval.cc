
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2019 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQMediaTimeInterval.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QMediaTimeInterval>
#include "gsiQt.h"
#include "gsiQtMultimediaCommon.h"
#include "gsiDeclQtMultimediaTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// class QMediaTimeInterval

//  Constructor QMediaTimeInterval::QMediaTimeInterval()


static void _init_ctor_QMediaTimeInterval_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QMediaTimeInterval> ();
}

static void _call_ctor_QMediaTimeInterval_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QMediaTimeInterval *> (new QMediaTimeInterval ());
}


//  Constructor QMediaTimeInterval::QMediaTimeInterval(qint64 start, qint64 end)


static void _init_ctor_QMediaTimeInterval_1864 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("start");
  decl->add_arg<qint64 > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("end");
  decl->add_arg<qint64 > (argspec_1);
  decl->set_return_new<QMediaTimeInterval> ();
}

static void _call_ctor_QMediaTimeInterval_1864 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  qint64 arg1 = gsi::arg_reader<qint64 >() (args, heap);
  qint64 arg2 = gsi::arg_reader<qint64 >() (args, heap);
  ret.write<QMediaTimeInterval *> (new QMediaTimeInterval (arg1, arg2));
}


//  Constructor QMediaTimeInterval::QMediaTimeInterval(const QMediaTimeInterval &)


static void _init_ctor_QMediaTimeInterval_3110 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<const QMediaTimeInterval & > (argspec_0);
  decl->set_return_new<QMediaTimeInterval> ();
}

static void _call_ctor_QMediaTimeInterval_3110 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QMediaTimeInterval &arg1 = gsi::arg_reader<const QMediaTimeInterval & >() (args, heap);
  ret.write<QMediaTimeInterval *> (new QMediaTimeInterval (arg1));
}


// bool QMediaTimeInterval::contains(qint64 time)


static void _init_f_contains_c986 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("time");
  decl->add_arg<qint64 > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_contains_c986 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  qint64 arg1 = gsi::arg_reader<qint64 >() (args, heap);
  ret.write<bool > ((bool)((QMediaTimeInterval *)cls)->contains (arg1));
}


// qint64 QMediaTimeInterval::end()


static void _init_f_end_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qint64 > ();
}

static void _call_f_end_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qint64 > ((qint64)((QMediaTimeInterval *)cls)->end ());
}


// bool QMediaTimeInterval::isNormal()


static void _init_f_isNormal_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isNormal_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QMediaTimeInterval *)cls)->isNormal ());
}


// QMediaTimeInterval QMediaTimeInterval::normalized()


static void _init_f_normalized_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QMediaTimeInterval > ();
}

static void _call_f_normalized_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QMediaTimeInterval > ((QMediaTimeInterval)((QMediaTimeInterval *)cls)->normalized ());
}


// qint64 QMediaTimeInterval::start()


static void _init_f_start_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qint64 > ();
}

static void _call_f_start_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qint64 > ((qint64)((QMediaTimeInterval *)cls)->start ());
}


// QMediaTimeInterval QMediaTimeInterval::translated(qint64 offset)


static void _init_f_translated_c986 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("offset");
  decl->add_arg<qint64 > (argspec_0);
  decl->set_return<QMediaTimeInterval > ();
}

static void _call_f_translated_c986 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  qint64 arg1 = gsi::arg_reader<qint64 >() (args, heap);
  ret.write<QMediaTimeInterval > ((QMediaTimeInterval)((QMediaTimeInterval *)cls)->translated (arg1));
}


//  bool ::operator==(const QMediaTimeInterval &, const QMediaTimeInterval &)
static bool op_QMediaTimeInterval_operator_eq__eq__6112(const QMediaTimeInterval *_self, const QMediaTimeInterval &arg2) {
  return ::operator==(*_self, arg2);
}

//  bool ::operator!=(const QMediaTimeInterval &, const QMediaTimeInterval &)
static bool op_QMediaTimeInterval_operator_excl__eq__6112(const QMediaTimeInterval *_self, const QMediaTimeInterval &arg2) {
  return ::operator!=(*_self, arg2);
}


namespace gsi
{

static gsi::Methods methods_QMediaTimeInterval () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QMediaTimeInterval::QMediaTimeInterval()\nThis method creates an object of class QMediaTimeInterval.", &_init_ctor_QMediaTimeInterval_0, &_call_ctor_QMediaTimeInterval_0);
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QMediaTimeInterval::QMediaTimeInterval(qint64 start, qint64 end)\nThis method creates an object of class QMediaTimeInterval.", &_init_ctor_QMediaTimeInterval_1864, &_call_ctor_QMediaTimeInterval_1864);
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QMediaTimeInterval::QMediaTimeInterval(const QMediaTimeInterval &)\nThis method creates an object of class QMediaTimeInterval.", &_init_ctor_QMediaTimeInterval_3110, &_call_ctor_QMediaTimeInterval_3110);
  methods += new qt_gsi::GenericMethod ("contains", "@brief Method bool QMediaTimeInterval::contains(qint64 time)\n", true, &_init_f_contains_c986, &_call_f_contains_c986);
  methods += new qt_gsi::GenericMethod ("end", "@brief Method qint64 QMediaTimeInterval::end()\n", true, &_init_f_end_c0, &_call_f_end_c0);
  methods += new qt_gsi::GenericMethod ("isNormal?", "@brief Method bool QMediaTimeInterval::isNormal()\n", true, &_init_f_isNormal_c0, &_call_f_isNormal_c0);
  methods += new qt_gsi::GenericMethod ("normalized", "@brief Method QMediaTimeInterval QMediaTimeInterval::normalized()\n", true, &_init_f_normalized_c0, &_call_f_normalized_c0);
  methods += new qt_gsi::GenericMethod ("start", "@brief Method qint64 QMediaTimeInterval::start()\n", true, &_init_f_start_c0, &_call_f_start_c0);
  methods += new qt_gsi::GenericMethod ("translated", "@brief Method QMediaTimeInterval QMediaTimeInterval::translated(qint64 offset)\n", true, &_init_f_translated_c986, &_call_f_translated_c986);
  methods += gsi::method_ext("==", &::op_QMediaTimeInterval_operator_eq__eq__6112, gsi::arg ("arg2"), "@brief Operator bool ::operator==(const QMediaTimeInterval &, const QMediaTimeInterval &)\nThis is the mapping of the global operator to the instance method.");
  methods += gsi::method_ext("!=", &::op_QMediaTimeInterval_operator_excl__eq__6112, gsi::arg ("arg2"), "@brief Operator bool ::operator!=(const QMediaTimeInterval &, const QMediaTimeInterval &)\nThis is the mapping of the global operator to the instance method.");
  return methods;
}

gsi::Class<QMediaTimeInterval> decl_QMediaTimeInterval ("QtMultimedia", "QMediaTimeInterval",
  methods_QMediaTimeInterval (),
  "@qt\n@brief Binding of QMediaTimeInterval");


GSI_QTMULTIMEDIA_PUBLIC gsi::Class<QMediaTimeInterval> &qtdecl_QMediaTimeInterval () { return decl_QMediaTimeInterval; }

}

