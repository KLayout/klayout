
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2022 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQMediaTimeRange_Interval.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QMediaTimeRange>
#include "gsiQt.h"
#include "gsiQtMultimediaCommon.h"
#include <memory>

// -----------------------------------------------------------------------
// struct QMediaTimeRange::Interval

//  Constructor QMediaTimeRange::Interval::Interval()


static void _init_ctor_QMediaTimeRange_Interval_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QMediaTimeRange::Interval> ();
}

static void _call_ctor_QMediaTimeRange_Interval_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QMediaTimeRange::Interval *> (new QMediaTimeRange::Interval ());
}


//  Constructor QMediaTimeRange::Interval::Interval(qint64 start, qint64 end)


static void _init_ctor_QMediaTimeRange_Interval_1864 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("start");
  decl->add_arg<qint64 > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("end");
  decl->add_arg<qint64 > (argspec_1);
  decl->set_return_new<QMediaTimeRange::Interval> ();
}

static void _call_ctor_QMediaTimeRange_Interval_1864 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  qint64 arg1 = gsi::arg_reader<qint64 >() (args, heap);
  qint64 arg2 = gsi::arg_reader<qint64 >() (args, heap);
  ret.write<QMediaTimeRange::Interval *> (new QMediaTimeRange::Interval (arg1, arg2));
}


// bool QMediaTimeRange::Interval::contains(qint64 time)


static void _init_f_contains_c986 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("time");
  decl->add_arg<qint64 > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_contains_c986 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  qint64 arg1 = gsi::arg_reader<qint64 >() (args, heap);
  ret.write<bool > ((bool)((QMediaTimeRange::Interval *)cls)->contains (arg1));
}


// qint64 QMediaTimeRange::Interval::end()


static void _init_f_end_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qint64 > ();
}

static void _call_f_end_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qint64 > ((qint64)((QMediaTimeRange::Interval *)cls)->end ());
}


// bool QMediaTimeRange::Interval::isNormal()


static void _init_f_isNormal_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isNormal_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QMediaTimeRange::Interval *)cls)->isNormal ());
}


// QMediaTimeRange::Interval QMediaTimeRange::Interval::normalized()


static void _init_f_normalized_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QMediaTimeRange::Interval > ();
}

static void _call_f_normalized_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QMediaTimeRange::Interval > ((QMediaTimeRange::Interval)((QMediaTimeRange::Interval *)cls)->normalized ());
}


// qint64 QMediaTimeRange::Interval::start()


static void _init_f_start_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qint64 > ();
}

static void _call_f_start_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qint64 > ((qint64)((QMediaTimeRange::Interval *)cls)->start ());
}


// QMediaTimeRange::Interval QMediaTimeRange::Interval::translated(qint64 offset)


static void _init_f_translated_c986 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("offset");
  decl->add_arg<qint64 > (argspec_0);
  decl->set_return<QMediaTimeRange::Interval > ();
}

static void _call_f_translated_c986 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  qint64 arg1 = gsi::arg_reader<qint64 >() (args, heap);
  ret.write<QMediaTimeRange::Interval > ((QMediaTimeRange::Interval)((QMediaTimeRange::Interval *)cls)->translated (arg1));
}



namespace gsi
{

static gsi::Methods methods_QMediaTimeRange_Interval () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QMediaTimeRange::Interval::Interval()\nThis method creates an object of class QMediaTimeRange::Interval.", &_init_ctor_QMediaTimeRange_Interval_0, &_call_ctor_QMediaTimeRange_Interval_0);
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QMediaTimeRange::Interval::Interval(qint64 start, qint64 end)\nThis method creates an object of class QMediaTimeRange::Interval.", &_init_ctor_QMediaTimeRange_Interval_1864, &_call_ctor_QMediaTimeRange_Interval_1864);
  methods += new qt_gsi::GenericMethod ("contains", "@brief Method bool QMediaTimeRange::Interval::contains(qint64 time)\n", true, &_init_f_contains_c986, &_call_f_contains_c986);
  methods += new qt_gsi::GenericMethod ("end", "@brief Method qint64 QMediaTimeRange::Interval::end()\n", true, &_init_f_end_c0, &_call_f_end_c0);
  methods += new qt_gsi::GenericMethod ("isNormal?", "@brief Method bool QMediaTimeRange::Interval::isNormal()\n", true, &_init_f_isNormal_c0, &_call_f_isNormal_c0);
  methods += new qt_gsi::GenericMethod ("normalized", "@brief Method QMediaTimeRange::Interval QMediaTimeRange::Interval::normalized()\n", true, &_init_f_normalized_c0, &_call_f_normalized_c0);
  methods += new qt_gsi::GenericMethod ("start", "@brief Method qint64 QMediaTimeRange::Interval::start()\n", true, &_init_f_start_c0, &_call_f_start_c0);
  methods += new qt_gsi::GenericMethod ("translated", "@brief Method QMediaTimeRange::Interval QMediaTimeRange::Interval::translated(qint64 offset)\n", true, &_init_f_translated_c986, &_call_f_translated_c986);
  return methods;
}

gsi::Class<QMediaTimeRange::Interval> decl_QMediaTimeRange_Interval ("QtMultimedia", "QMediaTimeRange_Interval",
  methods_QMediaTimeRange_Interval (),
  "@qt\n@brief Binding of QMediaTimeRange::Interval");

gsi::ClassExt<QMediaTimeRange> decl_QMediaTimeRange_Interval_as_child (decl_QMediaTimeRange_Interval, "Interval");

GSI_QTMULTIMEDIA_PUBLIC gsi::Class<QMediaTimeRange::Interval> &qtdecl_QMediaTimeRange_Interval () { return decl_QMediaTimeRange_Interval; }

}

