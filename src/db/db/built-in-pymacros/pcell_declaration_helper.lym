<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc>@class [db] PCellDeclarationHelper &lt; PCellDeclaration
@brief A helper class to simplify the declaration of a PCell (Python version)

NOTE: in the following, "pya" can be replaced by "klayout.db" which is
the canonical module and the preferred way of addressing the 
external Python library.

This class provides adds some convenience to the PCell declaration based
on PCellDeclaration. PCellDeclaration is a C++ object which is less
convenient to use than a Ruby-based approach. In particular this class
simplifies the declaration and use of parameters through accessor methods
that are created automatically from the declaration of the parameters.

The basic usage of this class is the following:

@code

import pya 

# Derive your PCell from PCellDeclarationHelper
class MyPCell(pya.PCellDeclarationHelper):

  def __init__(self):

    # Important: initialize the super class
    super(MyPCell, self).__init__()

    # your initialization: add parameters with name, type, description and
    # optional other values
    self.param("p", self.TypeInt, "The parameter", default = 1)
    self.param("l", self.TypeLayer, "The layer", default = pya.LayerInfo(1, 0))
    # add other parameters ..

  # reimplement display_text_impl
  def display_text_impl(self):
    # implement the method here
    pass

  # reimplement produce_impl
  def produce_impl(self):
    # implement the method here
    pass

  # optionally reimplement coerce_parameters_impl
  def coerce_parameters_impl(self):
    # implement the method here
    pass

@/code

An implementation of \\display_text_impl could look like this:

@code
  def display_text_impl(self):
    return "We have p=" + str(self.p)
@/code

Because in the sample declaration above we have declared parameter "p" we can access the value of p inside
the implementation simply by using the "p" method.

Similarily the \\produce_impl implementation could use code like the following. Please note that
\\layout and \\cell are available to get the layout and cell. Also because we have declared a layer parameter "l", 
we can access the layer index with the "l_layer" method:

@code
  def produce_impl(self):
    cell.shapes(self.l_layer).insert(pya.Box(0, 0, self.p*100, self.p*200))
@/code

Again in this sample, we used "p" to access the parameter "p".

The implementation of \\coerce_parameter_impl can make use of the parameter setters. In the case of the "p"
parameter, the setter is "set_p":

@code
  def coerce_parameter_impl(self):
    if (p &gt;= 10):
      self.p = 10
@/code

@method initialize
@brief Initializes this instance

@method layout
@brief Gets the reference to the current layout within \\produce_impl, \\can_create_from_shape_impl, \\parameters_from_shape_impl and \\transformation_from_shape_impl

The object returned is the \\Layout object of the shape which will be converted.

@method shape
@brief Gets the reference to the current shape within \\can_create_from_shape_impl, \\parameters_from_shape_impl and \\transformation_from_shape_impl

The object returned is the \\Shape object of the shape which will be converted.

@method layer
@brief Gets the reference to the current layer index within \\can_create_from_shape_impl, \\parameters_from_shape_impl and \\transformation_from_shape_impl

The object returned is the layer index within the \\Layout object of the shape which will be converted.

@method cell
@brief Gets the reference to the current cell within \\produce_impl

@method param
@args name, type, description, ...

@brief Declares a parameter with the given name, type and description and optional attributes.

@param name The name of the parameter. Must be a simple word.
@param type The type. One of the Type... constants, that this class borrowed from \\PCellParameterDeclaration.
@param description The description text for this parameter

Optional, named parameters are

@ul
  @li 
    @bhidden@/b: (boolean) true, if the parameter is not shown in the dialog
  @/li
  @li 
    @breadonly@/b: (boolean) true, if the parameter cannot be edited
  @/li
  @li 
    @bunit@/b: the unit string
  @/li
  @li 
    @bmin_value@/b: the minimum value (effective for numerical types and if no choices are present)
  @/li
  @li 
    @bmax_value@/b: the maximum value (effective for numerical types and if no choices are present)
  @/li
  @li 
    @bdefault@/b: the default value
  @/li
  @li 
    @bchoices@/b: ([ [ d, v ], ... ]) choice descriptions/value for choice type
  @/li
@/ul

"choices" must be an array of two-element arrays (description text, value) which specify one
choice each for parameters with a choice of values. Such parameters are represented by a drop-down box.

This declaration will create an attribute "x" with getter and setter, where "x" is the name of the parameter.
If the type is TypeLayer, a getter "x_layer" delivering the layer index inside \\produce_impl is
created as well.

@method display_text_impl

@brief Delivers the display text

This method must be reimplemented in a PCell class to identify the PCell in human-readable form.
This text is shown in the cell tree for the PCell for example.

@method produce_impl

@brief Produces the layout

This method must be reimplemented in a PCell class.
Using the parameter values provided by the parameter getter and setters and the layout and cell through \\layout() and \\cell(),
this method is supposed to produce the final layout inside the given cell.

@method coerce_parameters_impl

@brief Coerces the parameters

This method can be reimplemented in a PCell class.
It is supposed to adjust parameters to render a consistent parameter set and to fix 
parameter range errors. This method is called for example inside the PCell user interface to 
compute the actual parameters when "Apply" is pressed.

@method callback_impl(name)

@brief Provides a callback on a parameter change

This method applies to user interface changes only. Whenever a parameter is changed
on the parameter page, this method is called with the name of the parameter.

On some occasions, this method called to establish a configuration unspecifically.
In this case, the name is an empty string - indicating "all parameters may have changed".

This method can change the state of this or any other parameter. For this, the 
state objects are supplied instead of the parameter values. For example to enable 
parameter "b" when a boolean parameter "a" is true, use the following code:

@code
def callback_impl(self, name):
  if name == "a" or name == "":
    b.enabled = a.value
@/code

The "enabled" attribute of the \\PCellParameterState object indicates whether the
parameter is enabled in the user interface. "a.value" delivers the value of the 
(boolean type assumed) parameter "a".

Note that the above code also checks for empty name to consider the case of a
global refresh.

Further useful attributes of the parameters are:

@ul
  @li 
    @b enabled @/b: the parameter entry is grayed out if false
  @/li
  @li 
    @b readonly @/b: the parameter cannot be edited (less strict than enabled)
  @/li
  @li 
    @b visible @/b: the parameter entry is not visible if false
  @/li
  @li 
    @b icon @/b: Sets an icon in front of the parameter indicating an error or a 
      warning (use \\PCellParameterState#WarningIcon or \\PCellParameterState#ErrorIcon).
  @/li
@/ul

@method can_create_from_shape_impl

@brief Returns true if the PCell can be created from the given shape

This method can be reimplemented in a PCell class.
If the PCell can be created from the shape avaible through the \\shape() method (a \\Shape object), this
method is supposed to return true. The layout the shape lives in can be accessed with \\layout() and the 
layer with \\layer().

The default implementation returns false.

@method parameters_from_shape_impl

@brief Sets the parameters from a shape

This method can be reimplemented in a PCell class.
If \\can_create_from_shape_impl returns true, this method is called to set the parameters from the 
given shape (see \\shape(), \\layout() and \\layer()). Note, that for setting a layer parameter you need
to create the \\LayerInfo object, i.e. like this:

@code
  self.l = self.layout().get_info(self.layer())
@/code

The default implementation does nothing. All parameters not set in this method will receive their default value.

@method transformation_from_shape_impl

@brief Gets the initial PCell instance transformation when creating from a shape

This method can be reimplemented in a PCell class.
If \\can_create_from_shape_impl returns true, this method is called to get the initial transformation from the 
given shape (see \\shape(), \\layout() and \\layer()). 

This method must return a \\Trans object. The default implementation returns a unit transformation (no displacement, no rotation).
 </doc>
 <autorun>false</autorun>
 <autorun-early>true</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>
# No code provided here. This macro is supplied to provide the documentation.
# The basic code is located in klayout.db.pcell_declaration_helper now.
</text>
</klayout-macro>
