
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2022 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQStringConverterBase.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QStringConverterBase>
#include "gsiQt.h"
#include "gsiQtCoreCommon.h"
#include <memory>

// -----------------------------------------------------------------------
// class QStringConverterBase

//  Constructor QStringConverterBase::QStringConverterBase()


static void _init_ctor_QStringConverterBase_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QStringConverterBase> ();
}

static void _call_ctor_QStringConverterBase_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QStringConverterBase *> (new QStringConverterBase ());
}



namespace gsi
{

static gsi::Methods methods_QStringConverterBase () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QStringConverterBase::QStringConverterBase()\nThis method creates an object of class QStringConverterBase.", &_init_ctor_QStringConverterBase_0, &_call_ctor_QStringConverterBase_0);
  return methods;
}

gsi::Class<QStringConverterBase> decl_QStringConverterBase ("QtCore", "QStringConverterBase",
  methods_QStringConverterBase (),
  "@qt\n@brief Binding of QStringConverterBase");


GSI_QTCORE_PUBLIC gsi::Class<QStringConverterBase> &qtdecl_QStringConverterBase () { return decl_QStringConverterBase; }

}


//  Implementation of the enum wrapper class for QStringConverterBase::Flag
namespace qt_gsi
{

static gsi::Enum<QStringConverterBase::Flag> decl_QStringConverterBase_Flag_Enum ("QtCore", "QStringConverterBase_Flag",
    gsi::enum_const ("Default", QStringConverterBase::Flag::Default, "@brief Enum constant QStringConverterBase::Flag::Default") +
    gsi::enum_const ("Stateless", QStringConverterBase::Flag::Stateless, "@brief Enum constant QStringConverterBase::Flag::Stateless") +
    gsi::enum_const ("ConvertInvalidToNull", QStringConverterBase::Flag::ConvertInvalidToNull, "@brief Enum constant QStringConverterBase::Flag::ConvertInvalidToNull") +
    gsi::enum_const ("WriteBom", QStringConverterBase::Flag::WriteBom, "@brief Enum constant QStringConverterBase::Flag::WriteBom") +
    gsi::enum_const ("ConvertInitialBom", QStringConverterBase::Flag::ConvertInitialBom, "@brief Enum constant QStringConverterBase::Flag::ConvertInitialBom"),
  "@qt\n@brief This class represents the QStringConverterBase::Flag enum");

static gsi::QFlagsClass<QStringConverterBase::Flag > decl_QStringConverterBase_Flag_Enums ("QtCore", "QStringConverterBase_QFlags_Flag",
  "@qt\n@brief This class represents the QFlags<QStringConverterBase::Flag> flag set");

static gsi::ClassExt<QStringConverterBase> decl_QStringConverterBase_Flag_Enum_as_child (decl_QStringConverterBase_Flag_Enum, "Flag");
static gsi::ClassExt<QStringConverterBase> decl_QStringConverterBase_Flag_Enums_as_child (decl_QStringConverterBase_Flag_Enums, "QFlags_Flag");

}

