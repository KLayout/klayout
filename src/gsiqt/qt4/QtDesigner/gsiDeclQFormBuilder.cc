
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2019 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQFormBuilder.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QFormBuilder>
#include <QDir>
#include <QIODevice>
#include <QWidget>
#include "gsiQt.h"
#include "gsiQtDesignerCommon.h"
#include "gsiDeclQtDesignerTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// class QFormBuilder

//  Constructor QFormBuilder::QFormBuilder()


static void _init_ctor_QFormBuilder_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QFormBuilder> ();
}

static void _call_ctor_QFormBuilder_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QFormBuilder *> (new QFormBuilder ());
}


// void QFormBuilder::addPluginPath(const QString &pluginPath)


static void _init_f_addPluginPath_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("pluginPath");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_addPluginPath_2025 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = gsi::arg_reader<const QString & >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QFormBuilder *)cls)->addPluginPath (arg1);
}


// void QFormBuilder::clearPluginPaths()


static void _init_f_clearPluginPaths_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_f_clearPluginPaths_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QFormBuilder *)cls)->clearPluginPaths ();
}


// QStringList QFormBuilder::pluginPaths()


static void _init_f_pluginPaths_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QStringList > ();
}

static void _call_f_pluginPaths_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QStringList > ((QStringList)((QFormBuilder *)cls)->pluginPaths ());
}


// void QFormBuilder::setPluginPath(const QStringList &pluginPaths)


static void _init_f_setPluginPath_2437 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("pluginPaths");
  decl->add_arg<const QStringList & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setPluginPath_2437 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QStringList &arg1 = gsi::arg_reader<const QStringList & >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QFormBuilder *)cls)->setPluginPath (arg1);
}



namespace gsi
{

static gsi::Methods methods_QFormBuilder () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QFormBuilder::QFormBuilder()\nThis method creates an object of class QFormBuilder.", &_init_ctor_QFormBuilder_0, &_call_ctor_QFormBuilder_0);
  methods += new qt_gsi::GenericMethod ("addPluginPath", "@brief Method void QFormBuilder::addPluginPath(const QString &pluginPath)\n", false, &_init_f_addPluginPath_2025, &_call_f_addPluginPath_2025);
  methods += new qt_gsi::GenericMethod ("clearPluginPaths", "@brief Method void QFormBuilder::clearPluginPaths()\n", false, &_init_f_clearPluginPaths_0, &_call_f_clearPluginPaths_0);
  methods += new qt_gsi::GenericMethod ("pluginPaths", "@brief Method QStringList QFormBuilder::pluginPaths()\n", true, &_init_f_pluginPaths_c0, &_call_f_pluginPaths_c0);
  methods += new qt_gsi::GenericMethod ("setPluginPath", "@brief Method void QFormBuilder::setPluginPath(const QStringList &pluginPaths)\n", false, &_init_f_setPluginPath_2437, &_call_f_setPluginPath_2437);
  return methods;
}

gsi::Class<QAbstractFormBuilder> &qtdecl_QAbstractFormBuilder ();

gsi::Class<QFormBuilder> decl_QFormBuilder (qtdecl_QAbstractFormBuilder (), "QtDesigner", "QFormBuilder",
  methods_QFormBuilder (),
  "@qt\n@brief Binding of QFormBuilder");


GSI_QTDESIGNER_PUBLIC gsi::Class<QFormBuilder> &qtdecl_QFormBuilder () { return decl_QFormBuilder; }

}

