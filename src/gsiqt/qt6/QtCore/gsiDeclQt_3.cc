
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2022 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQt_3.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <Qt>
#include "gsiQt.h"
#include "gsiQtCoreCommon.h"
#include <memory>

// -----------------------------------------------------------------------
// namespace Qt

class Qt_Namespace { };


//  Implementation of the enum wrapper class for Qt::ReturnByValueConstant
namespace qt_gsi
{

static gsi::Enum<Qt::ReturnByValueConstant> decl_Qt_ReturnByValueConstant_Enum ("QtCore", "Qt_ReturnByValueConstant",
    gsi::enum_const ("ReturnByValue", Qt::ReturnByValue, "@brief Enum constant Qt::ReturnByValue"),
  "@qt\n@brief This class represents the Qt::ReturnByValueConstant enum");

static gsi::QFlagsClass<Qt::ReturnByValueConstant > decl_Qt_ReturnByValueConstant_Enums ("QtCore", "Qt_QFlags_ReturnByValueConstant",
  "@qt\n@brief This class represents the QFlags<Qt::ReturnByValueConstant> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_ReturnByValueConstant_Enum_in_parent (decl_Qt_ReturnByValueConstant_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_ReturnByValueConstant_Enum_as_child (decl_Qt_ReturnByValueConstant_Enum, "ReturnByValueConstant");
static gsi::ClassExt<Qt_Namespace> decl_Qt_ReturnByValueConstant_Enums_as_child (decl_Qt_ReturnByValueConstant_Enums, "QFlags_ReturnByValueConstant");

}


//  Implementation of the enum wrapper class for Qt::ScreenOrientation
namespace qt_gsi
{

static gsi::Enum<Qt::ScreenOrientation> decl_Qt_ScreenOrientation_Enum ("QtCore", "Qt_ScreenOrientation",
    gsi::enum_const ("PrimaryOrientation", Qt::PrimaryOrientation, "@brief Enum constant Qt::PrimaryOrientation") +
    gsi::enum_const ("PortraitOrientation", Qt::PortraitOrientation, "@brief Enum constant Qt::PortraitOrientation") +
    gsi::enum_const ("LandscapeOrientation", Qt::LandscapeOrientation, "@brief Enum constant Qt::LandscapeOrientation") +
    gsi::enum_const ("InvertedPortraitOrientation", Qt::InvertedPortraitOrientation, "@brief Enum constant Qt::InvertedPortraitOrientation") +
    gsi::enum_const ("InvertedLandscapeOrientation", Qt::InvertedLandscapeOrientation, "@brief Enum constant Qt::InvertedLandscapeOrientation"),
  "@qt\n@brief This class represents the Qt::ScreenOrientation enum");

static gsi::QFlagsClass<Qt::ScreenOrientation > decl_Qt_ScreenOrientation_Enums ("QtCore", "Qt_QFlags_ScreenOrientation",
  "@qt\n@brief This class represents the QFlags<Qt::ScreenOrientation> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_ScreenOrientation_Enum_in_parent (decl_Qt_ScreenOrientation_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_ScreenOrientation_Enum_as_child (decl_Qt_ScreenOrientation_Enum, "ScreenOrientation");
static gsi::ClassExt<Qt_Namespace> decl_Qt_ScreenOrientation_Enums_as_child (decl_Qt_ScreenOrientation_Enums, "QFlags_ScreenOrientation");

}


//  Implementation of the enum wrapper class for Qt::ScrollBarPolicy
namespace qt_gsi
{

static gsi::Enum<Qt::ScrollBarPolicy> decl_Qt_ScrollBarPolicy_Enum ("QtCore", "Qt_ScrollBarPolicy",
    gsi::enum_const ("ScrollBarAsNeeded", Qt::ScrollBarAsNeeded, "@brief Enum constant Qt::ScrollBarAsNeeded") +
    gsi::enum_const ("ScrollBarAlwaysOff", Qt::ScrollBarAlwaysOff, "@brief Enum constant Qt::ScrollBarAlwaysOff") +
    gsi::enum_const ("ScrollBarAlwaysOn", Qt::ScrollBarAlwaysOn, "@brief Enum constant Qt::ScrollBarAlwaysOn"),
  "@qt\n@brief This class represents the Qt::ScrollBarPolicy enum");

static gsi::QFlagsClass<Qt::ScrollBarPolicy > decl_Qt_ScrollBarPolicy_Enums ("QtCore", "Qt_QFlags_ScrollBarPolicy",
  "@qt\n@brief This class represents the QFlags<Qt::ScrollBarPolicy> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_ScrollBarPolicy_Enum_in_parent (decl_Qt_ScrollBarPolicy_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_ScrollBarPolicy_Enum_as_child (decl_Qt_ScrollBarPolicy_Enum, "ScrollBarPolicy");
static gsi::ClassExt<Qt_Namespace> decl_Qt_ScrollBarPolicy_Enums_as_child (decl_Qt_ScrollBarPolicy_Enums, "QFlags_ScrollBarPolicy");

}


//  Implementation of the enum wrapper class for Qt::ScrollPhase
namespace qt_gsi
{

static gsi::Enum<Qt::ScrollPhase> decl_Qt_ScrollPhase_Enum ("QtCore", "Qt_ScrollPhase",
    gsi::enum_const ("NoScrollPhase", Qt::NoScrollPhase, "@brief Enum constant Qt::NoScrollPhase") +
    gsi::enum_const ("ScrollBegin", Qt::ScrollBegin, "@brief Enum constant Qt::ScrollBegin") +
    gsi::enum_const ("ScrollUpdate", Qt::ScrollUpdate, "@brief Enum constant Qt::ScrollUpdate") +
    gsi::enum_const ("ScrollEnd", Qt::ScrollEnd, "@brief Enum constant Qt::ScrollEnd") +
    gsi::enum_const ("ScrollMomentum", Qt::ScrollMomentum, "@brief Enum constant Qt::ScrollMomentum"),
  "@qt\n@brief This class represents the Qt::ScrollPhase enum");

static gsi::QFlagsClass<Qt::ScrollPhase > decl_Qt_ScrollPhase_Enums ("QtCore", "Qt_QFlags_ScrollPhase",
  "@qt\n@brief This class represents the QFlags<Qt::ScrollPhase> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_ScrollPhase_Enum_in_parent (decl_Qt_ScrollPhase_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_ScrollPhase_Enum_as_child (decl_Qt_ScrollPhase_Enum, "ScrollPhase");
static gsi::ClassExt<Qt_Namespace> decl_Qt_ScrollPhase_Enums_as_child (decl_Qt_ScrollPhase_Enums, "QFlags_ScrollPhase");

}


//  Implementation of the enum wrapper class for Qt::ShortcutContext
namespace qt_gsi
{

static gsi::Enum<Qt::ShortcutContext> decl_Qt_ShortcutContext_Enum ("QtCore", "Qt_ShortcutContext",
    gsi::enum_const ("WidgetShortcut", Qt::WidgetShortcut, "@brief Enum constant Qt::WidgetShortcut") +
    gsi::enum_const ("WindowShortcut", Qt::WindowShortcut, "@brief Enum constant Qt::WindowShortcut") +
    gsi::enum_const ("ApplicationShortcut", Qt::ApplicationShortcut, "@brief Enum constant Qt::ApplicationShortcut") +
    gsi::enum_const ("WidgetWithChildrenShortcut", Qt::WidgetWithChildrenShortcut, "@brief Enum constant Qt::WidgetWithChildrenShortcut"),
  "@qt\n@brief This class represents the Qt::ShortcutContext enum");

static gsi::QFlagsClass<Qt::ShortcutContext > decl_Qt_ShortcutContext_Enums ("QtCore", "Qt_QFlags_ShortcutContext",
  "@qt\n@brief This class represents the QFlags<Qt::ShortcutContext> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_ShortcutContext_Enum_in_parent (decl_Qt_ShortcutContext_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_ShortcutContext_Enum_as_child (decl_Qt_ShortcutContext_Enum, "ShortcutContext");
static gsi::ClassExt<Qt_Namespace> decl_Qt_ShortcutContext_Enums_as_child (decl_Qt_ShortcutContext_Enums, "QFlags_ShortcutContext");

}


//  Implementation of the enum wrapper class for Qt::SizeHint
namespace qt_gsi
{

static gsi::Enum<Qt::SizeHint> decl_Qt_SizeHint_Enum ("QtCore", "Qt_SizeHint",
    gsi::enum_const ("MinimumSize", Qt::MinimumSize, "@brief Enum constant Qt::MinimumSize") +
    gsi::enum_const ("PreferredSize", Qt::PreferredSize, "@brief Enum constant Qt::PreferredSize") +
    gsi::enum_const ("MaximumSize", Qt::MaximumSize, "@brief Enum constant Qt::MaximumSize") +
    gsi::enum_const ("MinimumDescent", Qt::MinimumDescent, "@brief Enum constant Qt::MinimumDescent") +
    gsi::enum_const ("NSizeHints", Qt::NSizeHints, "@brief Enum constant Qt::NSizeHints"),
  "@qt\n@brief This class represents the Qt::SizeHint enum");

static gsi::QFlagsClass<Qt::SizeHint > decl_Qt_SizeHint_Enums ("QtCore", "Qt_QFlags_SizeHint",
  "@qt\n@brief This class represents the QFlags<Qt::SizeHint> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_SizeHint_Enum_in_parent (decl_Qt_SizeHint_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_SizeHint_Enum_as_child (decl_Qt_SizeHint_Enum, "SizeHint");
static gsi::ClassExt<Qt_Namespace> decl_Qt_SizeHint_Enums_as_child (decl_Qt_SizeHint_Enums, "QFlags_SizeHint");

}


//  Implementation of the enum wrapper class for Qt::SizeMode
namespace qt_gsi
{

static gsi::Enum<Qt::SizeMode> decl_Qt_SizeMode_Enum ("QtCore", "Qt_SizeMode",
    gsi::enum_const ("AbsoluteSize", Qt::AbsoluteSize, "@brief Enum constant Qt::AbsoluteSize") +
    gsi::enum_const ("RelativeSize", Qt::RelativeSize, "@brief Enum constant Qt::RelativeSize"),
  "@qt\n@brief This class represents the Qt::SizeMode enum");

static gsi::QFlagsClass<Qt::SizeMode > decl_Qt_SizeMode_Enums ("QtCore", "Qt_QFlags_SizeMode",
  "@qt\n@brief This class represents the QFlags<Qt::SizeMode> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_SizeMode_Enum_in_parent (decl_Qt_SizeMode_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_SizeMode_Enum_as_child (decl_Qt_SizeMode_Enum, "SizeMode");
static gsi::ClassExt<Qt_Namespace> decl_Qt_SizeMode_Enums_as_child (decl_Qt_SizeMode_Enums, "QFlags_SizeMode");

}


//  Implementation of the enum wrapper class for Qt::SortOrder
namespace qt_gsi
{

static gsi::Enum<Qt::SortOrder> decl_Qt_SortOrder_Enum ("QtCore", "Qt_SortOrder",
    gsi::enum_const ("AscendingOrder", Qt::AscendingOrder, "@brief Enum constant Qt::AscendingOrder") +
    gsi::enum_const ("DescendingOrder", Qt::DescendingOrder, "@brief Enum constant Qt::DescendingOrder"),
  "@qt\n@brief This class represents the Qt::SortOrder enum");

static gsi::QFlagsClass<Qt::SortOrder > decl_Qt_SortOrder_Enums ("QtCore", "Qt_QFlags_SortOrder",
  "@qt\n@brief This class represents the QFlags<Qt::SortOrder> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_SortOrder_Enum_in_parent (decl_Qt_SortOrder_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_SortOrder_Enum_as_child (decl_Qt_SortOrder_Enum, "SortOrder");
static gsi::ClassExt<Qt_Namespace> decl_Qt_SortOrder_Enums_as_child (decl_Qt_SortOrder_Enums, "QFlags_SortOrder");

}


//  Implementation of the enum wrapper class for Qt::SplitBehaviorFlags
namespace qt_gsi
{

static gsi::Enum<Qt::SplitBehaviorFlags> decl_Qt_SplitBehaviorFlags_Enum ("QtCore", "Qt_SplitBehaviorFlags",
    gsi::enum_const ("KeepEmptyParts", Qt::KeepEmptyParts, "@brief Enum constant Qt::KeepEmptyParts") +
    gsi::enum_const ("SkipEmptyParts", Qt::SkipEmptyParts, "@brief Enum constant Qt::SkipEmptyParts"),
  "@qt\n@brief This class represents the Qt::SplitBehaviorFlags enum");

static gsi::QFlagsClass<Qt::SplitBehaviorFlags > decl_Qt_SplitBehaviorFlags_Enums ("QtCore", "Qt_QFlags_SplitBehaviorFlags",
  "@qt\n@brief This class represents the QFlags<Qt::SplitBehaviorFlags> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_SplitBehaviorFlags_Enum_in_parent (decl_Qt_SplitBehaviorFlags_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_SplitBehaviorFlags_Enum_as_child (decl_Qt_SplitBehaviorFlags_Enum, "SplitBehaviorFlags");
static gsi::ClassExt<Qt_Namespace> decl_Qt_SplitBehaviorFlags_Enums_as_child (decl_Qt_SplitBehaviorFlags_Enums, "QFlags_SplitBehaviorFlags");

}


//  Implementation of the enum wrapper class for Qt::TabFocusBehavior
namespace qt_gsi
{

static gsi::Enum<Qt::TabFocusBehavior> decl_Qt_TabFocusBehavior_Enum ("QtCore", "Qt_TabFocusBehavior",
    gsi::enum_const ("NoTabFocus", Qt::NoTabFocus, "@brief Enum constant Qt::NoTabFocus") +
    gsi::enum_const ("TabFocusTextControls", Qt::TabFocusTextControls, "@brief Enum constant Qt::TabFocusTextControls") +
    gsi::enum_const ("TabFocusListControls", Qt::TabFocusListControls, "@brief Enum constant Qt::TabFocusListControls") +
    gsi::enum_const ("TabFocusAllControls", Qt::TabFocusAllControls, "@brief Enum constant Qt::TabFocusAllControls"),
  "@qt\n@brief This class represents the Qt::TabFocusBehavior enum");

static gsi::QFlagsClass<Qt::TabFocusBehavior > decl_Qt_TabFocusBehavior_Enums ("QtCore", "Qt_QFlags_TabFocusBehavior",
  "@qt\n@brief This class represents the QFlags<Qt::TabFocusBehavior> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_TabFocusBehavior_Enum_in_parent (decl_Qt_TabFocusBehavior_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_TabFocusBehavior_Enum_as_child (decl_Qt_TabFocusBehavior_Enum, "TabFocusBehavior");
static gsi::ClassExt<Qt_Namespace> decl_Qt_TabFocusBehavior_Enums_as_child (decl_Qt_TabFocusBehavior_Enums, "QFlags_TabFocusBehavior");

}


//  Implementation of the enum wrapper class for Qt::TextElideMode
namespace qt_gsi
{

static gsi::Enum<Qt::TextElideMode> decl_Qt_TextElideMode_Enum ("QtCore", "Qt_TextElideMode",
    gsi::enum_const ("ElideLeft", Qt::ElideLeft, "@brief Enum constant Qt::ElideLeft") +
    gsi::enum_const ("ElideRight", Qt::ElideRight, "@brief Enum constant Qt::ElideRight") +
    gsi::enum_const ("ElideMiddle", Qt::ElideMiddle, "@brief Enum constant Qt::ElideMiddle") +
    gsi::enum_const ("ElideNone", Qt::ElideNone, "@brief Enum constant Qt::ElideNone"),
  "@qt\n@brief This class represents the Qt::TextElideMode enum");

static gsi::QFlagsClass<Qt::TextElideMode > decl_Qt_TextElideMode_Enums ("QtCore", "Qt_QFlags_TextElideMode",
  "@qt\n@brief This class represents the QFlags<Qt::TextElideMode> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_TextElideMode_Enum_in_parent (decl_Qt_TextElideMode_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_TextElideMode_Enum_as_child (decl_Qt_TextElideMode_Enum, "TextElideMode");
static gsi::ClassExt<Qt_Namespace> decl_Qt_TextElideMode_Enums_as_child (decl_Qt_TextElideMode_Enums, "QFlags_TextElideMode");

}


//  Implementation of the enum wrapper class for Qt::TextFlag
namespace qt_gsi
{

static gsi::Enum<Qt::TextFlag> decl_Qt_TextFlag_Enum ("QtCore", "Qt_TextFlag",
    gsi::enum_const ("TextSingleLine", Qt::TextSingleLine, "@brief Enum constant Qt::TextSingleLine") +
    gsi::enum_const ("TextDontClip", Qt::TextDontClip, "@brief Enum constant Qt::TextDontClip") +
    gsi::enum_const ("TextExpandTabs", Qt::TextExpandTabs, "@brief Enum constant Qt::TextExpandTabs") +
    gsi::enum_const ("TextShowMnemonic", Qt::TextShowMnemonic, "@brief Enum constant Qt::TextShowMnemonic") +
    gsi::enum_const ("TextWordWrap", Qt::TextWordWrap, "@brief Enum constant Qt::TextWordWrap") +
    gsi::enum_const ("TextWrapAnywhere", Qt::TextWrapAnywhere, "@brief Enum constant Qt::TextWrapAnywhere") +
    gsi::enum_const ("TextDontPrint", Qt::TextDontPrint, "@brief Enum constant Qt::TextDontPrint") +
    gsi::enum_const ("TextIncludeTrailingSpaces", Qt::TextIncludeTrailingSpaces, "@brief Enum constant Qt::TextIncludeTrailingSpaces") +
    gsi::enum_const ("TextHideMnemonic", Qt::TextHideMnemonic, "@brief Enum constant Qt::TextHideMnemonic") +
    gsi::enum_const ("TextJustificationForced", Qt::TextJustificationForced, "@brief Enum constant Qt::TextJustificationForced") +
    gsi::enum_const ("TextForceLeftToRight", Qt::TextForceLeftToRight, "@brief Enum constant Qt::TextForceLeftToRight") +
    gsi::enum_const ("TextForceRightToLeft", Qt::TextForceRightToLeft, "@brief Enum constant Qt::TextForceRightToLeft") +
    gsi::enum_const ("TextLongestVariant", Qt::TextLongestVariant, "@brief Enum constant Qt::TextLongestVariant"),
  "@qt\n@brief This class represents the Qt::TextFlag enum");

static gsi::QFlagsClass<Qt::TextFlag > decl_Qt_TextFlag_Enums ("QtCore", "Qt_QFlags_TextFlag",
  "@qt\n@brief This class represents the QFlags<Qt::TextFlag> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_TextFlag_Enum_in_parent (decl_Qt_TextFlag_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_TextFlag_Enum_as_child (decl_Qt_TextFlag_Enum, "TextFlag");
static gsi::ClassExt<Qt_Namespace> decl_Qt_TextFlag_Enums_as_child (decl_Qt_TextFlag_Enums, "QFlags_TextFlag");

}


//  Implementation of the enum wrapper class for Qt::TextFormat
namespace qt_gsi
{

static gsi::Enum<Qt::TextFormat> decl_Qt_TextFormat_Enum ("QtCore", "Qt_TextFormat",
    gsi::enum_const ("PlainText", Qt::PlainText, "@brief Enum constant Qt::PlainText") +
    gsi::enum_const ("RichText", Qt::RichText, "@brief Enum constant Qt::RichText") +
    gsi::enum_const ("AutoText", Qt::AutoText, "@brief Enum constant Qt::AutoText") +
    gsi::enum_const ("MarkdownText", Qt::MarkdownText, "@brief Enum constant Qt::MarkdownText"),
  "@qt\n@brief This class represents the Qt::TextFormat enum");

static gsi::QFlagsClass<Qt::TextFormat > decl_Qt_TextFormat_Enums ("QtCore", "Qt_QFlags_TextFormat",
  "@qt\n@brief This class represents the QFlags<Qt::TextFormat> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_TextFormat_Enum_in_parent (decl_Qt_TextFormat_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_TextFormat_Enum_as_child (decl_Qt_TextFormat_Enum, "TextFormat");
static gsi::ClassExt<Qt_Namespace> decl_Qt_TextFormat_Enums_as_child (decl_Qt_TextFormat_Enums, "QFlags_TextFormat");

}


//  Implementation of the enum wrapper class for Qt::TextInteractionFlag
namespace qt_gsi
{

static gsi::Enum<Qt::TextInteractionFlag> decl_Qt_TextInteractionFlag_Enum ("QtCore", "Qt_TextInteractionFlag",
    gsi::enum_const ("NoTextInteraction", Qt::NoTextInteraction, "@brief Enum constant Qt::NoTextInteraction") +
    gsi::enum_const ("TextSelectableByMouse", Qt::TextSelectableByMouse, "@brief Enum constant Qt::TextSelectableByMouse") +
    gsi::enum_const ("TextSelectableByKeyboard", Qt::TextSelectableByKeyboard, "@brief Enum constant Qt::TextSelectableByKeyboard") +
    gsi::enum_const ("LinksAccessibleByMouse", Qt::LinksAccessibleByMouse, "@brief Enum constant Qt::LinksAccessibleByMouse") +
    gsi::enum_const ("LinksAccessibleByKeyboard", Qt::LinksAccessibleByKeyboard, "@brief Enum constant Qt::LinksAccessibleByKeyboard") +
    gsi::enum_const ("TextEditable", Qt::TextEditable, "@brief Enum constant Qt::TextEditable") +
    gsi::enum_const ("TextEditorInteraction", Qt::TextEditorInteraction, "@brief Enum constant Qt::TextEditorInteraction") +
    gsi::enum_const ("TextBrowserInteraction", Qt::TextBrowserInteraction, "@brief Enum constant Qt::TextBrowserInteraction"),
  "@qt\n@brief This class represents the Qt::TextInteractionFlag enum");

static gsi::QFlagsClass<Qt::TextInteractionFlag > decl_Qt_TextInteractionFlag_Enums ("QtCore", "Qt_QFlags_TextInteractionFlag",
  "@qt\n@brief This class represents the QFlags<Qt::TextInteractionFlag> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_TextInteractionFlag_Enum_in_parent (decl_Qt_TextInteractionFlag_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_TextInteractionFlag_Enum_as_child (decl_Qt_TextInteractionFlag_Enum, "TextInteractionFlag");
static gsi::ClassExt<Qt_Namespace> decl_Qt_TextInteractionFlag_Enums_as_child (decl_Qt_TextInteractionFlag_Enums, "QFlags_TextInteractionFlag");

}


//  Implementation of the enum wrapper class for Qt::TileRule
namespace qt_gsi
{

static gsi::Enum<Qt::TileRule> decl_Qt_TileRule_Enum ("QtCore", "Qt_TileRule",
    gsi::enum_const ("StretchTile", Qt::StretchTile, "@brief Enum constant Qt::StretchTile") +
    gsi::enum_const ("RepeatTile", Qt::RepeatTile, "@brief Enum constant Qt::RepeatTile") +
    gsi::enum_const ("RoundTile", Qt::RoundTile, "@brief Enum constant Qt::RoundTile"),
  "@qt\n@brief This class represents the Qt::TileRule enum");

static gsi::QFlagsClass<Qt::TileRule > decl_Qt_TileRule_Enums ("QtCore", "Qt_QFlags_TileRule",
  "@qt\n@brief This class represents the QFlags<Qt::TileRule> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_TileRule_Enum_in_parent (decl_Qt_TileRule_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_TileRule_Enum_as_child (decl_Qt_TileRule_Enum, "TileRule");
static gsi::ClassExt<Qt_Namespace> decl_Qt_TileRule_Enums_as_child (decl_Qt_TileRule_Enums, "QFlags_TileRule");

}


//  Implementation of the enum wrapper class for Qt::TimeSpec
namespace qt_gsi
{

static gsi::Enum<Qt::TimeSpec> decl_Qt_TimeSpec_Enum ("QtCore", "Qt_TimeSpec",
    gsi::enum_const ("LocalTime", Qt::LocalTime, "@brief Enum constant Qt::LocalTime") +
    gsi::enum_const ("UTC", Qt::UTC, "@brief Enum constant Qt::UTC") +
    gsi::enum_const ("OffsetFromUTC", Qt::OffsetFromUTC, "@brief Enum constant Qt::OffsetFromUTC") +
    gsi::enum_const ("TimeZone", Qt::TimeZone, "@brief Enum constant Qt::TimeZone"),
  "@qt\n@brief This class represents the Qt::TimeSpec enum");

static gsi::QFlagsClass<Qt::TimeSpec > decl_Qt_TimeSpec_Enums ("QtCore", "Qt_QFlags_TimeSpec",
  "@qt\n@brief This class represents the QFlags<Qt::TimeSpec> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_TimeSpec_Enum_in_parent (decl_Qt_TimeSpec_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_TimeSpec_Enum_as_child (decl_Qt_TimeSpec_Enum, "TimeSpec");
static gsi::ClassExt<Qt_Namespace> decl_Qt_TimeSpec_Enums_as_child (decl_Qt_TimeSpec_Enums, "QFlags_TimeSpec");

}


//  Implementation of the enum wrapper class for Qt::TimerType
namespace qt_gsi
{

static gsi::Enum<Qt::TimerType> decl_Qt_TimerType_Enum ("QtCore", "Qt_TimerType",
    gsi::enum_const ("PreciseTimer", Qt::PreciseTimer, "@brief Enum constant Qt::PreciseTimer") +
    gsi::enum_const ("CoarseTimer", Qt::CoarseTimer, "@brief Enum constant Qt::CoarseTimer") +
    gsi::enum_const ("VeryCoarseTimer", Qt::VeryCoarseTimer, "@brief Enum constant Qt::VeryCoarseTimer"),
  "@qt\n@brief This class represents the Qt::TimerType enum");

static gsi::QFlagsClass<Qt::TimerType > decl_Qt_TimerType_Enums ("QtCore", "Qt_QFlags_TimerType",
  "@qt\n@brief This class represents the QFlags<Qt::TimerType> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_TimerType_Enum_in_parent (decl_Qt_TimerType_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_TimerType_Enum_as_child (decl_Qt_TimerType_Enum, "TimerType");
static gsi::ClassExt<Qt_Namespace> decl_Qt_TimerType_Enums_as_child (decl_Qt_TimerType_Enums, "QFlags_TimerType");

}


//  Implementation of the enum wrapper class for Qt::ToolBarArea
namespace qt_gsi
{

static gsi::Enum<Qt::ToolBarArea> decl_Qt_ToolBarArea_Enum ("QtCore", "Qt_ToolBarArea",
    gsi::enum_const ("LeftToolBarArea", Qt::LeftToolBarArea, "@brief Enum constant Qt::LeftToolBarArea") +
    gsi::enum_const ("RightToolBarArea", Qt::RightToolBarArea, "@brief Enum constant Qt::RightToolBarArea") +
    gsi::enum_const ("TopToolBarArea", Qt::TopToolBarArea, "@brief Enum constant Qt::TopToolBarArea") +
    gsi::enum_const ("BottomToolBarArea", Qt::BottomToolBarArea, "@brief Enum constant Qt::BottomToolBarArea") +
    gsi::enum_const ("ToolBarArea_Mask", Qt::ToolBarArea_Mask, "@brief Enum constant Qt::ToolBarArea_Mask") +
    gsi::enum_const ("AllToolBarAreas", Qt::AllToolBarAreas, "@brief Enum constant Qt::AllToolBarAreas") +
    gsi::enum_const ("NoToolBarArea", Qt::NoToolBarArea, "@brief Enum constant Qt::NoToolBarArea"),
  "@qt\n@brief This class represents the Qt::ToolBarArea enum");

static gsi::QFlagsClass<Qt::ToolBarArea > decl_Qt_ToolBarArea_Enums ("QtCore", "Qt_QFlags_ToolBarArea",
  "@qt\n@brief This class represents the QFlags<Qt::ToolBarArea> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_ToolBarArea_Enum_in_parent (decl_Qt_ToolBarArea_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_ToolBarArea_Enum_as_child (decl_Qt_ToolBarArea_Enum, "ToolBarArea");
static gsi::ClassExt<Qt_Namespace> decl_Qt_ToolBarArea_Enums_as_child (decl_Qt_ToolBarArea_Enums, "QFlags_ToolBarArea");

}


//  Implementation of the enum wrapper class for Qt::ToolBarAreaSizes
namespace qt_gsi
{

static gsi::Enum<Qt::ToolBarAreaSizes> decl_Qt_ToolBarAreaSizes_Enum ("QtCore", "Qt_ToolBarAreaSizes",
    gsi::enum_const ("NToolBarAreas", Qt::NToolBarAreas, "@brief Enum constant Qt::NToolBarAreas"),
  "@qt\n@brief This class represents the Qt::ToolBarAreaSizes enum");

static gsi::QFlagsClass<Qt::ToolBarAreaSizes > decl_Qt_ToolBarAreaSizes_Enums ("QtCore", "Qt_QFlags_ToolBarAreaSizes",
  "@qt\n@brief This class represents the QFlags<Qt::ToolBarAreaSizes> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_ToolBarAreaSizes_Enum_in_parent (decl_Qt_ToolBarAreaSizes_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_ToolBarAreaSizes_Enum_as_child (decl_Qt_ToolBarAreaSizes_Enum, "ToolBarAreaSizes");
static gsi::ClassExt<Qt_Namespace> decl_Qt_ToolBarAreaSizes_Enums_as_child (decl_Qt_ToolBarAreaSizes_Enums, "QFlags_ToolBarAreaSizes");

}


//  Implementation of the enum wrapper class for Qt::ToolButtonStyle
namespace qt_gsi
{

static gsi::Enum<Qt::ToolButtonStyle> decl_Qt_ToolButtonStyle_Enum ("QtCore", "Qt_ToolButtonStyle",
    gsi::enum_const ("ToolButtonIconOnly", Qt::ToolButtonIconOnly, "@brief Enum constant Qt::ToolButtonIconOnly") +
    gsi::enum_const ("ToolButtonTextOnly", Qt::ToolButtonTextOnly, "@brief Enum constant Qt::ToolButtonTextOnly") +
    gsi::enum_const ("ToolButtonTextBesideIcon", Qt::ToolButtonTextBesideIcon, "@brief Enum constant Qt::ToolButtonTextBesideIcon") +
    gsi::enum_const ("ToolButtonTextUnderIcon", Qt::ToolButtonTextUnderIcon, "@brief Enum constant Qt::ToolButtonTextUnderIcon") +
    gsi::enum_const ("ToolButtonFollowStyle", Qt::ToolButtonFollowStyle, "@brief Enum constant Qt::ToolButtonFollowStyle"),
  "@qt\n@brief This class represents the Qt::ToolButtonStyle enum");

static gsi::QFlagsClass<Qt::ToolButtonStyle > decl_Qt_ToolButtonStyle_Enums ("QtCore", "Qt_QFlags_ToolButtonStyle",
  "@qt\n@brief This class represents the QFlags<Qt::ToolButtonStyle> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_ToolButtonStyle_Enum_in_parent (decl_Qt_ToolButtonStyle_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_ToolButtonStyle_Enum_as_child (decl_Qt_ToolButtonStyle_Enum, "ToolButtonStyle");
static gsi::ClassExt<Qt_Namespace> decl_Qt_ToolButtonStyle_Enums_as_child (decl_Qt_ToolButtonStyle_Enums, "QFlags_ToolButtonStyle");

}

