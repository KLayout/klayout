
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2019 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQXmlStreamStringRef.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QXmlStreamStringRef>
#include "gsiQt.h"
#include "gsiQtCoreCommon.h"
#include "gsiDeclQtCoreTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// class QXmlStreamStringRef

//  Constructor QXmlStreamStringRef::QXmlStreamStringRef()


static void _init_ctor_QXmlStreamStringRef_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QXmlStreamStringRef> ();
}

static void _call_ctor_QXmlStreamStringRef_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QXmlStreamStringRef *> (new QXmlStreamStringRef ());
}


//  Constructor QXmlStreamStringRef::QXmlStreamStringRef(const QStringRef &aString)


static void _init_ctor_QXmlStreamStringRef_2310 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("aString");
  decl->add_arg<const QStringRef & > (argspec_0);
  decl->set_return_new<QXmlStreamStringRef> ();
}

static void _call_ctor_QXmlStreamStringRef_2310 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QStringRef &arg1 = gsi::arg_reader<const QStringRef & >() (args, heap);
  ret.write<QXmlStreamStringRef *> (new QXmlStreamStringRef (arg1));
}


//  Constructor QXmlStreamStringRef::QXmlStreamStringRef(const QString &aString)


static void _init_ctor_QXmlStreamStringRef_2025 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("aString");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return_new<QXmlStreamStringRef> ();
}

static void _call_ctor_QXmlStreamStringRef_2025 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = gsi::arg_reader<const QString & >() (args, heap);
  ret.write<QXmlStreamStringRef *> (new QXmlStreamStringRef (arg1));
}


// void QXmlStreamStringRef::clear()


static void _init_f_clear_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_f_clear_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QXmlStreamStringRef *)cls)->clear ();
}


// int QXmlStreamStringRef::position()


static void _init_f_position_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_f_position_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<int > ((int)((QXmlStreamStringRef *)cls)->position ());
}


// int QXmlStreamStringRef::size()


static void _init_f_size_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_f_size_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<int > ((int)((QXmlStreamStringRef *)cls)->size ());
}


// const QString *QXmlStreamStringRef::string()


static void _init_f_string_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<const QString * > ();
}

static void _call_f_string_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<const QString * > ((const QString *)((QXmlStreamStringRef *)cls)->string ());
}



namespace gsi
{

static gsi::Methods methods_QXmlStreamStringRef () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QXmlStreamStringRef::QXmlStreamStringRef()\nThis method creates an object of class QXmlStreamStringRef.", &_init_ctor_QXmlStreamStringRef_0, &_call_ctor_QXmlStreamStringRef_0);
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QXmlStreamStringRef::QXmlStreamStringRef(const QStringRef &aString)\nThis method creates an object of class QXmlStreamStringRef.", &_init_ctor_QXmlStreamStringRef_2310, &_call_ctor_QXmlStreamStringRef_2310);
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QXmlStreamStringRef::QXmlStreamStringRef(const QString &aString)\nThis method creates an object of class QXmlStreamStringRef.", &_init_ctor_QXmlStreamStringRef_2025, &_call_ctor_QXmlStreamStringRef_2025);
  methods += new qt_gsi::GenericMethod ("clear", "@brief Method void QXmlStreamStringRef::clear()\n", false, &_init_f_clear_0, &_call_f_clear_0);
  methods += new qt_gsi::GenericMethod ("position", "@brief Method int QXmlStreamStringRef::position()\n", true, &_init_f_position_c0, &_call_f_position_c0);
  methods += new qt_gsi::GenericMethod ("size", "@brief Method int QXmlStreamStringRef::size()\n", true, &_init_f_size_c0, &_call_f_size_c0);
  methods += new qt_gsi::GenericMethod ("string", "@brief Method const QString *QXmlStreamStringRef::string()\n", true, &_init_f_string_c0, &_call_f_string_c0);
  return methods;
}

gsi::Class<QXmlStreamStringRef> decl_QXmlStreamStringRef ("QtCore", "QXmlStreamStringRef",
  methods_QXmlStreamStringRef (),
  "@qt\n@brief Binding of QXmlStreamStringRef");


GSI_QTCORE_PUBLIC gsi::Class<QXmlStreamStringRef> &qtdecl_QXmlStreamStringRef () { return decl_QXmlStreamStringRef; }

}

