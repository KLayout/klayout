<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category/>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>true</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>ruby</interpreter>
 <dsl-interpreter-name/>
 <text>
module DRC

  def DRC.execute_drc(macro, generator, rdb_index = nil)

    timer = RBA::Timer::new
    timer.start
    drc = DRCEngine::new
    drc._rdb_index = rdb_index
    drc._generator = generator

    begin

      # Set a debugger scope so that our errors end up with the debugger set to the DRC's line
      RBA::MacroExecutionContext::set_debugger_scope(macro.path)
      # No verbosity set in drc engine - we cannot use the engine's logger 
      RBA::Logger::verbosity &gt;= 10 &amp;&amp; RBA::Logger::info("Running #{macro.path}")
      drc.instance_eval(macro.text, macro.path)
      # Remove the debugger scope
      RBA::MacroExecutionContext::remove_debugger_scope

    rescue =&gt; ex

      drc.error("In #{macro.path}: #{ex.to_s}")
      RBA::MacroExecutionContext::ignore_next_exception
      raise ex

    ensure

      # cleans up and creates layout and report views
      drc._finish

    end

    timer.stop
    drc.info("Total run time: #{'%.3f'%(timer.sys+timer.user)}s")

  end
  
  # A DSL implementation for a DRC language (XML format)
  class DRCInterpreter &lt; RBA::MacroInterpreter
  
    # Constructor
    def initialize(recipe)

      @recipe = recipe

      # Make the DSL use ruby syntax highlighting
      self.syntax_scheme = "ruby"
      self.suffix = "lydrc"
      self.debugger_scheme = RBA::MacroInterpreter::RubyDebugger
      self.storage_scheme = RBA::MacroInterpreter::MacroFormat
      self.description = "DRC"

      # Registers the new interpreter
      register("drc-dsl-xml")

      # create a template for the macro editor:
      create_template(":/drc-templates/drc.lym")

    end
    
    # Implements the execute method
    def execute(macro)
      DRC::execute_drc(macro, @recipe.generator("script" => macro.path))
    end
    
  end
  
  # A DSL implementation for a DRC language (Plain text format)
  class DRCPlainTextInterpreter &lt; RBA::MacroInterpreter
  
    # Constructor
    def initialize(recipe)

      @recipe = recipe

      # Make the DSL use ruby syntax highlighting
      self.syntax_scheme = "ruby"
      self.suffix = "drc"
      self.debugger_scheme = RBA::MacroInterpreter::RubyDebugger
      self.storage_scheme = RBA::MacroInterpreter::PlainTextWithHashAnnotationsFormat
      self.description = "DRC (Text)"

      # Registers the new interpreter
      register("drc-dsl")

    end
    
    # Implements the execute method
    def execute(macro)
      DRC::execute_drc(macro, @recipe.generator("script" => macro.path))
    end
    
  end
  
  # A recipe implementation allowing the LVS run to be redone
  class DRCRecipe &lt; RBA::Recipe

    def initialize
      super("drc", "DRC recipe")
    end

    def execute(params)

      script = params["script"]
      if ! script
        return
      end

      macro = RBA::Macro::macro_by_path(script)
      macro || raise("Can't find DRC script #{script} - unable to re-run")

      DRC::execute_drc(macro, self.generator("script" => script), params["rdb_index"])
      
    end

  end
  
  # Register the recipe
  drc_recipe = DRCRecipe::new
 
  # Register the new interpreters
  DRCInterpreter::new(drc_recipe)
  DRCPlainTextInterpreter::new(drc_recipe)
 
end
</text>
</klayout-macro>

