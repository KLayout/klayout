
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2022 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQHttp2Configuration.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QHttp2Configuration>
#include "gsiQt.h"
#include "gsiQtNetworkCommon.h"
#include <memory>

// -----------------------------------------------------------------------
// class QHttp2Configuration

//  Constructor QHttp2Configuration::QHttp2Configuration()


static void _init_ctor_QHttp2Configuration_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QHttp2Configuration> ();
}

static void _call_ctor_QHttp2Configuration_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QHttp2Configuration *> (new QHttp2Configuration ());
}


//  Constructor QHttp2Configuration::QHttp2Configuration(const QHttp2Configuration &other)


static void _init_ctor_QHttp2Configuration_3228 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QHttp2Configuration & > (argspec_0);
  decl->set_return_new<QHttp2Configuration> ();
}

static void _call_ctor_QHttp2Configuration_3228 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QHttp2Configuration &arg1 = gsi::arg_reader<const QHttp2Configuration & >() (args, heap);
  ret.write<QHttp2Configuration *> (new QHttp2Configuration (arg1));
}


// bool QHttp2Configuration::huffmanCompressionEnabled()


static void _init_f_huffmanCompressionEnabled_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_huffmanCompressionEnabled_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QHttp2Configuration *)cls)->huffmanCompressionEnabled ());
}


// unsigned int QHttp2Configuration::maxFrameSize()


static void _init_f_maxFrameSize_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<unsigned int > ();
}

static void _call_f_maxFrameSize_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<unsigned int > ((unsigned int)((QHttp2Configuration *)cls)->maxFrameSize ());
}


// QHttp2Configuration &QHttp2Configuration::operator =(const QHttp2Configuration &other)


static void _init_f_operator_eq__3228 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QHttp2Configuration & > (argspec_0);
  decl->set_return<QHttp2Configuration & > ();
}

static void _call_f_operator_eq__3228 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QHttp2Configuration &arg1 = gsi::arg_reader<const QHttp2Configuration & >() (args, heap);
  ret.write<QHttp2Configuration & > ((QHttp2Configuration &)((QHttp2Configuration *)cls)->operator = (arg1));
}


// bool QHttp2Configuration::serverPushEnabled()


static void _init_f_serverPushEnabled_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_serverPushEnabled_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QHttp2Configuration *)cls)->serverPushEnabled ());
}


// unsigned int QHttp2Configuration::sessionReceiveWindowSize()


static void _init_f_sessionReceiveWindowSize_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<unsigned int > ();
}

static void _call_f_sessionReceiveWindowSize_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<unsigned int > ((unsigned int)((QHttp2Configuration *)cls)->sessionReceiveWindowSize ());
}


// void QHttp2Configuration::setHuffmanCompressionEnabled(bool enable)


static void _init_f_setHuffmanCompressionEnabled_864 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("enable");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setHuffmanCompressionEnabled_864 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  bool arg1 = gsi::arg_reader<bool >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QHttp2Configuration *)cls)->setHuffmanCompressionEnabled (arg1);
}


// bool QHttp2Configuration::setMaxFrameSize(unsigned int size)


static void _init_f_setMaxFrameSize_1772 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("size");
  decl->add_arg<unsigned int > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_setMaxFrameSize_1772 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  unsigned int arg1 = gsi::arg_reader<unsigned int >() (args, heap);
  ret.write<bool > ((bool)((QHttp2Configuration *)cls)->setMaxFrameSize (arg1));
}


// void QHttp2Configuration::setServerPushEnabled(bool enable)


static void _init_f_setServerPushEnabled_864 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("enable");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setServerPushEnabled_864 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  bool arg1 = gsi::arg_reader<bool >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QHttp2Configuration *)cls)->setServerPushEnabled (arg1);
}


// bool QHttp2Configuration::setSessionReceiveWindowSize(unsigned int size)


static void _init_f_setSessionReceiveWindowSize_1772 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("size");
  decl->add_arg<unsigned int > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_setSessionReceiveWindowSize_1772 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  unsigned int arg1 = gsi::arg_reader<unsigned int >() (args, heap);
  ret.write<bool > ((bool)((QHttp2Configuration *)cls)->setSessionReceiveWindowSize (arg1));
}


// bool QHttp2Configuration::setStreamReceiveWindowSize(unsigned int size)


static void _init_f_setStreamReceiveWindowSize_1772 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("size");
  decl->add_arg<unsigned int > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_setStreamReceiveWindowSize_1772 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  unsigned int arg1 = gsi::arg_reader<unsigned int >() (args, heap);
  ret.write<bool > ((bool)((QHttp2Configuration *)cls)->setStreamReceiveWindowSize (arg1));
}


// unsigned int QHttp2Configuration::streamReceiveWindowSize()


static void _init_f_streamReceiveWindowSize_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<unsigned int > ();
}

static void _call_f_streamReceiveWindowSize_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<unsigned int > ((unsigned int)((QHttp2Configuration *)cls)->streamReceiveWindowSize ());
}


// void QHttp2Configuration::swap(QHttp2Configuration &other)


static void _init_f_swap_2533 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<QHttp2Configuration & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_swap_2533 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QHttp2Configuration &arg1 = gsi::arg_reader<QHttp2Configuration & >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QHttp2Configuration *)cls)->swap (arg1);
}



namespace gsi
{

static gsi::Methods methods_QHttp2Configuration () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QHttp2Configuration::QHttp2Configuration()\nThis method creates an object of class QHttp2Configuration.", &_init_ctor_QHttp2Configuration_0, &_call_ctor_QHttp2Configuration_0);
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QHttp2Configuration::QHttp2Configuration(const QHttp2Configuration &other)\nThis method creates an object of class QHttp2Configuration.", &_init_ctor_QHttp2Configuration_3228, &_call_ctor_QHttp2Configuration_3228);
  methods += new qt_gsi::GenericMethod ("huffmanCompressionEnabled", "@brief Method bool QHttp2Configuration::huffmanCompressionEnabled()\n", true, &_init_f_huffmanCompressionEnabled_c0, &_call_f_huffmanCompressionEnabled_c0);
  methods += new qt_gsi::GenericMethod ("maxFrameSize", "@brief Method unsigned int QHttp2Configuration::maxFrameSize()\n", true, &_init_f_maxFrameSize_c0, &_call_f_maxFrameSize_c0);
  methods += new qt_gsi::GenericMethod ("assign", "@brief Method QHttp2Configuration &QHttp2Configuration::operator =(const QHttp2Configuration &other)\n", false, &_init_f_operator_eq__3228, &_call_f_operator_eq__3228);
  methods += new qt_gsi::GenericMethod ("serverPushEnabled", "@brief Method bool QHttp2Configuration::serverPushEnabled()\n", true, &_init_f_serverPushEnabled_c0, &_call_f_serverPushEnabled_c0);
  methods += new qt_gsi::GenericMethod ("sessionReceiveWindowSize", "@brief Method unsigned int QHttp2Configuration::sessionReceiveWindowSize()\n", true, &_init_f_sessionReceiveWindowSize_c0, &_call_f_sessionReceiveWindowSize_c0);
  methods += new qt_gsi::GenericMethod ("setHuffmanCompressionEnabled", "@brief Method void QHttp2Configuration::setHuffmanCompressionEnabled(bool enable)\n", false, &_init_f_setHuffmanCompressionEnabled_864, &_call_f_setHuffmanCompressionEnabled_864);
  methods += new qt_gsi::GenericMethod ("setMaxFrameSize", "@brief Method bool QHttp2Configuration::setMaxFrameSize(unsigned int size)\n", false, &_init_f_setMaxFrameSize_1772, &_call_f_setMaxFrameSize_1772);
  methods += new qt_gsi::GenericMethod ("setServerPushEnabled", "@brief Method void QHttp2Configuration::setServerPushEnabled(bool enable)\n", false, &_init_f_setServerPushEnabled_864, &_call_f_setServerPushEnabled_864);
  methods += new qt_gsi::GenericMethod ("setSessionReceiveWindowSize", "@brief Method bool QHttp2Configuration::setSessionReceiveWindowSize(unsigned int size)\n", false, &_init_f_setSessionReceiveWindowSize_1772, &_call_f_setSessionReceiveWindowSize_1772);
  methods += new qt_gsi::GenericMethod ("setStreamReceiveWindowSize", "@brief Method bool QHttp2Configuration::setStreamReceiveWindowSize(unsigned int size)\n", false, &_init_f_setStreamReceiveWindowSize_1772, &_call_f_setStreamReceiveWindowSize_1772);
  methods += new qt_gsi::GenericMethod ("streamReceiveWindowSize", "@brief Method unsigned int QHttp2Configuration::streamReceiveWindowSize()\n", true, &_init_f_streamReceiveWindowSize_c0, &_call_f_streamReceiveWindowSize_c0);
  methods += new qt_gsi::GenericMethod ("swap", "@brief Method void QHttp2Configuration::swap(QHttp2Configuration &other)\n", false, &_init_f_swap_2533, &_call_f_swap_2533);
  return methods;
}

gsi::Class<QHttp2Configuration> decl_QHttp2Configuration ("QtNetwork", "QHttp2Configuration",
  methods_QHttp2Configuration (),
  "@qt\n@brief Binding of QHttp2Configuration");


GSI_QTNETWORK_PUBLIC gsi::Class<QHttp2Configuration> &qtdecl_QHttp2Configuration () { return decl_QHttp2Configuration; }

}

