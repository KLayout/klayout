
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2019 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQInputContextFactory.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QInputContextFactory>
#include <QInputContext>
#include <QObject>
#include "gsiQt.h"
#include "gsiQtGuiCommon.h"
#include "gsiDeclQtGuiTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// class QInputContextFactory

//  Constructor QInputContextFactory::QInputContextFactory()


static void _init_ctor_QInputContextFactory_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QInputContextFactory> ();
}

static void _call_ctor_QInputContextFactory_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QInputContextFactory *> (new QInputContextFactory ());
}


// static QInputContext *QInputContextFactory::create(const QString &key, QObject *parent)


static void _init_f_create_3219 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("key");
  decl->add_arg<const QString & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("parent");
  decl->add_arg<QObject * > (argspec_1);
  decl->set_return<QInputContext * > ();
}

static void _call_f_create_3219 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = gsi::arg_reader<const QString & >() (args, heap);
  QObject *arg2 = gsi::arg_reader<QObject * >() (args, heap);
  ret.write<QInputContext * > ((QInputContext *)QInputContextFactory::create (arg1, arg2));
}


// static QString QInputContextFactory::description(const QString &key)


static void _init_f_description_2025 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("key");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<QString > ();
}

static void _call_f_description_2025 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = gsi::arg_reader<const QString & >() (args, heap);
  ret.write<QString > ((QString)QInputContextFactory::description (arg1));
}


// static QString QInputContextFactory::displayName(const QString &key)


static void _init_f_displayName_2025 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("key");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<QString > ();
}

static void _call_f_displayName_2025 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = gsi::arg_reader<const QString & >() (args, heap);
  ret.write<QString > ((QString)QInputContextFactory::displayName (arg1));
}


// static QStringList QInputContextFactory::keys()


static void _init_f_keys_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return<QStringList > ();
}

static void _call_f_keys_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QStringList > ((QStringList)QInputContextFactory::keys ());
}


// static QStringList QInputContextFactory::languages(const QString &key)


static void _init_f_languages_2025 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("key");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<QStringList > ();
}

static void _call_f_languages_2025 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = gsi::arg_reader<const QString & >() (args, heap);
  ret.write<QStringList > ((QStringList)QInputContextFactory::languages (arg1));
}



namespace gsi
{

static gsi::Methods methods_QInputContextFactory () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QInputContextFactory::QInputContextFactory()\nThis method creates an object of class QInputContextFactory.", &_init_ctor_QInputContextFactory_0, &_call_ctor_QInputContextFactory_0);
  methods += new qt_gsi::GenericStaticMethod ("qt_create", "@brief Static method QInputContext *QInputContextFactory::create(const QString &key, QObject *parent)\nThis method is static and can be called without an instance.", &_init_f_create_3219, &_call_f_create_3219);
  methods += new qt_gsi::GenericStaticMethod ("description", "@brief Static method QString QInputContextFactory::description(const QString &key)\nThis method is static and can be called without an instance.", &_init_f_description_2025, &_call_f_description_2025);
  methods += new qt_gsi::GenericStaticMethod ("displayName", "@brief Static method QString QInputContextFactory::displayName(const QString &key)\nThis method is static and can be called without an instance.", &_init_f_displayName_2025, &_call_f_displayName_2025);
  methods += new qt_gsi::GenericStaticMethod ("keys", "@brief Static method QStringList QInputContextFactory::keys()\nThis method is static and can be called without an instance.", &_init_f_keys_0, &_call_f_keys_0);
  methods += new qt_gsi::GenericStaticMethod ("languages", "@brief Static method QStringList QInputContextFactory::languages(const QString &key)\nThis method is static and can be called without an instance.", &_init_f_languages_2025, &_call_f_languages_2025);
  return methods;
}

gsi::Class<QInputContextFactory> decl_QInputContextFactory ("QtGui", "QInputContextFactory",
  methods_QInputContextFactory (),
  "@qt\n@brief Binding of QInputContextFactory");


GSI_QTGUI_PUBLIC gsi::Class<QInputContextFactory> &qtdecl_QInputContextFactory () { return decl_QInputContextFactory; }

}

