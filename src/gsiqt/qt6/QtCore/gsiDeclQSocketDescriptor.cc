
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2023 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQSocketDescriptor.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QSocketDescriptor>
#include "gsiQt.h"
#include "gsiQtCoreCommon.h"
#include <memory>

// -----------------------------------------------------------------------
// class QSocketDescriptor

//  Constructor QSocketDescriptor::QSocketDescriptor(QSocketDescriptor::DescriptorType descriptor)


static void _init_ctor_QSocketDescriptor_3778 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("descriptor", true, "QSocketDescriptor::DescriptorType(-1)");
  decl->add_arg<QSocketDescriptor::DescriptorType > (argspec_0);
  decl->set_return_new<QSocketDescriptor> ();
}

static void _call_ctor_QSocketDescriptor_3778 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QSocketDescriptor::DescriptorType arg1 = args ? gsi::arg_reader<QSocketDescriptor::DescriptorType >() (args, heap) : gsi::arg_maker<QSocketDescriptor::DescriptorType >() (QSocketDescriptor::DescriptorType(-1), heap);
  ret.write<QSocketDescriptor *> (new QSocketDescriptor (arg1));
}


// bool QSocketDescriptor::isValid()


static void _init_f_isValid_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isValid_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QSocketDescriptor *)cls)->isValid ());
}



namespace gsi
{

static gsi::Methods methods_QSocketDescriptor () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QSocketDescriptor::QSocketDescriptor(QSocketDescriptor::DescriptorType descriptor)\nThis method creates an object of class QSocketDescriptor.", &_init_ctor_QSocketDescriptor_3778, &_call_ctor_QSocketDescriptor_3778);
  methods += new qt_gsi::GenericMethod ("isValid?", "@brief Method bool QSocketDescriptor::isValid()\n", true, &_init_f_isValid_c0, &_call_f_isValid_c0);
  return methods;
}

gsi::Class<QSocketDescriptor> decl_QSocketDescriptor ("QtCore", "QSocketDescriptor",
  methods_QSocketDescriptor (),
  "@qt\n@brief Binding of QSocketDescriptor");


GSI_QTCORE_PUBLIC gsi::Class<QSocketDescriptor> &qtdecl_QSocketDescriptor () { return decl_QSocketDescriptor; }

}

