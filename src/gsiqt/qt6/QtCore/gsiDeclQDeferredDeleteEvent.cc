
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2023 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQDeferredDeleteEvent.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QDeferredDeleteEvent>
#include "gsiQt.h"
#include "gsiQtCoreCommon.h"
#include <memory>

// -----------------------------------------------------------------------
// class QDeferredDeleteEvent

// QDeferredDeleteEvent *QDeferredDeleteEvent::clone()


static void _init_f_clone_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QDeferredDeleteEvent * > ();
}

static void _call_f_clone_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QDeferredDeleteEvent * > ((QDeferredDeleteEvent *)((QDeferredDeleteEvent *)cls)->clone ());
}


// int QDeferredDeleteEvent::loopLevel()


static void _init_f_loopLevel_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_f_loopLevel_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<int > ((int)((QDeferredDeleteEvent *)cls)->loopLevel ());
}


namespace gsi
{

static gsi::Methods methods_QDeferredDeleteEvent () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericMethod ("clone", "@brief Method QDeferredDeleteEvent *QDeferredDeleteEvent::clone()\nThis is a reimplementation of QEvent::clone", true, &_init_f_clone_c0, &_call_f_clone_c0);
  methods += new qt_gsi::GenericMethod ("loopLevel", "@brief Method int QDeferredDeleteEvent::loopLevel()\n", true, &_init_f_loopLevel_c0, &_call_f_loopLevel_c0);
  return methods;
}

gsi::Class<QEvent> &qtdecl_QEvent ();

gsi::Class<QDeferredDeleteEvent> decl_QDeferredDeleteEvent (qtdecl_QEvent (), "QtCore", "QDeferredDeleteEvent_Native",
  methods_QDeferredDeleteEvent (),
  "@hide\n@alias QDeferredDeleteEvent");

GSI_QTCORE_PUBLIC gsi::Class<QDeferredDeleteEvent> &qtdecl_QDeferredDeleteEvent () { return decl_QDeferredDeleteEvent; }

}


class QDeferredDeleteEvent_Adaptor : public QDeferredDeleteEvent, public qt_gsi::QtObjectBase
{
public:

  virtual ~QDeferredDeleteEvent_Adaptor();

  //  [adaptor ctor] QDeferredDeleteEvent::QDeferredDeleteEvent()
  QDeferredDeleteEvent_Adaptor() : QDeferredDeleteEvent()
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  [adaptor impl] QDeferredDeleteEvent *QDeferredDeleteEvent::clone()
  QDeferredDeleteEvent * cbs_clone_c0_0() const
  {
    return QDeferredDeleteEvent::clone();
  }

  virtual QDeferredDeleteEvent * clone() const
  {
    if (cb_clone_c0_0.can_issue()) {
      return cb_clone_c0_0.issue<QDeferredDeleteEvent_Adaptor, QDeferredDeleteEvent *>(&QDeferredDeleteEvent_Adaptor::cbs_clone_c0_0);
    } else {
      return QDeferredDeleteEvent::clone();
    }
  }

  //  [adaptor impl] void QDeferredDeleteEvent::setAccepted(bool accepted)
  void cbs_setAccepted_864_0(bool accepted)
  {
    QDeferredDeleteEvent::setAccepted(accepted);
  }

  virtual void setAccepted(bool accepted)
  {
    if (cb_setAccepted_864_0.can_issue()) {
      cb_setAccepted_864_0.issue<QDeferredDeleteEvent_Adaptor, bool>(&QDeferredDeleteEvent_Adaptor::cbs_setAccepted_864_0, accepted);
    } else {
      QDeferredDeleteEvent::setAccepted(accepted);
    }
  }

  gsi::Callback cb_clone_c0_0;
  gsi::Callback cb_setAccepted_864_0;
};

QDeferredDeleteEvent_Adaptor::~QDeferredDeleteEvent_Adaptor() { }

//  Constructor QDeferredDeleteEvent::QDeferredDeleteEvent() (adaptor class)

static void _init_ctor_QDeferredDeleteEvent_Adaptor_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QDeferredDeleteEvent_Adaptor> ();
}

static void _call_ctor_QDeferredDeleteEvent_Adaptor_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QDeferredDeleteEvent_Adaptor *> (new QDeferredDeleteEvent_Adaptor ());
}


// QDeferredDeleteEvent *QDeferredDeleteEvent::clone()

static void _init_cbs_clone_c0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QDeferredDeleteEvent * > ();
}

static void _call_cbs_clone_c0_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QDeferredDeleteEvent * > ((QDeferredDeleteEvent *)((QDeferredDeleteEvent_Adaptor *)cls)->cbs_clone_c0_0 ());
}

static void _set_callback_cbs_clone_c0_0 (void *cls, const gsi::Callback &cb)
{
  ((QDeferredDeleteEvent_Adaptor *)cls)->cb_clone_c0_0 = cb;
}


// void QDeferredDeleteEvent::setAccepted(bool accepted)

static void _init_cbs_setAccepted_864_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("accepted");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_setAccepted_864_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  bool arg1 = args.read<bool > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QDeferredDeleteEvent_Adaptor *)cls)->cbs_setAccepted_864_0 (arg1);
}

static void _set_callback_cbs_setAccepted_864_0 (void *cls, const gsi::Callback &cb)
{
  ((QDeferredDeleteEvent_Adaptor *)cls)->cb_setAccepted_864_0 = cb;
}


namespace gsi
{

gsi::Class<QDeferredDeleteEvent> &qtdecl_QDeferredDeleteEvent ();

static gsi::Methods methods_QDeferredDeleteEvent_Adaptor () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QDeferredDeleteEvent::QDeferredDeleteEvent()\nThis method creates an object of class QDeferredDeleteEvent.", &_init_ctor_QDeferredDeleteEvent_Adaptor_0, &_call_ctor_QDeferredDeleteEvent_Adaptor_0);
  methods += new qt_gsi::GenericMethod ("clone", "@brief Virtual method QDeferredDeleteEvent *QDeferredDeleteEvent::clone()\nThis method can be reimplemented in a derived class.", true, &_init_cbs_clone_c0_0, &_call_cbs_clone_c0_0);
  methods += new qt_gsi::GenericMethod ("clone", "@hide", true, &_init_cbs_clone_c0_0, &_call_cbs_clone_c0_0, &_set_callback_cbs_clone_c0_0);
  methods += new qt_gsi::GenericMethod ("setAccepted", "@brief Virtual method void QDeferredDeleteEvent::setAccepted(bool accepted)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_setAccepted_864_0, &_call_cbs_setAccepted_864_0);
  methods += new qt_gsi::GenericMethod ("setAccepted", "@hide", false, &_init_cbs_setAccepted_864_0, &_call_cbs_setAccepted_864_0, &_set_callback_cbs_setAccepted_864_0);
  return methods;
}

gsi::Class<QDeferredDeleteEvent_Adaptor> decl_QDeferredDeleteEvent_Adaptor (qtdecl_QDeferredDeleteEvent (), "QtCore", "QDeferredDeleteEvent",
  methods_QDeferredDeleteEvent_Adaptor (),
  "@qt\n@brief Binding of QDeferredDeleteEvent");

}

