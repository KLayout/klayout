<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>A plugin sample\nThis sample provides a box drawing feature and demonstrates UI components and snapping</description>
 <format>general</format>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <show-in-menu>false</show-in-menu>
 <shortcut></shortcut>
 <interpreter>python</interpreter>
 <text># Sample plugin
#
# This plugin implements a box that can be drawn by
# clicking at the first and then at the second point.
# There is one box which is replacing the previous one.
# Line color and line width of the box can be configured
# by editor options (line width) or configuration pages
# (color).

# Register this macro as "autorun" to enable the plugin

cfg_color = "drag-box-color"
cfg_width = "drag-box-width"

# The widget placed into the editor options dock

class DragBoxEditorOptionsPage(pya.EditorOptionsPage):
  
  def __init__(self):
  
    # Creates a new page with title "Options" and at
    # position 1 (second from left)
    super(DragBoxEditorOptionsPage, self).__init__("Options", 1)
    
    layout2 = pya.QVBoxLayout(self)
    layout = pya.QHBoxLayout(self)
    layout2.addLayout(layout)
    label = pya.QLabel("Line width", self)
    layout.addWidget(label)
    self.spin_box = pya.QSpinBox(self)
    self.spin_box.setMinimum(1)
    self.spin_box.setMaximum(16)
    layout.addWidget(self.spin_box)
    layout.addStretch(1)
    layout2.addStretch(1)
    
    self.spin_box.valueChanged = lambda x: self.edited()
  
  def setup(self, dispatcher):
    try:
      self.spin_box.setValue(int(dispatcher.get_config(cfg_width)))
    except:
      self.spin_box.setValue(1)
    
  def apply(self, dispatcher):
    dispatcher.set_config(cfg_width, str(self.spin_box.value))

# The widget placed into the configuration page

class DragBoxConfigPage(pya.ConfigPage):
  
  def __init__(self):

    # places the widget on a new section ("Drag Box")
    # and "Configure" page
    super(DragBoxConfigPage, self).__init__("Drag Box|Configure")
    
    layout = pya.QHBoxLayout(self)
    label = pya.QLabel("Color (hex, rrggbb)", self)
    layout.addWidget(label)
    self.line_edit = pya.QLineEdit(self)
    layout.addWidget(self.line_edit)
    layout.addStretch(1)
  
  def setup(self, dispatcher):
    self.line_edit.setText(dispatcher.get_config(cfg_color))
    
  def apply(self, dispatcher):
    dispatcher.set_config(cfg_color, self.line_edit.text)

class DragBoxPlugin(pya.Plugin):

  def __init__(self, view):
    super(DragBoxPlugin, self).__init__()
    self.marker = None
    self.last_box = None
    self.box = None
    self.start_point = None
    self.view = view
    self.color = None
    self.width = 1

  def configure(self, name, value):
    # receives configuration callbacks
    needs_update = False
    if name == cfg_color:
      # configure marker color
      try:
        if value != "":
          self.color = int(value, 16)
        else:
          self.color = None
      except:
        self.color = None
      self._configure_marker()
    elif name == cfg_width:
      # configure marker line width
      try:
        self.width = int(value)
      except:
        self.width = None
      self._configure_marker()
    
  def _clear_marker(self):
    # clears all markers
    for marker in [ self.marker, self.last_box ]:
      if marker is not None:
        marker._destroy()
    self.marker = None
    self.last_box = None
      
  def _update_marker(self):
    # updates the marker with the current box
    if self.marker is None:
      self.marker = pya.Marker(self.view)
      self._configure_marker()
    self.marker.set(self.box)
    
  def freeze_marker(self):
    # stop dragging the marker and copy to a static one
    if self.last_box is not None:
      self.last_box._destroy()
    self.last_box = self.marker
    self.marker = None
    
  def _configure_marker(self):
    # change the marker's appearance
    if self.marker is not None:
      self.marker.line_style = 2   # short-dashed
      self.marker.vertex_size = 0  # no vertexes
      self.marker.line_width = self.width
      if self.color is not None:
        self.marker.color = self.color | 0xff000000
      else:
        self.marker.color = 0  # auto
    
  def activated(self):
    # plugin is activated - i.e. the mode is selected
    pya.MainWindow.instance().message("Click on point to start dragging a box", 10000)

  def deactivated(self):
    # plugin is deactivated - i.e. the mode is unselected
    self._clear_marker()
    pya.MainWindow.instance().message("", 0)
    
  def mouse_click_event(self, p, buttons, prio):
    if prio:
      # first-level event: start a new box or 
      # stop dragging it and freeze the box
      if self.marker is None:
        p = self.snap2(p)
        self.box = pya.DBox(p, p)
        self.start_point = p
        self._clear_marker()
        self._update_marker()
        self.grab_mouse()
        pya.MainWindow.instance().message("Drag the box and click again", 10000)
      else:
        p = self.snap2(p, self.start_point, True, self.ac_from_buttons(buttons))
        self.freeze_marker()
        self.ungrab_mouse()
        pya.MainWindow.instance().message("Box finished: " + str(self.box), 10000)
      return True
    return False
    
  def mouse_moved_event(self, p, buttons, prio):
    if prio:
      # first-level event: if not dragging, provide a 
      # mouse cursor for tracking. If dragging, update
      # the box and provide a mouse cursor.
      if self.marker is None:
        self.clear_mouse_cursors()
        p = self.snap2(p, visualize=True)
        self.add_mouse_cursor(p)
      else:
        self.clear_mouse_cursors()
        p = self.snap2(p, self.start_point, True, self.ac_from_buttons(buttons), visualize=True)
        self.add_mouse_cursor(p)
        self.box = pya.DBox(self.start_point, p)
        self._update_marker()
      # NOTE: we must not digest this event (i.e. return True)
      # to allow the mouse tracker to receive the events as well
    return False


# Implements a "plugin factory". 
# Purpose of this object is to create a plugin object
# and corresponding UI objects.

class DragBoxPluginFactory(pya.PluginFactory):

  def __init__(self):
    super(DragBoxPluginFactory, self).__init__()
    self.has_tool_entry = True
    # NOTE: it's a good practice to register configuration options
    self.add_option(cfg_width, "1")
    self.add_option(cfg_color, "")
    self.register(-1000, "drag_box", "Drag Box")
    
  def create_config_pages(self):
    self.add_config_page(DragBoxConfigPage())
    
  def create_editor_options_pages(self):
    self.add_editor_options_page(DragBoxEditorOptionsPage())
    
  def create_plugin(self, manager, root, view):
    return DragBoxPlugin(view)
  
# Create the singleton instance - as we register it,
# it is not garbage collected
DragBoxPluginFactory()
</text>
</klayout-macro>
