
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2022 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQCalendar_SystemId.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QCalendar>
#include "gsiQt.h"
#include "gsiQtCoreCommon.h"
#include <memory>

// -----------------------------------------------------------------------
// class QCalendar::SystemId

//  Constructor QCalendar::SystemId::SystemId()


static void _init_ctor_QCalendar_SystemId_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QCalendar::SystemId> ();
}

static void _call_ctor_QCalendar_SystemId_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QCalendar::SystemId *> (new QCalendar::SystemId ());
}


// unsigned long int QCalendar::SystemId::index()


static void _init_f_index_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<unsigned long int > ();
}

static void _call_f_index_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<unsigned long int > ((unsigned long int)((QCalendar::SystemId *)cls)->index ());
}


// bool QCalendar::SystemId::isValid()


static void _init_f_isValid_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isValid_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QCalendar::SystemId *)cls)->isValid ());
}



namespace gsi
{

static gsi::Methods methods_QCalendar_SystemId () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QCalendar::SystemId::SystemId()\nThis method creates an object of class QCalendar::SystemId.", &_init_ctor_QCalendar_SystemId_0, &_call_ctor_QCalendar_SystemId_0);
  methods += new qt_gsi::GenericMethod ("index", "@brief Method unsigned long int QCalendar::SystemId::index()\n", true, &_init_f_index_c0, &_call_f_index_c0);
  methods += new qt_gsi::GenericMethod ("isValid?", "@brief Method bool QCalendar::SystemId::isValid()\n", true, &_init_f_isValid_c0, &_call_f_isValid_c0);
  return methods;
}

gsi::Class<QCalendar::SystemId> decl_QCalendar_SystemId ("QtCore", "QCalendar_SystemId",
  methods_QCalendar_SystemId (),
  "@qt\n@brief Binding of QCalendar::SystemId");

gsi::ClassExt<QCalendar> decl_QCalendar_SystemId_as_child (decl_QCalendar_SystemId, "SystemId");

GSI_QTCORE_PUBLIC gsi::Class<QCalendar::SystemId> &qtdecl_QCalendar_SystemId () { return decl_QCalendar_SystemId; }

}

