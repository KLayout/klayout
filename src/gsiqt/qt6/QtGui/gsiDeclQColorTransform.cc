
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2023 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQColorTransform.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QColorTransform>
#include <QColor>
#include <QRgba64>
#include "gsiQt.h"
#include "gsiQtGuiCommon.h"
#include <memory>

// -----------------------------------------------------------------------
// class QColorTransform

//  Constructor QColorTransform::QColorTransform()


static void _init_ctor_QColorTransform_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QColorTransform> ();
}

static void _call_ctor_QColorTransform_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QColorTransform *> (new QColorTransform ());
}


//  Constructor QColorTransform::QColorTransform(const QColorTransform &colorTransform)


static void _init_ctor_QColorTransform_2861 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("colorTransform");
  decl->add_arg<const QColorTransform & > (argspec_0);
  decl->set_return_new<QColorTransform> ();
}

static void _call_ctor_QColorTransform_2861 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QColorTransform &arg1 = gsi::arg_reader<const QColorTransform & >() (args, heap);
  ret.write<QColorTransform *> (new QColorTransform (arg1));
}


// unsigned int QColorTransform::map(unsigned int argb)


static void _init_f_map_c1772 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("argb");
  decl->add_arg<unsigned int > (argspec_0);
  decl->set_return<unsigned int > ();
}

static void _call_f_map_c1772 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  unsigned int arg1 = gsi::arg_reader<unsigned int >() (args, heap);
  ret.write<unsigned int > ((unsigned int)((QColorTransform *)cls)->map (arg1));
}


// QRgba64 QColorTransform::map(QRgba64 rgba64)


static void _init_f_map_c1003 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("rgba64");
  decl->add_arg<QRgba64 > (argspec_0);
  decl->set_return<QRgba64 > ();
}

static void _call_f_map_c1003 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QRgba64 arg1 = gsi::arg_reader<QRgba64 >() (args, heap);
  ret.write<QRgba64 > ((QRgba64)((QColorTransform *)cls)->map (arg1));
}


// QColor QColorTransform::map(const QColor &color)


static void _init_f_map_c1905 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("color");
  decl->add_arg<const QColor & > (argspec_0);
  decl->set_return<QColor > ();
}

static void _call_f_map_c1905 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QColor &arg1 = gsi::arg_reader<const QColor & >() (args, heap);
  ret.write<QColor > ((QColor)((QColorTransform *)cls)->map (arg1));
}


// QColorTransform &QColorTransform::operator=(const QColorTransform &other)


static void _init_f_operator_eq__2861 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QColorTransform & > (argspec_0);
  decl->set_return<QColorTransform & > ();
}

static void _call_f_operator_eq__2861 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QColorTransform &arg1 = gsi::arg_reader<const QColorTransform & >() (args, heap);
  ret.write<QColorTransform & > ((QColorTransform &)((QColorTransform *)cls)->operator= (arg1));
}


// void QColorTransform::swap(QColorTransform &other)


static void _init_f_swap_2166 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<QColorTransform & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_swap_2166 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QColorTransform &arg1 = gsi::arg_reader<QColorTransform & >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QColorTransform *)cls)->swap (arg1);
}



namespace gsi
{

static gsi::Methods methods_QColorTransform () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QColorTransform::QColorTransform()\nThis method creates an object of class QColorTransform.", &_init_ctor_QColorTransform_0, &_call_ctor_QColorTransform_0);
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QColorTransform::QColorTransform(const QColorTransform &colorTransform)\nThis method creates an object of class QColorTransform.", &_init_ctor_QColorTransform_2861, &_call_ctor_QColorTransform_2861);
  methods += new qt_gsi::GenericMethod ("map", "@brief Method unsigned int QColorTransform::map(unsigned int argb)\n", true, &_init_f_map_c1772, &_call_f_map_c1772);
  methods += new qt_gsi::GenericMethod ("map", "@brief Method QRgba64 QColorTransform::map(QRgba64 rgba64)\n", true, &_init_f_map_c1003, &_call_f_map_c1003);
  methods += new qt_gsi::GenericMethod ("map", "@brief Method QColor QColorTransform::map(const QColor &color)\n", true, &_init_f_map_c1905, &_call_f_map_c1905);
  methods += new qt_gsi::GenericMethod ("assign", "@brief Method QColorTransform &QColorTransform::operator=(const QColorTransform &other)\n", false, &_init_f_operator_eq__2861, &_call_f_operator_eq__2861);
  methods += new qt_gsi::GenericMethod ("swap", "@brief Method void QColorTransform::swap(QColorTransform &other)\n", false, &_init_f_swap_2166, &_call_f_swap_2166);
  return methods;
}

gsi::Class<QColorTransform> decl_QColorTransform ("QtGui", "QColorTransform",
  methods_QColorTransform (),
  "@qt\n@brief Binding of QColorTransform");


GSI_QTGUI_PUBLIC gsi::Class<QColorTransform> &qtdecl_QColorTransform () { return decl_QColorTransform; }

}

