
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2023 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQRecursiveMutex.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QRecursiveMutex>
#include "gsiQt.h"
#include "gsiQtCoreCommon.h"
#include <memory>

// -----------------------------------------------------------------------
// class QRecursiveMutex

//  Constructor QRecursiveMutex::QRecursiveMutex()


static void _init_ctor_QRecursiveMutex_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QRecursiveMutex> ();
}

static void _call_ctor_QRecursiveMutex_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QRecursiveMutex *> (new QRecursiveMutex ());
}


// void QRecursiveMutex::lock()


static void _init_f_lock_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_f_lock_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QRecursiveMutex *)cls)->lock ();
}


// bool QRecursiveMutex::tryLock(int timeout)


static void _init_f_tryLock_767 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("timeout", true, "0");
  decl->add_arg<int > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_tryLock_767 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  int arg1 = args ? gsi::arg_reader<int >() (args, heap) : gsi::arg_maker<int >() (0, heap);
  ret.write<bool > ((bool)((QRecursiveMutex *)cls)->tryLock (arg1));
}


// bool QRecursiveMutex::try_lock()


static void _init_f_try_lock_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_try_lock_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QRecursiveMutex *)cls)->try_lock ());
}


// void QRecursiveMutex::unlock()


static void _init_f_unlock_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_f_unlock_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QRecursiveMutex *)cls)->unlock ();
}



namespace gsi
{

static gsi::Methods methods_QRecursiveMutex () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QRecursiveMutex::QRecursiveMutex()\nThis method creates an object of class QRecursiveMutex.", &_init_ctor_QRecursiveMutex_0, &_call_ctor_QRecursiveMutex_0);
  methods += new qt_gsi::GenericMethod ("lock", "@brief Method void QRecursiveMutex::lock()\n", false, &_init_f_lock_0, &_call_f_lock_0);
  methods += new qt_gsi::GenericMethod ("tryLock", "@brief Method bool QRecursiveMutex::tryLock(int timeout)\n", false, &_init_f_tryLock_767, &_call_f_tryLock_767);
  methods += new qt_gsi::GenericMethod ("try_lock", "@brief Method bool QRecursiveMutex::try_lock()\n", false, &_init_f_try_lock_0, &_call_f_try_lock_0);
  methods += new qt_gsi::GenericMethod ("unlock", "@brief Method void QRecursiveMutex::unlock()\n", false, &_init_f_unlock_0, &_call_f_unlock_0);
  return methods;
}

gsi::Class<QRecursiveMutex> decl_QRecursiveMutex ("QtCore", "QRecursiveMutex",
  methods_QRecursiveMutex (),
  "@qt\n@brief Binding of QRecursiveMutex");


GSI_QTCORE_PUBLIC gsi::Class<QRecursiveMutex> &qtdecl_QRecursiveMutex () { return decl_QRecursiveMutex; }

}

