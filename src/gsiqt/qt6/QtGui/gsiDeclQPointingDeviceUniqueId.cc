
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2023 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQPointingDeviceUniqueId.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QPointingDeviceUniqueId>
#include "gsiQt.h"
#include "gsiQtGuiCommon.h"
#include <memory>

// -----------------------------------------------------------------------
// class QPointingDeviceUniqueId

//  Constructor QPointingDeviceUniqueId::QPointingDeviceUniqueId()


static void _init_ctor_QPointingDeviceUniqueId_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QPointingDeviceUniqueId> ();
}

static void _call_ctor_QPointingDeviceUniqueId_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QPointingDeviceUniqueId *> (new QPointingDeviceUniqueId ());
}


// bool QPointingDeviceUniqueId::isValid()


static void _init_f_isValid_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isValid_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QPointingDeviceUniqueId *)cls)->isValid ());
}


// qint64 QPointingDeviceUniqueId::numericId()


static void _init_f_numericId_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qint64 > ();
}

static void _call_f_numericId_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qint64 > ((qint64)((QPointingDeviceUniqueId *)cls)->numericId ());
}


// static QPointingDeviceUniqueId QPointingDeviceUniqueId::fromNumericId(qint64 id)


static void _init_f_fromNumericId_986 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("id");
  decl->add_arg<qint64 > (argspec_0);
  decl->set_return<QPointingDeviceUniqueId > ();
}

static void _call_f_fromNumericId_986 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  qint64 arg1 = gsi::arg_reader<qint64 >() (args, heap);
  ret.write<QPointingDeviceUniqueId > ((QPointingDeviceUniqueId)QPointingDeviceUniqueId::fromNumericId (arg1));
}



namespace gsi
{

static gsi::Methods methods_QPointingDeviceUniqueId () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QPointingDeviceUniqueId::QPointingDeviceUniqueId()\nThis method creates an object of class QPointingDeviceUniqueId.", &_init_ctor_QPointingDeviceUniqueId_0, &_call_ctor_QPointingDeviceUniqueId_0);
  methods += new qt_gsi::GenericMethod ("isValid?", "@brief Method bool QPointingDeviceUniqueId::isValid()\n", true, &_init_f_isValid_c0, &_call_f_isValid_c0);
  methods += new qt_gsi::GenericMethod ("numericId", "@brief Method qint64 QPointingDeviceUniqueId::numericId()\n", true, &_init_f_numericId_c0, &_call_f_numericId_c0);
  methods += new qt_gsi::GenericStaticMethod ("fromNumericId", "@brief Static method QPointingDeviceUniqueId QPointingDeviceUniqueId::fromNumericId(qint64 id)\nThis method is static and can be called without an instance.", &_init_f_fromNumericId_986, &_call_f_fromNumericId_986);
  return methods;
}

gsi::Class<QPointingDeviceUniqueId> decl_QPointingDeviceUniqueId ("QtGui", "QPointingDeviceUniqueId",
  methods_QPointingDeviceUniqueId (),
  "@qt\n@brief Binding of QPointingDeviceUniqueId");


GSI_QTGUI_PUBLIC gsi::Class<QPointingDeviceUniqueId> &qtdecl_QPointingDeviceUniqueId () { return decl_QPointingDeviceUniqueId; }

}

