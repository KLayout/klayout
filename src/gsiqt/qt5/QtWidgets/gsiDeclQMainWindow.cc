
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2019 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQMainWindow.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QMainWindow>
#include <QAction>
#include <QActionEvent>
#include <QBackingStore>
#include <QBitmap>
#include <QChildEvent>
#include <QCloseEvent>
#include <QContextMenuEvent>
#include <QCursor>
#include <QDockWidget>
#include <QDragEnterEvent>
#include <QDragLeaveEvent>
#include <QDragMoveEvent>
#include <QDropEvent>
#include <QEvent>
#include <QFocusEvent>
#include <QFont>
#include <QFontInfo>
#include <QFontMetrics>
#include <QGraphicsEffect>
#include <QGraphicsProxyWidget>
#include <QHideEvent>
#include <QIcon>
#include <QInputMethodEvent>
#include <QKeyEvent>
#include <QKeySequence>
#include <QLayout>
#include <QLocale>
#include <QMargins>
#include <QMenu>
#include <QMenuBar>
#include <QMetaMethod>
#include <QMouseEvent>
#include <QMoveEvent>
#include <QObject>
#include <QPaintDevice>
#include <QPaintEngine>
#include <QPaintEvent>
#include <QPainter>
#include <QPalette>
#include <QPixmap>
#include <QPoint>
#include <QRect>
#include <QRegion>
#include <QResizeEvent>
#include <QShowEvent>
#include <QSize>
#include <QSizePolicy>
#include <QStatusBar>
#include <QStyle>
#include <QTabletEvent>
#include <QThread>
#include <QTimerEvent>
#include <QToolBar>
#include <QWheelEvent>
#include <QWidget>
#include <QWindow>
#include "gsiQt.h"
#include "gsiQtWidgetsCommon.h"
#include "gsiDeclQtWidgetsTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// class QMainWindow

//  get static meta object

static void _init_smo (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return<const QMetaObject &> ();
}

static void _call_smo (const qt_gsi::GenericStaticMethod *, gsi::SerialArgs &, gsi::SerialArgs &ret) 
{
  ret.write<const QMetaObject &> (QMainWindow::staticMetaObject);
}


// void QMainWindow::addDockWidget(Qt::DockWidgetArea area, QDockWidget *dockwidget)


static void _init_f_addDockWidget_3715 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("area");
  decl->add_arg<const qt_gsi::Converter<Qt::DockWidgetArea>::target_type & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("dockwidget");
  decl->add_arg<QDockWidget * > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_addDockWidget_3715 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<Qt::DockWidgetArea>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<Qt::DockWidgetArea>::target_type & >() (args, heap);
  QDockWidget *arg2 = gsi::arg_reader<QDockWidget * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow *)cls)->addDockWidget (qt_gsi::QtToCppAdaptor<Qt::DockWidgetArea>(arg1).cref(), arg2);
}


// void QMainWindow::addDockWidget(Qt::DockWidgetArea area, QDockWidget *dockwidget, Qt::Orientation orientation)


static void _init_f_addDockWidget_5520 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("area");
  decl->add_arg<const qt_gsi::Converter<Qt::DockWidgetArea>::target_type & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("dockwidget");
  decl->add_arg<QDockWidget * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("orientation");
  decl->add_arg<const qt_gsi::Converter<Qt::Orientation>::target_type & > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_addDockWidget_5520 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<Qt::DockWidgetArea>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<Qt::DockWidgetArea>::target_type & >() (args, heap);
  QDockWidget *arg2 = gsi::arg_reader<QDockWidget * >() (args, heap);
  const qt_gsi::Converter<Qt::Orientation>::target_type & arg3 = gsi::arg_reader<const qt_gsi::Converter<Qt::Orientation>::target_type & >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow *)cls)->addDockWidget (qt_gsi::QtToCppAdaptor<Qt::DockWidgetArea>(arg1).cref(), arg2, qt_gsi::QtToCppAdaptor<Qt::Orientation>(arg3).cref());
}


// void QMainWindow::addToolBar(Qt::ToolBarArea area, QToolBar *toolbar)


static void _init_f_addToolBar_3103 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("area");
  decl->add_arg<const qt_gsi::Converter<Qt::ToolBarArea>::target_type & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("toolbar");
  decl->add_arg<QToolBar * > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_addToolBar_3103 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<Qt::ToolBarArea>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<Qt::ToolBarArea>::target_type & >() (args, heap);
  QToolBar *arg2 = gsi::arg_reader<QToolBar * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow *)cls)->addToolBar (qt_gsi::QtToCppAdaptor<Qt::ToolBarArea>(arg1).cref(), arg2);
}


// void QMainWindow::addToolBar(QToolBar *toolbar)


static void _init_f_addToolBar_1394 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("toolbar");
  decl->add_arg<QToolBar * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_addToolBar_1394 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QToolBar *arg1 = gsi::arg_reader<QToolBar * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow *)cls)->addToolBar (arg1);
}


// QToolBar *QMainWindow::addToolBar(const QString &title)


static void _init_f_addToolBar_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("title");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<QToolBar * > ();
}

static void _call_f_addToolBar_2025 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = gsi::arg_reader<const QString & >() (args, heap);
  ret.write<QToolBar * > ((QToolBar *)((QMainWindow *)cls)->addToolBar (arg1));
}


// void QMainWindow::addToolBarBreak(Qt::ToolBarArea area)


static void _init_f_addToolBarBreak_1817 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("area", true, "Qt::TopToolBarArea");
  decl->add_arg<const qt_gsi::Converter<Qt::ToolBarArea>::target_type & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_addToolBarBreak_1817 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<Qt::ToolBarArea>::target_type & arg1 = args ? gsi::arg_reader<const qt_gsi::Converter<Qt::ToolBarArea>::target_type & >() (args, heap) : gsi::arg_maker<const qt_gsi::Converter<Qt::ToolBarArea>::target_type & >() (qt_gsi::CppToQtReadAdaptor<Qt::ToolBarArea>(heap, Qt::TopToolBarArea), heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow *)cls)->addToolBarBreak (qt_gsi::QtToCppAdaptor<Qt::ToolBarArea>(arg1).cref());
}


// QWidget *QMainWindow::centralWidget()


static void _init_f_centralWidget_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QWidget * > ();
}

static void _call_f_centralWidget_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QWidget * > ((QWidget *)((QMainWindow *)cls)->centralWidget ());
}


// Qt::DockWidgetArea QMainWindow::corner(Qt::Corner corner)


static void _init_f_corner_c1366 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("corner");
  decl->add_arg<const qt_gsi::Converter<Qt::Corner>::target_type & > (argspec_0);
  decl->set_return<qt_gsi::Converter<Qt::DockWidgetArea>::target_type > ();
}

static void _call_f_corner_c1366 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<Qt::Corner>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<Qt::Corner>::target_type & >() (args, heap);
  ret.write<qt_gsi::Converter<Qt::DockWidgetArea>::target_type > ((qt_gsi::Converter<Qt::DockWidgetArea>::target_type)qt_gsi::CppToQtAdaptor<Qt::DockWidgetArea>(((QMainWindow *)cls)->corner (qt_gsi::QtToCppAdaptor<Qt::Corner>(arg1).cref())));
}


// QMenu *QMainWindow::createPopupMenu()


static void _init_f_createPopupMenu_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QMenu * > ();
}

static void _call_f_createPopupMenu_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QMenu * > ((QMenu *)((QMainWindow *)cls)->createPopupMenu ());
}


// QFlags<QMainWindow::DockOption> QMainWindow::dockOptions()


static void _init_f_dockOptions_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QFlags<QMainWindow::DockOption> > ();
}

static void _call_f_dockOptions_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QFlags<QMainWindow::DockOption> > ((QFlags<QMainWindow::DockOption>)((QMainWindow *)cls)->dockOptions ());
}


// Qt::DockWidgetArea QMainWindow::dockWidgetArea(QDockWidget *dockwidget)


static void _init_f_dockWidgetArea_c1700 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("dockwidget");
  decl->add_arg<QDockWidget * > (argspec_0);
  decl->set_return<qt_gsi::Converter<Qt::DockWidgetArea>::target_type > ();
}

static void _call_f_dockWidgetArea_c1700 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QDockWidget *arg1 = gsi::arg_reader<QDockWidget * >() (args, heap);
  ret.write<qt_gsi::Converter<Qt::DockWidgetArea>::target_type > ((qt_gsi::Converter<Qt::DockWidgetArea>::target_type)qt_gsi::CppToQtAdaptor<Qt::DockWidgetArea>(((QMainWindow *)cls)->dockWidgetArea (arg1)));
}


// bool QMainWindow::documentMode()


static void _init_f_documentMode_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_documentMode_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QMainWindow *)cls)->documentMode ());
}


// QSize QMainWindow::iconSize()


static void _init_f_iconSize_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QSize > ();
}

static void _call_f_iconSize_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QSize > ((QSize)((QMainWindow *)cls)->iconSize ());
}


// void QMainWindow::insertToolBar(QToolBar *before, QToolBar *toolbar)


static void _init_f_insertToolBar_2680 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("before");
  decl->add_arg<QToolBar * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("toolbar");
  decl->add_arg<QToolBar * > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_insertToolBar_2680 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QToolBar *arg1 = gsi::arg_reader<QToolBar * >() (args, heap);
  QToolBar *arg2 = gsi::arg_reader<QToolBar * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow *)cls)->insertToolBar (arg1, arg2);
}


// void QMainWindow::insertToolBarBreak(QToolBar *before)


static void _init_f_insertToolBarBreak_1394 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("before");
  decl->add_arg<QToolBar * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_insertToolBarBreak_1394 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QToolBar *arg1 = gsi::arg_reader<QToolBar * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow *)cls)->insertToolBarBreak (arg1);
}


// bool QMainWindow::isAnimated()


static void _init_f_isAnimated_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isAnimated_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QMainWindow *)cls)->isAnimated ());
}


// bool QMainWindow::isDockNestingEnabled()


static void _init_f_isDockNestingEnabled_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isDockNestingEnabled_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QMainWindow *)cls)->isDockNestingEnabled ());
}


// bool QMainWindow::isSeparator(const QPoint &pos)


static void _init_f_isSeparator_c1916 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("pos");
  decl->add_arg<const QPoint & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_isSeparator_c1916 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QPoint &arg1 = gsi::arg_reader<const QPoint & >() (args, heap);
  ret.write<bool > ((bool)((QMainWindow *)cls)->isSeparator (arg1));
}


// QMenuBar *QMainWindow::menuBar()


static void _init_f_menuBar_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QMenuBar * > ();
}

static void _call_f_menuBar_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QMenuBar * > ((QMenuBar *)((QMainWindow *)cls)->menuBar ());
}


// QWidget *QMainWindow::menuWidget()


static void _init_f_menuWidget_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QWidget * > ();
}

static void _call_f_menuWidget_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QWidget * > ((QWidget *)((QMainWindow *)cls)->menuWidget ());
}


// void QMainWindow::removeDockWidget(QDockWidget *dockwidget)


static void _init_f_removeDockWidget_1700 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("dockwidget");
  decl->add_arg<QDockWidget * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_removeDockWidget_1700 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QDockWidget *arg1 = gsi::arg_reader<QDockWidget * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow *)cls)->removeDockWidget (arg1);
}


// void QMainWindow::removeToolBar(QToolBar *toolbar)


static void _init_f_removeToolBar_1394 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("toolbar");
  decl->add_arg<QToolBar * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_removeToolBar_1394 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QToolBar *arg1 = gsi::arg_reader<QToolBar * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow *)cls)->removeToolBar (arg1);
}


// void QMainWindow::removeToolBarBreak(QToolBar *before)


static void _init_f_removeToolBarBreak_1394 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("before");
  decl->add_arg<QToolBar * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_removeToolBarBreak_1394 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QToolBar *arg1 = gsi::arg_reader<QToolBar * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow *)cls)->removeToolBarBreak (arg1);
}


// bool QMainWindow::restoreDockWidget(QDockWidget *dockwidget)


static void _init_f_restoreDockWidget_1700 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("dockwidget");
  decl->add_arg<QDockWidget * > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_restoreDockWidget_1700 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QDockWidget *arg1 = gsi::arg_reader<QDockWidget * >() (args, heap);
  ret.write<bool > ((bool)((QMainWindow *)cls)->restoreDockWidget (arg1));
}


// bool QMainWindow::restoreState(const QByteArray &state, int version)


static void _init_f_restoreState_2968 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("state");
  decl->add_arg<const QByteArray & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("version", true, "0");
  decl->add_arg<int > (argspec_1);
  decl->set_return<bool > ();
}

static void _call_f_restoreState_2968 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QByteArray &arg1 = gsi::arg_reader<const QByteArray & >() (args, heap);
  int arg2 = args ? gsi::arg_reader<int >() (args, heap) : gsi::arg_maker<int >() (0, heap);
  ret.write<bool > ((bool)((QMainWindow *)cls)->restoreState (arg1, arg2));
}


// QByteArray QMainWindow::saveState(int version)


static void _init_f_saveState_c767 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("version", true, "0");
  decl->add_arg<int > (argspec_0);
  decl->set_return<QByteArray > ();
}

static void _call_f_saveState_c767 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  int arg1 = args ? gsi::arg_reader<int >() (args, heap) : gsi::arg_maker<int >() (0, heap);
  ret.write<QByteArray > ((QByteArray)((QMainWindow *)cls)->saveState (arg1));
}


// void QMainWindow::setAnimated(bool enabled)


static void _init_f_setAnimated_864 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("enabled");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setAnimated_864 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  bool arg1 = gsi::arg_reader<bool >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow *)cls)->setAnimated (arg1);
}


// void QMainWindow::setCentralWidget(QWidget *widget)


static void _init_f_setCentralWidget_1315 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("widget");
  decl->add_arg<QWidget * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setCentralWidget_1315 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QWidget *arg1 = gsi::arg_reader<QWidget * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow *)cls)->setCentralWidget (arg1);
}


// void QMainWindow::setCorner(Qt::Corner corner, Qt::DockWidgetArea area)


static void _init_f_setCorner_3381 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("corner");
  decl->add_arg<const qt_gsi::Converter<Qt::Corner>::target_type & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("area");
  decl->add_arg<const qt_gsi::Converter<Qt::DockWidgetArea>::target_type & > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_setCorner_3381 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<Qt::Corner>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<Qt::Corner>::target_type & >() (args, heap);
  const qt_gsi::Converter<Qt::DockWidgetArea>::target_type & arg2 = gsi::arg_reader<const qt_gsi::Converter<Qt::DockWidgetArea>::target_type & >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow *)cls)->setCorner (qt_gsi::QtToCppAdaptor<Qt::Corner>(arg1).cref(), qt_gsi::QtToCppAdaptor<Qt::DockWidgetArea>(arg2).cref());
}


// void QMainWindow::setDockNestingEnabled(bool enabled)


static void _init_f_setDockNestingEnabled_864 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("enabled");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setDockNestingEnabled_864 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  bool arg1 = gsi::arg_reader<bool >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow *)cls)->setDockNestingEnabled (arg1);
}


// void QMainWindow::setDockOptions(QFlags<QMainWindow::DockOption> options)


static void _init_f_setDockOptions_3368 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("options");
  decl->add_arg<QFlags<QMainWindow::DockOption> > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setDockOptions_3368 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QFlags<QMainWindow::DockOption> arg1 = gsi::arg_reader<QFlags<QMainWindow::DockOption> >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow *)cls)->setDockOptions (arg1);
}


// void QMainWindow::setDocumentMode(bool enabled)


static void _init_f_setDocumentMode_864 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("enabled");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setDocumentMode_864 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  bool arg1 = gsi::arg_reader<bool >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow *)cls)->setDocumentMode (arg1);
}


// void QMainWindow::setIconSize(const QSize &iconSize)


static void _init_f_setIconSize_1805 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("iconSize");
  decl->add_arg<const QSize & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setIconSize_1805 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QSize &arg1 = gsi::arg_reader<const QSize & >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow *)cls)->setIconSize (arg1);
}


// void QMainWindow::setMenuBar(QMenuBar *menubar)


static void _init_f_setMenuBar_1385 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("menubar");
  decl->add_arg<QMenuBar * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setMenuBar_1385 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QMenuBar *arg1 = gsi::arg_reader<QMenuBar * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow *)cls)->setMenuBar (arg1);
}


// void QMainWindow::setMenuWidget(QWidget *menubar)


static void _init_f_setMenuWidget_1315 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("menubar");
  decl->add_arg<QWidget * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setMenuWidget_1315 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QWidget *arg1 = gsi::arg_reader<QWidget * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow *)cls)->setMenuWidget (arg1);
}


// void QMainWindow::setStatusBar(QStatusBar *statusbar)


static void _init_f_setStatusBar_1624 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("statusbar");
  decl->add_arg<QStatusBar * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setStatusBar_1624 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QStatusBar *arg1 = gsi::arg_reader<QStatusBar * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow *)cls)->setStatusBar (arg1);
}


// void QMainWindow::setTabPosition(QFlags<Qt::DockWidgetArea> areas, QTabWidget::TabPosition tabPosition)


static void _init_f_setTabPosition_5367 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("areas");
  decl->add_arg<QFlags<Qt::DockWidgetArea> > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("tabPosition");
  decl->add_arg<const qt_gsi::Converter<QTabWidget::TabPosition>::target_type & > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_setTabPosition_5367 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QFlags<Qt::DockWidgetArea> arg1 = gsi::arg_reader<QFlags<Qt::DockWidgetArea> >() (args, heap);
  const qt_gsi::Converter<QTabWidget::TabPosition>::target_type & arg2 = gsi::arg_reader<const qt_gsi::Converter<QTabWidget::TabPosition>::target_type & >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow *)cls)->setTabPosition (arg1, qt_gsi::QtToCppAdaptor<QTabWidget::TabPosition>(arg2).cref());
}


// void QMainWindow::setTabShape(QTabWidget::TabShape tabShape)


static void _init_f_setTabShape_2300 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("tabShape");
  decl->add_arg<const qt_gsi::Converter<QTabWidget::TabShape>::target_type & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setTabShape_2300 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<QTabWidget::TabShape>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<QTabWidget::TabShape>::target_type & >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow *)cls)->setTabShape (qt_gsi::QtToCppAdaptor<QTabWidget::TabShape>(arg1).cref());
}


// void QMainWindow::setToolButtonStyle(Qt::ToolButtonStyle toolButtonStyle)


static void _init_f_setToolButtonStyle_2328 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("toolButtonStyle");
  decl->add_arg<const qt_gsi::Converter<Qt::ToolButtonStyle>::target_type & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setToolButtonStyle_2328 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<Qt::ToolButtonStyle>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<Qt::ToolButtonStyle>::target_type & >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow *)cls)->setToolButtonStyle (qt_gsi::QtToCppAdaptor<Qt::ToolButtonStyle>(arg1).cref());
}


// void QMainWindow::setUnifiedTitleAndToolBarOnMac(bool set)


static void _init_f_setUnifiedTitleAndToolBarOnMac_864 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("set");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setUnifiedTitleAndToolBarOnMac_864 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  bool arg1 = gsi::arg_reader<bool >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow *)cls)->setUnifiedTitleAndToolBarOnMac (arg1);
}


// void QMainWindow::splitDockWidget(QDockWidget *after, QDockWidget *dockwidget, Qt::Orientation orientation)


static void _init_f_splitDockWidget_5097 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("after");
  decl->add_arg<QDockWidget * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("dockwidget");
  decl->add_arg<QDockWidget * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("orientation");
  decl->add_arg<const qt_gsi::Converter<Qt::Orientation>::target_type & > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_splitDockWidget_5097 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QDockWidget *arg1 = gsi::arg_reader<QDockWidget * >() (args, heap);
  QDockWidget *arg2 = gsi::arg_reader<QDockWidget * >() (args, heap);
  const qt_gsi::Converter<Qt::Orientation>::target_type & arg3 = gsi::arg_reader<const qt_gsi::Converter<Qt::Orientation>::target_type & >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow *)cls)->splitDockWidget (arg1, arg2, qt_gsi::QtToCppAdaptor<Qt::Orientation>(arg3).cref());
}


// QStatusBar *QMainWindow::statusBar()


static void _init_f_statusBar_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QStatusBar * > ();
}

static void _call_f_statusBar_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QStatusBar * > ((QStatusBar *)((QMainWindow *)cls)->statusBar ());
}


// QTabWidget::TabPosition QMainWindow::tabPosition(Qt::DockWidgetArea area)


static void _init_f_tabPosition_c2123 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("area");
  decl->add_arg<const qt_gsi::Converter<Qt::DockWidgetArea>::target_type & > (argspec_0);
  decl->set_return<qt_gsi::Converter<QTabWidget::TabPosition>::target_type > ();
}

static void _call_f_tabPosition_c2123 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<Qt::DockWidgetArea>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<Qt::DockWidgetArea>::target_type & >() (args, heap);
  ret.write<qt_gsi::Converter<QTabWidget::TabPosition>::target_type > ((qt_gsi::Converter<QTabWidget::TabPosition>::target_type)qt_gsi::CppToQtAdaptor<QTabWidget::TabPosition>(((QMainWindow *)cls)->tabPosition (qt_gsi::QtToCppAdaptor<Qt::DockWidgetArea>(arg1).cref())));
}


// QTabWidget::TabShape QMainWindow::tabShape()


static void _init_f_tabShape_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QTabWidget::TabShape>::target_type > ();
}

static void _call_f_tabShape_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qt_gsi::Converter<QTabWidget::TabShape>::target_type > ((qt_gsi::Converter<QTabWidget::TabShape>::target_type)qt_gsi::CppToQtAdaptor<QTabWidget::TabShape>(((QMainWindow *)cls)->tabShape ()));
}


// QList<QDockWidget*> QMainWindow::tabifiedDockWidgets(QDockWidget *dockwidget)


static void _init_f_tabifiedDockWidgets_c1700 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("dockwidget");
  decl->add_arg<QDockWidget * > (argspec_0);
  decl->set_return<QList<QDockWidget*> > ();
}

static void _call_f_tabifiedDockWidgets_c1700 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QDockWidget *arg1 = gsi::arg_reader<QDockWidget * >() (args, heap);
  ret.write<QList<QDockWidget*> > ((QList<QDockWidget*>)((QMainWindow *)cls)->tabifiedDockWidgets (arg1));
}


// void QMainWindow::tabifyDockWidget(QDockWidget *first, QDockWidget *second)


static void _init_f_tabifyDockWidget_3292 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("first");
  decl->add_arg<QDockWidget * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("second");
  decl->add_arg<QDockWidget * > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_tabifyDockWidget_3292 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QDockWidget *arg1 = gsi::arg_reader<QDockWidget * >() (args, heap);
  QDockWidget *arg2 = gsi::arg_reader<QDockWidget * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow *)cls)->tabifyDockWidget (arg1, arg2);
}


// QWidget *QMainWindow::takeCentralWidget()


static void _init_f_takeCentralWidget_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QWidget * > ();
}

static void _call_f_takeCentralWidget_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QWidget * > ((QWidget *)((QMainWindow *)cls)->takeCentralWidget ());
}


// Qt::ToolBarArea QMainWindow::toolBarArea(QToolBar *toolbar)


static void _init_f_toolBarArea_c1394 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("toolbar");
  decl->add_arg<QToolBar * > (argspec_0);
  decl->set_return<qt_gsi::Converter<Qt::ToolBarArea>::target_type > ();
}

static void _call_f_toolBarArea_c1394 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QToolBar *arg1 = gsi::arg_reader<QToolBar * >() (args, heap);
  ret.write<qt_gsi::Converter<Qt::ToolBarArea>::target_type > ((qt_gsi::Converter<Qt::ToolBarArea>::target_type)qt_gsi::CppToQtAdaptor<Qt::ToolBarArea>(((QMainWindow *)cls)->toolBarArea (arg1)));
}


// bool QMainWindow::toolBarBreak(QToolBar *toolbar)


static void _init_f_toolBarBreak_c1394 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("toolbar");
  decl->add_arg<QToolBar * > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_toolBarBreak_c1394 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QToolBar *arg1 = gsi::arg_reader<QToolBar * >() (args, heap);
  ret.write<bool > ((bool)((QMainWindow *)cls)->toolBarBreak (arg1));
}


// Qt::ToolButtonStyle QMainWindow::toolButtonStyle()


static void _init_f_toolButtonStyle_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<Qt::ToolButtonStyle>::target_type > ();
}

static void _call_f_toolButtonStyle_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qt_gsi::Converter<Qt::ToolButtonStyle>::target_type > ((qt_gsi::Converter<Qt::ToolButtonStyle>::target_type)qt_gsi::CppToQtAdaptor<Qt::ToolButtonStyle>(((QMainWindow *)cls)->toolButtonStyle ()));
}


// bool QMainWindow::unifiedTitleAndToolBarOnMac()


static void _init_f_unifiedTitleAndToolBarOnMac_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_unifiedTitleAndToolBarOnMac_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QMainWindow *)cls)->unifiedTitleAndToolBarOnMac ());
}


// static QString QMainWindow::tr(const char *s, const char *c, int n)


static void _init_f_tr_4013 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<const char * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("c", true, "__null");
  decl->add_arg<const char * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("n", true, "-1");
  decl->add_arg<int > (argspec_2);
  decl->set_return<QString > ();
}

static void _call_f_tr_4013 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const char *arg1 = gsi::arg_reader<const char * >() (args, heap);
  const char *arg2 = args ? gsi::arg_reader<const char * >() (args, heap) : gsi::arg_maker<const char * >() (__null, heap);
  int arg3 = args ? gsi::arg_reader<int >() (args, heap) : gsi::arg_maker<int >() (-1, heap);
  ret.write<QString > ((QString)QMainWindow::tr (arg1, arg2, arg3));
}


// static QString QMainWindow::trUtf8(const char *s, const char *c, int n)


static void _init_f_trUtf8_4013 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<const char * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("c", true, "__null");
  decl->add_arg<const char * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("n", true, "-1");
  decl->add_arg<int > (argspec_2);
  decl->set_return<QString > ();
}

static void _call_f_trUtf8_4013 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const char *arg1 = gsi::arg_reader<const char * >() (args, heap);
  const char *arg2 = args ? gsi::arg_reader<const char * >() (args, heap) : gsi::arg_maker<const char * >() (__null, heap);
  int arg3 = args ? gsi::arg_reader<int >() (args, heap) : gsi::arg_maker<int >() (-1, heap);
  ret.write<QString > ((QString)QMainWindow::trUtf8 (arg1, arg2, arg3));
}


namespace gsi
{

static gsi::Methods methods_QMainWindow () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("staticMetaObject", "@brief Obtains the static MetaObject for this class.", &_init_smo, &_call_smo);
  methods += new qt_gsi::GenericMethod ("addDockWidget", "@brief Method void QMainWindow::addDockWidget(Qt::DockWidgetArea area, QDockWidget *dockwidget)\n", false, &_init_f_addDockWidget_3715, &_call_f_addDockWidget_3715);
  methods += new qt_gsi::GenericMethod ("addDockWidget", "@brief Method void QMainWindow::addDockWidget(Qt::DockWidgetArea area, QDockWidget *dockwidget, Qt::Orientation orientation)\n", false, &_init_f_addDockWidget_5520, &_call_f_addDockWidget_5520);
  methods += new qt_gsi::GenericMethod ("addToolBar", "@brief Method void QMainWindow::addToolBar(Qt::ToolBarArea area, QToolBar *toolbar)\n", false, &_init_f_addToolBar_3103, &_call_f_addToolBar_3103);
  methods += new qt_gsi::GenericMethod ("addToolBar", "@brief Method void QMainWindow::addToolBar(QToolBar *toolbar)\n", false, &_init_f_addToolBar_1394, &_call_f_addToolBar_1394);
  methods += new qt_gsi::GenericMethod ("addToolBar", "@brief Method QToolBar *QMainWindow::addToolBar(const QString &title)\n", false, &_init_f_addToolBar_2025, &_call_f_addToolBar_2025);
  methods += new qt_gsi::GenericMethod ("addToolBarBreak", "@brief Method void QMainWindow::addToolBarBreak(Qt::ToolBarArea area)\n", false, &_init_f_addToolBarBreak_1817, &_call_f_addToolBarBreak_1817);
  methods += new qt_gsi::GenericMethod (":centralWidget", "@brief Method QWidget *QMainWindow::centralWidget()\n", true, &_init_f_centralWidget_c0, &_call_f_centralWidget_c0);
  methods += new qt_gsi::GenericMethod ("corner", "@brief Method Qt::DockWidgetArea QMainWindow::corner(Qt::Corner corner)\n", true, &_init_f_corner_c1366, &_call_f_corner_c1366);
  methods += new qt_gsi::GenericMethod ("createPopupMenu", "@brief Method QMenu *QMainWindow::createPopupMenu()\n", false, &_init_f_createPopupMenu_0, &_call_f_createPopupMenu_0);
  methods += new qt_gsi::GenericMethod (":dockOptions", "@brief Method QFlags<QMainWindow::DockOption> QMainWindow::dockOptions()\n", true, &_init_f_dockOptions_c0, &_call_f_dockOptions_c0);
  methods += new qt_gsi::GenericMethod ("dockWidgetArea", "@brief Method Qt::DockWidgetArea QMainWindow::dockWidgetArea(QDockWidget *dockwidget)\n", true, &_init_f_dockWidgetArea_c1700, &_call_f_dockWidgetArea_c1700);
  methods += new qt_gsi::GenericMethod (":documentMode", "@brief Method bool QMainWindow::documentMode()\n", true, &_init_f_documentMode_c0, &_call_f_documentMode_c0);
  methods += new qt_gsi::GenericMethod (":iconSize", "@brief Method QSize QMainWindow::iconSize()\n", true, &_init_f_iconSize_c0, &_call_f_iconSize_c0);
  methods += new qt_gsi::GenericMethod ("insertToolBar", "@brief Method void QMainWindow::insertToolBar(QToolBar *before, QToolBar *toolbar)\n", false, &_init_f_insertToolBar_2680, &_call_f_insertToolBar_2680);
  methods += new qt_gsi::GenericMethod ("insertToolBarBreak", "@brief Method void QMainWindow::insertToolBarBreak(QToolBar *before)\n", false, &_init_f_insertToolBarBreak_1394, &_call_f_insertToolBarBreak_1394);
  methods += new qt_gsi::GenericMethod ("isAnimated?|:animated", "@brief Method bool QMainWindow::isAnimated()\n", true, &_init_f_isAnimated_c0, &_call_f_isAnimated_c0);
  methods += new qt_gsi::GenericMethod ("isDockNestingEnabled?|:dockNestingEnabled", "@brief Method bool QMainWindow::isDockNestingEnabled()\n", true, &_init_f_isDockNestingEnabled_c0, &_call_f_isDockNestingEnabled_c0);
  methods += new qt_gsi::GenericMethod ("isSeparator?", "@brief Method bool QMainWindow::isSeparator(const QPoint &pos)\n", true, &_init_f_isSeparator_c1916, &_call_f_isSeparator_c1916);
  methods += new qt_gsi::GenericMethod (":menuBar", "@brief Method QMenuBar *QMainWindow::menuBar()\n", true, &_init_f_menuBar_c0, &_call_f_menuBar_c0);
  methods += new qt_gsi::GenericMethod (":menuWidget", "@brief Method QWidget *QMainWindow::menuWidget()\n", true, &_init_f_menuWidget_c0, &_call_f_menuWidget_c0);
  methods += new qt_gsi::GenericMethod ("removeDockWidget", "@brief Method void QMainWindow::removeDockWidget(QDockWidget *dockwidget)\n", false, &_init_f_removeDockWidget_1700, &_call_f_removeDockWidget_1700);
  methods += new qt_gsi::GenericMethod ("removeToolBar", "@brief Method void QMainWindow::removeToolBar(QToolBar *toolbar)\n", false, &_init_f_removeToolBar_1394, &_call_f_removeToolBar_1394);
  methods += new qt_gsi::GenericMethod ("removeToolBarBreak", "@brief Method void QMainWindow::removeToolBarBreak(QToolBar *before)\n", false, &_init_f_removeToolBarBreak_1394, &_call_f_removeToolBarBreak_1394);
  methods += new qt_gsi::GenericMethod ("restoreDockWidget", "@brief Method bool QMainWindow::restoreDockWidget(QDockWidget *dockwidget)\n", false, &_init_f_restoreDockWidget_1700, &_call_f_restoreDockWidget_1700);
  methods += new qt_gsi::GenericMethod ("restoreState", "@brief Method bool QMainWindow::restoreState(const QByteArray &state, int version)\n", false, &_init_f_restoreState_2968, &_call_f_restoreState_2968);
  methods += new qt_gsi::GenericMethod ("saveState", "@brief Method QByteArray QMainWindow::saveState(int version)\n", true, &_init_f_saveState_c767, &_call_f_saveState_c767);
  methods += new qt_gsi::GenericMethod ("setAnimated|animated=", "@brief Method void QMainWindow::setAnimated(bool enabled)\n", false, &_init_f_setAnimated_864, &_call_f_setAnimated_864);
  methods += new qt_gsi::GenericMethod ("setCentralWidget|centralWidget=", "@brief Method void QMainWindow::setCentralWidget(QWidget *widget)\n", false, &_init_f_setCentralWidget_1315, &_call_f_setCentralWidget_1315);
  methods += new qt_gsi::GenericMethod ("setCorner", "@brief Method void QMainWindow::setCorner(Qt::Corner corner, Qt::DockWidgetArea area)\n", false, &_init_f_setCorner_3381, &_call_f_setCorner_3381);
  methods += new qt_gsi::GenericMethod ("setDockNestingEnabled|dockNestingEnabled=", "@brief Method void QMainWindow::setDockNestingEnabled(bool enabled)\n", false, &_init_f_setDockNestingEnabled_864, &_call_f_setDockNestingEnabled_864);
  methods += new qt_gsi::GenericMethod ("setDockOptions|dockOptions=", "@brief Method void QMainWindow::setDockOptions(QFlags<QMainWindow::DockOption> options)\n", false, &_init_f_setDockOptions_3368, &_call_f_setDockOptions_3368);
  methods += new qt_gsi::GenericMethod ("setDocumentMode|documentMode=", "@brief Method void QMainWindow::setDocumentMode(bool enabled)\n", false, &_init_f_setDocumentMode_864, &_call_f_setDocumentMode_864);
  methods += new qt_gsi::GenericMethod ("setIconSize|iconSize=", "@brief Method void QMainWindow::setIconSize(const QSize &iconSize)\n", false, &_init_f_setIconSize_1805, &_call_f_setIconSize_1805);
  methods += new qt_gsi::GenericMethod ("setMenuBar|menuBar=", "@brief Method void QMainWindow::setMenuBar(QMenuBar *menubar)\n", false, &_init_f_setMenuBar_1385, &_call_f_setMenuBar_1385);
  methods += new qt_gsi::GenericMethod ("setMenuWidget|menuWidget=", "@brief Method void QMainWindow::setMenuWidget(QWidget *menubar)\n", false, &_init_f_setMenuWidget_1315, &_call_f_setMenuWidget_1315);
  methods += new qt_gsi::GenericMethod ("setStatusBar|statusBar=", "@brief Method void QMainWindow::setStatusBar(QStatusBar *statusbar)\n", false, &_init_f_setStatusBar_1624, &_call_f_setStatusBar_1624);
  methods += new qt_gsi::GenericMethod ("setTabPosition", "@brief Method void QMainWindow::setTabPosition(QFlags<Qt::DockWidgetArea> areas, QTabWidget::TabPosition tabPosition)\n", false, &_init_f_setTabPosition_5367, &_call_f_setTabPosition_5367);
  methods += new qt_gsi::GenericMethod ("setTabShape|tabShape=", "@brief Method void QMainWindow::setTabShape(QTabWidget::TabShape tabShape)\n", false, &_init_f_setTabShape_2300, &_call_f_setTabShape_2300);
  methods += new qt_gsi::GenericMethod ("setToolButtonStyle|toolButtonStyle=", "@brief Method void QMainWindow::setToolButtonStyle(Qt::ToolButtonStyle toolButtonStyle)\n", false, &_init_f_setToolButtonStyle_2328, &_call_f_setToolButtonStyle_2328);
  methods += new qt_gsi::GenericMethod ("setUnifiedTitleAndToolBarOnMac|unifiedTitleAndToolBarOnMac=", "@brief Method void QMainWindow::setUnifiedTitleAndToolBarOnMac(bool set)\n", false, &_init_f_setUnifiedTitleAndToolBarOnMac_864, &_call_f_setUnifiedTitleAndToolBarOnMac_864);
  methods += new qt_gsi::GenericMethod ("splitDockWidget", "@brief Method void QMainWindow::splitDockWidget(QDockWidget *after, QDockWidget *dockwidget, Qt::Orientation orientation)\n", false, &_init_f_splitDockWidget_5097, &_call_f_splitDockWidget_5097);
  methods += new qt_gsi::GenericMethod (":statusBar", "@brief Method QStatusBar *QMainWindow::statusBar()\n", true, &_init_f_statusBar_c0, &_call_f_statusBar_c0);
  methods += new qt_gsi::GenericMethod ("tabPosition", "@brief Method QTabWidget::TabPosition QMainWindow::tabPosition(Qt::DockWidgetArea area)\n", true, &_init_f_tabPosition_c2123, &_call_f_tabPosition_c2123);
  methods += new qt_gsi::GenericMethod (":tabShape", "@brief Method QTabWidget::TabShape QMainWindow::tabShape()\n", true, &_init_f_tabShape_c0, &_call_f_tabShape_c0);
  methods += new qt_gsi::GenericMethod ("tabifiedDockWidgets", "@brief Method QList<QDockWidget*> QMainWindow::tabifiedDockWidgets(QDockWidget *dockwidget)\n", true, &_init_f_tabifiedDockWidgets_c1700, &_call_f_tabifiedDockWidgets_c1700);
  methods += new qt_gsi::GenericMethod ("tabifyDockWidget", "@brief Method void QMainWindow::tabifyDockWidget(QDockWidget *first, QDockWidget *second)\n", false, &_init_f_tabifyDockWidget_3292, &_call_f_tabifyDockWidget_3292);
  methods += new qt_gsi::GenericMethod ("takeCentralWidget", "@brief Method QWidget *QMainWindow::takeCentralWidget()\n", false, &_init_f_takeCentralWidget_0, &_call_f_takeCentralWidget_0);
  methods += new qt_gsi::GenericMethod ("toolBarArea", "@brief Method Qt::ToolBarArea QMainWindow::toolBarArea(QToolBar *toolbar)\n", true, &_init_f_toolBarArea_c1394, &_call_f_toolBarArea_c1394);
  methods += new qt_gsi::GenericMethod ("toolBarBreak", "@brief Method bool QMainWindow::toolBarBreak(QToolBar *toolbar)\n", true, &_init_f_toolBarBreak_c1394, &_call_f_toolBarBreak_c1394);
  methods += new qt_gsi::GenericMethod (":toolButtonStyle", "@brief Method Qt::ToolButtonStyle QMainWindow::toolButtonStyle()\n", true, &_init_f_toolButtonStyle_c0, &_call_f_toolButtonStyle_c0);
  methods += new qt_gsi::GenericMethod (":unifiedTitleAndToolBarOnMac", "@brief Method bool QMainWindow::unifiedTitleAndToolBarOnMac()\n", true, &_init_f_unifiedTitleAndToolBarOnMac_c0, &_call_f_unifiedTitleAndToolBarOnMac_c0);
  methods += gsi::qt_signal<const QPoint & > ("customContextMenuRequested(const QPoint &)", "customContextMenuRequested", gsi::arg("pos"), "@brief Signal declaration for QMainWindow::customContextMenuRequested(const QPoint &pos)\nYou can bind a procedure to this signal.");
  methods += gsi::qt_signal<QObject * > ("destroyed(QObject *)", "destroyed", gsi::arg("arg1"), "@brief Signal declaration for QMainWindow::destroyed(QObject *)\nYou can bind a procedure to this signal.");
  methods += gsi::qt_signal<const QSize & > ("iconSizeChanged(const QSize &)", "iconSizeChanged", gsi::arg("iconSize"), "@brief Signal declaration for QMainWindow::iconSizeChanged(const QSize &iconSize)\nYou can bind a procedure to this signal.");
  methods += gsi::qt_signal<const qt_gsi::Converter<Qt::ToolButtonStyle>::target_type & > ("toolButtonStyleChanged(Qt::ToolButtonStyle)", "toolButtonStyleChanged", gsi::arg("toolButtonStyle"), "@brief Signal declaration for QMainWindow::toolButtonStyleChanged(Qt::ToolButtonStyle toolButtonStyle)\nYou can bind a procedure to this signal.");
  methods += gsi::qt_signal<const QIcon & > ("windowIconChanged(const QIcon &)", "windowIconChanged", gsi::arg("icon"), "@brief Signal declaration for QMainWindow::windowIconChanged(const QIcon &icon)\nYou can bind a procedure to this signal.");
  methods += gsi::qt_signal<const QString & > ("windowIconTextChanged(const QString &)", "windowIconTextChanged", gsi::arg("iconText"), "@brief Signal declaration for QMainWindow::windowIconTextChanged(const QString &iconText)\nYou can bind a procedure to this signal.");
  methods += gsi::qt_signal<const QString & > ("windowTitleChanged(const QString &)", "windowTitleChanged", gsi::arg("title"), "@brief Signal declaration for QMainWindow::windowTitleChanged(const QString &title)\nYou can bind a procedure to this signal.");
  methods += new qt_gsi::GenericStaticMethod ("tr", "@brief Static method QString QMainWindow::tr(const char *s, const char *c, int n)\nThis method is static and can be called without an instance.", &_init_f_tr_4013, &_call_f_tr_4013);
  methods += new qt_gsi::GenericStaticMethod ("trUtf8", "@brief Static method QString QMainWindow::trUtf8(const char *s, const char *c, int n)\nThis method is static and can be called without an instance.", &_init_f_trUtf8_4013, &_call_f_trUtf8_4013);
  return methods;
}

gsi::Class<QWidget> &qtdecl_QWidget ();

qt_gsi::QtNativeClass<QMainWindow> decl_QMainWindow (qtdecl_QWidget (), "QtWidgets", "QMainWindow_Native",
  methods_QMainWindow (),
  "@hide\n@alias QMainWindow");

GSI_QTWIDGETS_PUBLIC gsi::Class<QMainWindow> &qtdecl_QMainWindow () { return decl_QMainWindow; }

}


class QMainWindow_Adaptor : public QMainWindow, public qt_gsi::QtObjectBase
{
public:

  virtual ~QMainWindow_Adaptor();

  //  [adaptor ctor] QMainWindow::QMainWindow(QWidget *parent, QFlags<Qt::WindowType> flags)
  QMainWindow_Adaptor() : QMainWindow()
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  [adaptor ctor] QMainWindow::QMainWindow(QWidget *parent, QFlags<Qt::WindowType> flags)
  QMainWindow_Adaptor(QWidget *parent) : QMainWindow(parent)
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  [adaptor ctor] QMainWindow::QMainWindow(QWidget *parent, QFlags<Qt::WindowType> flags)
  QMainWindow_Adaptor(QWidget *parent, QFlags<Qt::WindowType> flags) : QMainWindow(parent, flags)
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  [expose] void QMainWindow::create(WId, bool initializeWindow, bool destroyOldWindow)
  void fp_QMainWindow_create_2208 (const qt_gsi::Converter<WId>::target_type & arg1, bool initializeWindow, bool destroyOldWindow) {
    QMainWindow::create(qt_gsi::QtToCppAdaptor<WId>(arg1).cref(), initializeWindow, destroyOldWindow);
  }

  //  [expose] void QMainWindow::destroy(bool destroyWindow, bool destroySubWindows)
  void fp_QMainWindow_destroy_1620 (bool destroyWindow, bool destroySubWindows) {
    QMainWindow::destroy(destroyWindow, destroySubWindows);
  }

  //  [expose] bool QMainWindow::focusNextChild()
  bool fp_QMainWindow_focusNextChild_0 () {
    return QMainWindow::focusNextChild();
  }

  //  [expose] bool QMainWindow::focusPreviousChild()
  bool fp_QMainWindow_focusPreviousChild_0 () {
    return QMainWindow::focusPreviousChild();
  }

  //  [expose] bool QMainWindow::isSignalConnected(const QMetaMethod &signal)
  bool fp_QMainWindow_isSignalConnected_c2394 (const QMetaMethod &signal) const {
    return QMainWindow::isSignalConnected(signal);
  }

  //  [expose] int QMainWindow::receivers(const char *signal)
  int fp_QMainWindow_receivers_c1731 (const char *signal) const {
    return QMainWindow::receivers(signal);
  }

  //  [expose] QObject *QMainWindow::sender()
  QObject * fp_QMainWindow_sender_c0 () const {
    return QMainWindow::sender();
  }

  //  [expose] int QMainWindow::senderSignalIndex()
  int fp_QMainWindow_senderSignalIndex_c0 () const {
    return QMainWindow::senderSignalIndex();
  }

  //  [expose] void QMainWindow::updateMicroFocus()
  void fp_QMainWindow_updateMicroFocus_0 () {
    QMainWindow::updateMicroFocus();
  }

  //  [adaptor impl] QMenu *QMainWindow::createPopupMenu()
  QMenu * cbs_createPopupMenu_0_0()
  {
    return QMainWindow::createPopupMenu();
  }

  virtual QMenu * createPopupMenu()
  {
    if (cb_createPopupMenu_0_0.can_issue()) {
      return cb_createPopupMenu_0_0.issue<QMainWindow_Adaptor, QMenu *>(&QMainWindow_Adaptor::cbs_createPopupMenu_0_0);
    } else {
      return QMainWindow::createPopupMenu();
    }
  }

  //  [emitter impl] void QMainWindow::customContextMenuRequested(const QPoint &pos)
  void emitter_QMainWindow_customContextMenuRequested_1916(const QPoint &pos)
  {
    emit QMainWindow::customContextMenuRequested(pos);
  }

  //  [emitter impl] void QMainWindow::destroyed(QObject *)
  void emitter_QMainWindow_destroyed_1302(QObject *arg1)
  {
    emit QMainWindow::destroyed(arg1);
  }

  //  [adaptor impl] bool QMainWindow::eventFilter(QObject *, QEvent *)
  bool cbs_eventFilter_2411_0(QObject *arg1, QEvent *arg2)
  {
    return QMainWindow::eventFilter(arg1, arg2);
  }

  virtual bool eventFilter(QObject *arg1, QEvent *arg2)
  {
    if (cb_eventFilter_2411_0.can_issue()) {
      return cb_eventFilter_2411_0.issue<QMainWindow_Adaptor, bool, QObject *, QEvent *>(&QMainWindow_Adaptor::cbs_eventFilter_2411_0, arg1, arg2);
    } else {
      return QMainWindow::eventFilter(arg1, arg2);
    }
  }

  //  [adaptor impl] bool QMainWindow::hasHeightForWidth()
  bool cbs_hasHeightForWidth_c0_0() const
  {
    return QMainWindow::hasHeightForWidth();
  }

  virtual bool hasHeightForWidth() const
  {
    if (cb_hasHeightForWidth_c0_0.can_issue()) {
      return cb_hasHeightForWidth_c0_0.issue<QMainWindow_Adaptor, bool>(&QMainWindow_Adaptor::cbs_hasHeightForWidth_c0_0);
    } else {
      return QMainWindow::hasHeightForWidth();
    }
  }

  //  [adaptor impl] int QMainWindow::heightForWidth(int)
  int cbs_heightForWidth_c767_0(int arg1) const
  {
    return QMainWindow::heightForWidth(arg1);
  }

  virtual int heightForWidth(int arg1) const
  {
    if (cb_heightForWidth_c767_0.can_issue()) {
      return cb_heightForWidth_c767_0.issue<QMainWindow_Adaptor, int, int>(&QMainWindow_Adaptor::cbs_heightForWidth_c767_0, arg1);
    } else {
      return QMainWindow::heightForWidth(arg1);
    }
  }

  //  [emitter impl] void QMainWindow::iconSizeChanged(const QSize &iconSize)
  void emitter_QMainWindow_iconSizeChanged_1805(const QSize &iconSize)
  {
    emit QMainWindow::iconSizeChanged(iconSize);
  }

  //  [adaptor impl] QVariant QMainWindow::inputMethodQuery(Qt::InputMethodQuery)
  QVariant cbs_inputMethodQuery_c2420_0(const qt_gsi::Converter<Qt::InputMethodQuery>::target_type & arg1) const
  {
    return QMainWindow::inputMethodQuery(qt_gsi::QtToCppAdaptor<Qt::InputMethodQuery>(arg1).cref());
  }

  virtual QVariant inputMethodQuery(Qt::InputMethodQuery arg1) const
  {
    if (cb_inputMethodQuery_c2420_0.can_issue()) {
      return cb_inputMethodQuery_c2420_0.issue<QMainWindow_Adaptor, QVariant, const qt_gsi::Converter<Qt::InputMethodQuery>::target_type &>(&QMainWindow_Adaptor::cbs_inputMethodQuery_c2420_0, qt_gsi::CppToQtAdaptor<Qt::InputMethodQuery>(arg1));
    } else {
      return QMainWindow::inputMethodQuery(arg1);
    }
  }

  //  [adaptor impl] QSize QMainWindow::minimumSizeHint()
  QSize cbs_minimumSizeHint_c0_0() const
  {
    return QMainWindow::minimumSizeHint();
  }

  virtual QSize minimumSizeHint() const
  {
    if (cb_minimumSizeHint_c0_0.can_issue()) {
      return cb_minimumSizeHint_c0_0.issue<QMainWindow_Adaptor, QSize>(&QMainWindow_Adaptor::cbs_minimumSizeHint_c0_0);
    } else {
      return QMainWindow::minimumSizeHint();
    }
  }

  //  [adaptor impl] QPaintEngine *QMainWindow::paintEngine()
  QPaintEngine * cbs_paintEngine_c0_0() const
  {
    return QMainWindow::paintEngine();
  }

  virtual QPaintEngine * paintEngine() const
  {
    if (cb_paintEngine_c0_0.can_issue()) {
      return cb_paintEngine_c0_0.issue<QMainWindow_Adaptor, QPaintEngine *>(&QMainWindow_Adaptor::cbs_paintEngine_c0_0);
    } else {
      return QMainWindow::paintEngine();
    }
  }

  //  [adaptor impl] void QMainWindow::setVisible(bool visible)
  void cbs_setVisible_864_0(bool visible)
  {
    QMainWindow::setVisible(visible);
  }

  virtual void setVisible(bool visible)
  {
    if (cb_setVisible_864_0.can_issue()) {
      cb_setVisible_864_0.issue<QMainWindow_Adaptor, bool>(&QMainWindow_Adaptor::cbs_setVisible_864_0, visible);
    } else {
      QMainWindow::setVisible(visible);
    }
  }

  //  [adaptor impl] QSize QMainWindow::sizeHint()
  QSize cbs_sizeHint_c0_0() const
  {
    return QMainWindow::sizeHint();
  }

  virtual QSize sizeHint() const
  {
    if (cb_sizeHint_c0_0.can_issue()) {
      return cb_sizeHint_c0_0.issue<QMainWindow_Adaptor, QSize>(&QMainWindow_Adaptor::cbs_sizeHint_c0_0);
    } else {
      return QMainWindow::sizeHint();
    }
  }

  //  [emitter impl] void QMainWindow::toolButtonStyleChanged(Qt::ToolButtonStyle toolButtonStyle)
  void emitter_QMainWindow_toolButtonStyleChanged_2328(Qt::ToolButtonStyle toolButtonStyle)
  {
    emit QMainWindow::toolButtonStyleChanged(toolButtonStyle);
  }

  //  [emitter impl] void QMainWindow::windowIconChanged(const QIcon &icon)
  void emitter_QMainWindow_windowIconChanged_1787(const QIcon &icon)
  {
    emit QMainWindow::windowIconChanged(icon);
  }

  //  [emitter impl] void QMainWindow::windowIconTextChanged(const QString &iconText)
  void emitter_QMainWindow_windowIconTextChanged_2025(const QString &iconText)
  {
    emit QMainWindow::windowIconTextChanged(iconText);
  }

  //  [emitter impl] void QMainWindow::windowTitleChanged(const QString &title)
  void emitter_QMainWindow_windowTitleChanged_2025(const QString &title)
  {
    emit QMainWindow::windowTitleChanged(title);
  }

  //  [adaptor impl] void QMainWindow::actionEvent(QActionEvent *)
  void cbs_actionEvent_1823_0(QActionEvent *arg1)
  {
    QMainWindow::actionEvent(arg1);
  }

  virtual void actionEvent(QActionEvent *arg1)
  {
    if (cb_actionEvent_1823_0.can_issue()) {
      cb_actionEvent_1823_0.issue<QMainWindow_Adaptor, QActionEvent *>(&QMainWindow_Adaptor::cbs_actionEvent_1823_0, arg1);
    } else {
      QMainWindow::actionEvent(arg1);
    }
  }

  //  [adaptor impl] void QMainWindow::changeEvent(QEvent *)
  void cbs_changeEvent_1217_0(QEvent *arg1)
  {
    QMainWindow::changeEvent(arg1);
  }

  virtual void changeEvent(QEvent *arg1)
  {
    if (cb_changeEvent_1217_0.can_issue()) {
      cb_changeEvent_1217_0.issue<QMainWindow_Adaptor, QEvent *>(&QMainWindow_Adaptor::cbs_changeEvent_1217_0, arg1);
    } else {
      QMainWindow::changeEvent(arg1);
    }
  }

  //  [adaptor impl] void QMainWindow::childEvent(QChildEvent *)
  void cbs_childEvent_1701_0(QChildEvent *arg1)
  {
    QMainWindow::childEvent(arg1);
  }

  virtual void childEvent(QChildEvent *arg1)
  {
    if (cb_childEvent_1701_0.can_issue()) {
      cb_childEvent_1701_0.issue<QMainWindow_Adaptor, QChildEvent *>(&QMainWindow_Adaptor::cbs_childEvent_1701_0, arg1);
    } else {
      QMainWindow::childEvent(arg1);
    }
  }

  //  [adaptor impl] void QMainWindow::closeEvent(QCloseEvent *)
  void cbs_closeEvent_1719_0(QCloseEvent *arg1)
  {
    QMainWindow::closeEvent(arg1);
  }

  virtual void closeEvent(QCloseEvent *arg1)
  {
    if (cb_closeEvent_1719_0.can_issue()) {
      cb_closeEvent_1719_0.issue<QMainWindow_Adaptor, QCloseEvent *>(&QMainWindow_Adaptor::cbs_closeEvent_1719_0, arg1);
    } else {
      QMainWindow::closeEvent(arg1);
    }
  }

  //  [adaptor impl] void QMainWindow::contextMenuEvent(QContextMenuEvent *event)
  void cbs_contextMenuEvent_2363_0(QContextMenuEvent *event)
  {
    QMainWindow::contextMenuEvent(event);
  }

  virtual void contextMenuEvent(QContextMenuEvent *event)
  {
    if (cb_contextMenuEvent_2363_0.can_issue()) {
      cb_contextMenuEvent_2363_0.issue<QMainWindow_Adaptor, QContextMenuEvent *>(&QMainWindow_Adaptor::cbs_contextMenuEvent_2363_0, event);
    } else {
      QMainWindow::contextMenuEvent(event);
    }
  }

  //  [adaptor impl] void QMainWindow::customEvent(QEvent *)
  void cbs_customEvent_1217_0(QEvent *arg1)
  {
    QMainWindow::customEvent(arg1);
  }

  virtual void customEvent(QEvent *arg1)
  {
    if (cb_customEvent_1217_0.can_issue()) {
      cb_customEvent_1217_0.issue<QMainWindow_Adaptor, QEvent *>(&QMainWindow_Adaptor::cbs_customEvent_1217_0, arg1);
    } else {
      QMainWindow::customEvent(arg1);
    }
  }

  //  [adaptor impl] void QMainWindow::disconnectNotify(const QMetaMethod &signal)
  void cbs_disconnectNotify_2394_0(const QMetaMethod &signal)
  {
    QMainWindow::disconnectNotify(signal);
  }

  virtual void disconnectNotify(const QMetaMethod &signal)
  {
    if (cb_disconnectNotify_2394_0.can_issue()) {
      cb_disconnectNotify_2394_0.issue<QMainWindow_Adaptor, const QMetaMethod &>(&QMainWindow_Adaptor::cbs_disconnectNotify_2394_0, signal);
    } else {
      QMainWindow::disconnectNotify(signal);
    }
  }

  //  [adaptor impl] void QMainWindow::dragEnterEvent(QDragEnterEvent *)
  void cbs_dragEnterEvent_2109_0(QDragEnterEvent *arg1)
  {
    QMainWindow::dragEnterEvent(arg1);
  }

  virtual void dragEnterEvent(QDragEnterEvent *arg1)
  {
    if (cb_dragEnterEvent_2109_0.can_issue()) {
      cb_dragEnterEvent_2109_0.issue<QMainWindow_Adaptor, QDragEnterEvent *>(&QMainWindow_Adaptor::cbs_dragEnterEvent_2109_0, arg1);
    } else {
      QMainWindow::dragEnterEvent(arg1);
    }
  }

  //  [adaptor impl] void QMainWindow::dragLeaveEvent(QDragLeaveEvent *)
  void cbs_dragLeaveEvent_2092_0(QDragLeaveEvent *arg1)
  {
    QMainWindow::dragLeaveEvent(arg1);
  }

  virtual void dragLeaveEvent(QDragLeaveEvent *arg1)
  {
    if (cb_dragLeaveEvent_2092_0.can_issue()) {
      cb_dragLeaveEvent_2092_0.issue<QMainWindow_Adaptor, QDragLeaveEvent *>(&QMainWindow_Adaptor::cbs_dragLeaveEvent_2092_0, arg1);
    } else {
      QMainWindow::dragLeaveEvent(arg1);
    }
  }

  //  [adaptor impl] void QMainWindow::dragMoveEvent(QDragMoveEvent *)
  void cbs_dragMoveEvent_2006_0(QDragMoveEvent *arg1)
  {
    QMainWindow::dragMoveEvent(arg1);
  }

  virtual void dragMoveEvent(QDragMoveEvent *arg1)
  {
    if (cb_dragMoveEvent_2006_0.can_issue()) {
      cb_dragMoveEvent_2006_0.issue<QMainWindow_Adaptor, QDragMoveEvent *>(&QMainWindow_Adaptor::cbs_dragMoveEvent_2006_0, arg1);
    } else {
      QMainWindow::dragMoveEvent(arg1);
    }
  }

  //  [adaptor impl] void QMainWindow::dropEvent(QDropEvent *)
  void cbs_dropEvent_1622_0(QDropEvent *arg1)
  {
    QMainWindow::dropEvent(arg1);
  }

  virtual void dropEvent(QDropEvent *arg1)
  {
    if (cb_dropEvent_1622_0.can_issue()) {
      cb_dropEvent_1622_0.issue<QMainWindow_Adaptor, QDropEvent *>(&QMainWindow_Adaptor::cbs_dropEvent_1622_0, arg1);
    } else {
      QMainWindow::dropEvent(arg1);
    }
  }

  //  [adaptor impl] void QMainWindow::enterEvent(QEvent *)
  void cbs_enterEvent_1217_0(QEvent *arg1)
  {
    QMainWindow::enterEvent(arg1);
  }

  virtual void enterEvent(QEvent *arg1)
  {
    if (cb_enterEvent_1217_0.can_issue()) {
      cb_enterEvent_1217_0.issue<QMainWindow_Adaptor, QEvent *>(&QMainWindow_Adaptor::cbs_enterEvent_1217_0, arg1);
    } else {
      QMainWindow::enterEvent(arg1);
    }
  }

  //  [adaptor impl] bool QMainWindow::event(QEvent *event)
  bool cbs_event_1217_0(QEvent *_event)
  {
    return QMainWindow::event(_event);
  }

  virtual bool event(QEvent *_event)
  {
    if (cb_event_1217_0.can_issue()) {
      return cb_event_1217_0.issue<QMainWindow_Adaptor, bool, QEvent *>(&QMainWindow_Adaptor::cbs_event_1217_0, _event);
    } else {
      return QMainWindow::event(_event);
    }
  }

  //  [adaptor impl] void QMainWindow::focusInEvent(QFocusEvent *)
  void cbs_focusInEvent_1729_0(QFocusEvent *arg1)
  {
    QMainWindow::focusInEvent(arg1);
  }

  virtual void focusInEvent(QFocusEvent *arg1)
  {
    if (cb_focusInEvent_1729_0.can_issue()) {
      cb_focusInEvent_1729_0.issue<QMainWindow_Adaptor, QFocusEvent *>(&QMainWindow_Adaptor::cbs_focusInEvent_1729_0, arg1);
    } else {
      QMainWindow::focusInEvent(arg1);
    }
  }

  //  [adaptor impl] bool QMainWindow::focusNextPrevChild(bool next)
  bool cbs_focusNextPrevChild_864_0(bool next)
  {
    return QMainWindow::focusNextPrevChild(next);
  }

  virtual bool focusNextPrevChild(bool next)
  {
    if (cb_focusNextPrevChild_864_0.can_issue()) {
      return cb_focusNextPrevChild_864_0.issue<QMainWindow_Adaptor, bool, bool>(&QMainWindow_Adaptor::cbs_focusNextPrevChild_864_0, next);
    } else {
      return QMainWindow::focusNextPrevChild(next);
    }
  }

  //  [adaptor impl] void QMainWindow::focusOutEvent(QFocusEvent *)
  void cbs_focusOutEvent_1729_0(QFocusEvent *arg1)
  {
    QMainWindow::focusOutEvent(arg1);
  }

  virtual void focusOutEvent(QFocusEvent *arg1)
  {
    if (cb_focusOutEvent_1729_0.can_issue()) {
      cb_focusOutEvent_1729_0.issue<QMainWindow_Adaptor, QFocusEvent *>(&QMainWindow_Adaptor::cbs_focusOutEvent_1729_0, arg1);
    } else {
      QMainWindow::focusOutEvent(arg1);
    }
  }

  //  [adaptor impl] void QMainWindow::hideEvent(QHideEvent *)
  void cbs_hideEvent_1595_0(QHideEvent *arg1)
  {
    QMainWindow::hideEvent(arg1);
  }

  virtual void hideEvent(QHideEvent *arg1)
  {
    if (cb_hideEvent_1595_0.can_issue()) {
      cb_hideEvent_1595_0.issue<QMainWindow_Adaptor, QHideEvent *>(&QMainWindow_Adaptor::cbs_hideEvent_1595_0, arg1);
    } else {
      QMainWindow::hideEvent(arg1);
    }
  }

  //  [adaptor impl] void QMainWindow::initPainter(QPainter *painter)
  void cbs_initPainter_c1426_0(QPainter *painter) const
  {
    QMainWindow::initPainter(painter);
  }

  virtual void initPainter(QPainter *painter) const
  {
    if (cb_initPainter_c1426_0.can_issue()) {
      cb_initPainter_c1426_0.issue<QMainWindow_Adaptor, QPainter *>(&QMainWindow_Adaptor::cbs_initPainter_c1426_0, painter);
    } else {
      QMainWindow::initPainter(painter);
    }
  }

  //  [adaptor impl] void QMainWindow::inputMethodEvent(QInputMethodEvent *)
  void cbs_inputMethodEvent_2354_0(QInputMethodEvent *arg1)
  {
    QMainWindow::inputMethodEvent(arg1);
  }

  virtual void inputMethodEvent(QInputMethodEvent *arg1)
  {
    if (cb_inputMethodEvent_2354_0.can_issue()) {
      cb_inputMethodEvent_2354_0.issue<QMainWindow_Adaptor, QInputMethodEvent *>(&QMainWindow_Adaptor::cbs_inputMethodEvent_2354_0, arg1);
    } else {
      QMainWindow::inputMethodEvent(arg1);
    }
  }

  //  [adaptor impl] void QMainWindow::keyPressEvent(QKeyEvent *)
  void cbs_keyPressEvent_1514_0(QKeyEvent *arg1)
  {
    QMainWindow::keyPressEvent(arg1);
  }

  virtual void keyPressEvent(QKeyEvent *arg1)
  {
    if (cb_keyPressEvent_1514_0.can_issue()) {
      cb_keyPressEvent_1514_0.issue<QMainWindow_Adaptor, QKeyEvent *>(&QMainWindow_Adaptor::cbs_keyPressEvent_1514_0, arg1);
    } else {
      QMainWindow::keyPressEvent(arg1);
    }
  }

  //  [adaptor impl] void QMainWindow::keyReleaseEvent(QKeyEvent *)
  void cbs_keyReleaseEvent_1514_0(QKeyEvent *arg1)
  {
    QMainWindow::keyReleaseEvent(arg1);
  }

  virtual void keyReleaseEvent(QKeyEvent *arg1)
  {
    if (cb_keyReleaseEvent_1514_0.can_issue()) {
      cb_keyReleaseEvent_1514_0.issue<QMainWindow_Adaptor, QKeyEvent *>(&QMainWindow_Adaptor::cbs_keyReleaseEvent_1514_0, arg1);
    } else {
      QMainWindow::keyReleaseEvent(arg1);
    }
  }

  //  [adaptor impl] void QMainWindow::leaveEvent(QEvent *)
  void cbs_leaveEvent_1217_0(QEvent *arg1)
  {
    QMainWindow::leaveEvent(arg1);
  }

  virtual void leaveEvent(QEvent *arg1)
  {
    if (cb_leaveEvent_1217_0.can_issue()) {
      cb_leaveEvent_1217_0.issue<QMainWindow_Adaptor, QEvent *>(&QMainWindow_Adaptor::cbs_leaveEvent_1217_0, arg1);
    } else {
      QMainWindow::leaveEvent(arg1);
    }
  }

  //  [adaptor impl] int QMainWindow::metric(QPaintDevice::PaintDeviceMetric)
  int cbs_metric_c3445_0(const qt_gsi::Converter<QPaintDevice::PaintDeviceMetric>::target_type & arg1) const
  {
    return QMainWindow::metric(qt_gsi::QtToCppAdaptor<QPaintDevice::PaintDeviceMetric>(arg1).cref());
  }

  virtual int metric(QPaintDevice::PaintDeviceMetric arg1) const
  {
    if (cb_metric_c3445_0.can_issue()) {
      return cb_metric_c3445_0.issue<QMainWindow_Adaptor, int, const qt_gsi::Converter<QPaintDevice::PaintDeviceMetric>::target_type &>(&QMainWindow_Adaptor::cbs_metric_c3445_0, qt_gsi::CppToQtAdaptor<QPaintDevice::PaintDeviceMetric>(arg1));
    } else {
      return QMainWindow::metric(arg1);
    }
  }

  //  [adaptor impl] void QMainWindow::mouseDoubleClickEvent(QMouseEvent *)
  void cbs_mouseDoubleClickEvent_1738_0(QMouseEvent *arg1)
  {
    QMainWindow::mouseDoubleClickEvent(arg1);
  }

  virtual void mouseDoubleClickEvent(QMouseEvent *arg1)
  {
    if (cb_mouseDoubleClickEvent_1738_0.can_issue()) {
      cb_mouseDoubleClickEvent_1738_0.issue<QMainWindow_Adaptor, QMouseEvent *>(&QMainWindow_Adaptor::cbs_mouseDoubleClickEvent_1738_0, arg1);
    } else {
      QMainWindow::mouseDoubleClickEvent(arg1);
    }
  }

  //  [adaptor impl] void QMainWindow::mouseMoveEvent(QMouseEvent *)
  void cbs_mouseMoveEvent_1738_0(QMouseEvent *arg1)
  {
    QMainWindow::mouseMoveEvent(arg1);
  }

  virtual void mouseMoveEvent(QMouseEvent *arg1)
  {
    if (cb_mouseMoveEvent_1738_0.can_issue()) {
      cb_mouseMoveEvent_1738_0.issue<QMainWindow_Adaptor, QMouseEvent *>(&QMainWindow_Adaptor::cbs_mouseMoveEvent_1738_0, arg1);
    } else {
      QMainWindow::mouseMoveEvent(arg1);
    }
  }

  //  [adaptor impl] void QMainWindow::mousePressEvent(QMouseEvent *)
  void cbs_mousePressEvent_1738_0(QMouseEvent *arg1)
  {
    QMainWindow::mousePressEvent(arg1);
  }

  virtual void mousePressEvent(QMouseEvent *arg1)
  {
    if (cb_mousePressEvent_1738_0.can_issue()) {
      cb_mousePressEvent_1738_0.issue<QMainWindow_Adaptor, QMouseEvent *>(&QMainWindow_Adaptor::cbs_mousePressEvent_1738_0, arg1);
    } else {
      QMainWindow::mousePressEvent(arg1);
    }
  }

  //  [adaptor impl] void QMainWindow::mouseReleaseEvent(QMouseEvent *)
  void cbs_mouseReleaseEvent_1738_0(QMouseEvent *arg1)
  {
    QMainWindow::mouseReleaseEvent(arg1);
  }

  virtual void mouseReleaseEvent(QMouseEvent *arg1)
  {
    if (cb_mouseReleaseEvent_1738_0.can_issue()) {
      cb_mouseReleaseEvent_1738_0.issue<QMainWindow_Adaptor, QMouseEvent *>(&QMainWindow_Adaptor::cbs_mouseReleaseEvent_1738_0, arg1);
    } else {
      QMainWindow::mouseReleaseEvent(arg1);
    }
  }

  //  [adaptor impl] void QMainWindow::moveEvent(QMoveEvent *)
  void cbs_moveEvent_1624_0(QMoveEvent *arg1)
  {
    QMainWindow::moveEvent(arg1);
  }

  virtual void moveEvent(QMoveEvent *arg1)
  {
    if (cb_moveEvent_1624_0.can_issue()) {
      cb_moveEvent_1624_0.issue<QMainWindow_Adaptor, QMoveEvent *>(&QMainWindow_Adaptor::cbs_moveEvent_1624_0, arg1);
    } else {
      QMainWindow::moveEvent(arg1);
    }
  }

  //  [adaptor impl] bool QMainWindow::nativeEvent(const QByteArray &eventType, void *message, long int *result)
  bool cbs_nativeEvent_4678_0(const QByteArray &eventType, void *message, long int *result)
  {
    return QMainWindow::nativeEvent(eventType, message, result);
  }

  virtual bool nativeEvent(const QByteArray &eventType, void *message, long int *result)
  {
    if (cb_nativeEvent_4678_0.can_issue()) {
      return cb_nativeEvent_4678_0.issue<QMainWindow_Adaptor, bool, const QByteArray &, void *, long int *>(&QMainWindow_Adaptor::cbs_nativeEvent_4678_0, eventType, message, result);
    } else {
      return QMainWindow::nativeEvent(eventType, message, result);
    }
  }

  //  [adaptor impl] void QMainWindow::paintEvent(QPaintEvent *)
  void cbs_paintEvent_1725_0(QPaintEvent *arg1)
  {
    QMainWindow::paintEvent(arg1);
  }

  virtual void paintEvent(QPaintEvent *arg1)
  {
    if (cb_paintEvent_1725_0.can_issue()) {
      cb_paintEvent_1725_0.issue<QMainWindow_Adaptor, QPaintEvent *>(&QMainWindow_Adaptor::cbs_paintEvent_1725_0, arg1);
    } else {
      QMainWindow::paintEvent(arg1);
    }
  }

  //  [adaptor impl] QPaintDevice *QMainWindow::redirected(QPoint *offset)
  QPaintDevice * cbs_redirected_c1225_0(QPoint *offset) const
  {
    return QMainWindow::redirected(offset);
  }

  virtual QPaintDevice * redirected(QPoint *offset) const
  {
    if (cb_redirected_c1225_0.can_issue()) {
      return cb_redirected_c1225_0.issue<QMainWindow_Adaptor, QPaintDevice *, QPoint *>(&QMainWindow_Adaptor::cbs_redirected_c1225_0, offset);
    } else {
      return QMainWindow::redirected(offset);
    }
  }

  //  [adaptor impl] void QMainWindow::resizeEvent(QResizeEvent *)
  void cbs_resizeEvent_1843_0(QResizeEvent *arg1)
  {
    QMainWindow::resizeEvent(arg1);
  }

  virtual void resizeEvent(QResizeEvent *arg1)
  {
    if (cb_resizeEvent_1843_0.can_issue()) {
      cb_resizeEvent_1843_0.issue<QMainWindow_Adaptor, QResizeEvent *>(&QMainWindow_Adaptor::cbs_resizeEvent_1843_0, arg1);
    } else {
      QMainWindow::resizeEvent(arg1);
    }
  }

  //  [adaptor impl] QPainter *QMainWindow::sharedPainter()
  QPainter * cbs_sharedPainter_c0_0() const
  {
    return QMainWindow::sharedPainter();
  }

  virtual QPainter * sharedPainter() const
  {
    if (cb_sharedPainter_c0_0.can_issue()) {
      return cb_sharedPainter_c0_0.issue<QMainWindow_Adaptor, QPainter *>(&QMainWindow_Adaptor::cbs_sharedPainter_c0_0);
    } else {
      return QMainWindow::sharedPainter();
    }
  }

  //  [adaptor impl] void QMainWindow::showEvent(QShowEvent *)
  void cbs_showEvent_1634_0(QShowEvent *arg1)
  {
    QMainWindow::showEvent(arg1);
  }

  virtual void showEvent(QShowEvent *arg1)
  {
    if (cb_showEvent_1634_0.can_issue()) {
      cb_showEvent_1634_0.issue<QMainWindow_Adaptor, QShowEvent *>(&QMainWindow_Adaptor::cbs_showEvent_1634_0, arg1);
    } else {
      QMainWindow::showEvent(arg1);
    }
  }

  //  [adaptor impl] void QMainWindow::tabletEvent(QTabletEvent *)
  void cbs_tabletEvent_1821_0(QTabletEvent *arg1)
  {
    QMainWindow::tabletEvent(arg1);
  }

  virtual void tabletEvent(QTabletEvent *arg1)
  {
    if (cb_tabletEvent_1821_0.can_issue()) {
      cb_tabletEvent_1821_0.issue<QMainWindow_Adaptor, QTabletEvent *>(&QMainWindow_Adaptor::cbs_tabletEvent_1821_0, arg1);
    } else {
      QMainWindow::tabletEvent(arg1);
    }
  }

  //  [adaptor impl] void QMainWindow::timerEvent(QTimerEvent *)
  void cbs_timerEvent_1730_0(QTimerEvent *arg1)
  {
    QMainWindow::timerEvent(arg1);
  }

  virtual void timerEvent(QTimerEvent *arg1)
  {
    if (cb_timerEvent_1730_0.can_issue()) {
      cb_timerEvent_1730_0.issue<QMainWindow_Adaptor, QTimerEvent *>(&QMainWindow_Adaptor::cbs_timerEvent_1730_0, arg1);
    } else {
      QMainWindow::timerEvent(arg1);
    }
  }

  //  [adaptor impl] void QMainWindow::wheelEvent(QWheelEvent *)
  void cbs_wheelEvent_1718_0(QWheelEvent *arg1)
  {
    QMainWindow::wheelEvent(arg1);
  }

  virtual void wheelEvent(QWheelEvent *arg1)
  {
    if (cb_wheelEvent_1718_0.can_issue()) {
      cb_wheelEvent_1718_0.issue<QMainWindow_Adaptor, QWheelEvent *>(&QMainWindow_Adaptor::cbs_wheelEvent_1718_0, arg1);
    } else {
      QMainWindow::wheelEvent(arg1);
    }
  }

  gsi::Callback cb_createPopupMenu_0_0;
  gsi::Callback cb_eventFilter_2411_0;
  gsi::Callback cb_hasHeightForWidth_c0_0;
  gsi::Callback cb_heightForWidth_c767_0;
  gsi::Callback cb_inputMethodQuery_c2420_0;
  gsi::Callback cb_minimumSizeHint_c0_0;
  gsi::Callback cb_paintEngine_c0_0;
  gsi::Callback cb_setVisible_864_0;
  gsi::Callback cb_sizeHint_c0_0;
  gsi::Callback cb_actionEvent_1823_0;
  gsi::Callback cb_changeEvent_1217_0;
  gsi::Callback cb_childEvent_1701_0;
  gsi::Callback cb_closeEvent_1719_0;
  gsi::Callback cb_contextMenuEvent_2363_0;
  gsi::Callback cb_customEvent_1217_0;
  gsi::Callback cb_disconnectNotify_2394_0;
  gsi::Callback cb_dragEnterEvent_2109_0;
  gsi::Callback cb_dragLeaveEvent_2092_0;
  gsi::Callback cb_dragMoveEvent_2006_0;
  gsi::Callback cb_dropEvent_1622_0;
  gsi::Callback cb_enterEvent_1217_0;
  gsi::Callback cb_event_1217_0;
  gsi::Callback cb_focusInEvent_1729_0;
  gsi::Callback cb_focusNextPrevChild_864_0;
  gsi::Callback cb_focusOutEvent_1729_0;
  gsi::Callback cb_hideEvent_1595_0;
  gsi::Callback cb_initPainter_c1426_0;
  gsi::Callback cb_inputMethodEvent_2354_0;
  gsi::Callback cb_keyPressEvent_1514_0;
  gsi::Callback cb_keyReleaseEvent_1514_0;
  gsi::Callback cb_leaveEvent_1217_0;
  gsi::Callback cb_metric_c3445_0;
  gsi::Callback cb_mouseDoubleClickEvent_1738_0;
  gsi::Callback cb_mouseMoveEvent_1738_0;
  gsi::Callback cb_mousePressEvent_1738_0;
  gsi::Callback cb_mouseReleaseEvent_1738_0;
  gsi::Callback cb_moveEvent_1624_0;
  gsi::Callback cb_nativeEvent_4678_0;
  gsi::Callback cb_paintEvent_1725_0;
  gsi::Callback cb_redirected_c1225_0;
  gsi::Callback cb_resizeEvent_1843_0;
  gsi::Callback cb_sharedPainter_c0_0;
  gsi::Callback cb_showEvent_1634_0;
  gsi::Callback cb_tabletEvent_1821_0;
  gsi::Callback cb_timerEvent_1730_0;
  gsi::Callback cb_wheelEvent_1718_0;
};

QMainWindow_Adaptor::~QMainWindow_Adaptor() { }

//  Constructor QMainWindow::QMainWindow(QWidget *parent, QFlags<Qt::WindowType> flags) (adaptor class)

static void _init_ctor_QMainWindow_Adaptor_3702 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("parent", true, "0");
  decl->add_arg<QWidget * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("flags", true, "0");
  decl->add_arg<QFlags<Qt::WindowType> > (argspec_1);
  decl->set_return_new<QMainWindow_Adaptor> ();
}

static void _call_ctor_QMainWindow_Adaptor_3702 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QWidget *arg1 = args ? gsi::arg_reader<QWidget * >() (args, heap) : gsi::arg_maker<QWidget * >() (0, heap);
  QFlags<Qt::WindowType> arg2 = args ? gsi::arg_reader<QFlags<Qt::WindowType> >() (args, heap) : gsi::arg_maker<QFlags<Qt::WindowType> >() (0, heap);
  ret.write<QMainWindow_Adaptor *> (new QMainWindow_Adaptor (arg1, arg2));
}


// void QMainWindow::actionEvent(QActionEvent *)

static void _init_cbs_actionEvent_1823_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QActionEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_actionEvent_1823_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QActionEvent *arg1 = args.read<QActionEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_actionEvent_1823_0 (arg1);
}

static void _set_callback_cbs_actionEvent_1823_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_actionEvent_1823_0 = cb;
}


// void QMainWindow::changeEvent(QEvent *)

static void _init_cbs_changeEvent_1217_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_changeEvent_1217_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QEvent *arg1 = args.read<QEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_changeEvent_1217_0 (arg1);
}

static void _set_callback_cbs_changeEvent_1217_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_changeEvent_1217_0 = cb;
}


// void QMainWindow::childEvent(QChildEvent *)

static void _init_cbs_childEvent_1701_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QChildEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_childEvent_1701_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QChildEvent *arg1 = args.read<QChildEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_childEvent_1701_0 (arg1);
}

static void _set_callback_cbs_childEvent_1701_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_childEvent_1701_0 = cb;
}


// void QMainWindow::closeEvent(QCloseEvent *)

static void _init_cbs_closeEvent_1719_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QCloseEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_closeEvent_1719_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QCloseEvent *arg1 = args.read<QCloseEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_closeEvent_1719_0 (arg1);
}

static void _set_callback_cbs_closeEvent_1719_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_closeEvent_1719_0 = cb;
}


// void QMainWindow::contextMenuEvent(QContextMenuEvent *event)

static void _init_cbs_contextMenuEvent_2363_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("event");
  decl->add_arg<QContextMenuEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_contextMenuEvent_2363_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QContextMenuEvent *arg1 = args.read<QContextMenuEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_contextMenuEvent_2363_0 (arg1);
}

static void _set_callback_cbs_contextMenuEvent_2363_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_contextMenuEvent_2363_0 = cb;
}


// exposed void QMainWindow::create(WId, bool initializeWindow, bool destroyOldWindow)

static void _init_fp_create_2208 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1", true, "0");
  decl->add_arg<const qt_gsi::Converter<WId>::target_type & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("initializeWindow", true, "true");
  decl->add_arg<bool > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("destroyOldWindow", true, "true");
  decl->add_arg<bool > (argspec_2);
  decl->set_return<void > ();
}

static void _call_fp_create_2208 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<WId>::target_type & arg1 = args ? gsi::arg_reader<const qt_gsi::Converter<WId>::target_type & >() (args, heap) : gsi::arg_maker<const qt_gsi::Converter<WId>::target_type & >() (qt_gsi::CppToQtReadAdaptor<WId>(heap, 0), heap);
  bool arg2 = args ? gsi::arg_reader<bool >() (args, heap) : gsi::arg_maker<bool >() (true, heap);
  bool arg3 = args ? gsi::arg_reader<bool >() (args, heap) : gsi::arg_maker<bool >() (true, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->fp_QMainWindow_create_2208 (arg1, arg2, arg3);
}


// QMenu *QMainWindow::createPopupMenu()

static void _init_cbs_createPopupMenu_0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QMenu * > ();
}

static void _call_cbs_createPopupMenu_0_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QMenu * > ((QMenu *)((QMainWindow_Adaptor *)cls)->cbs_createPopupMenu_0_0 ());
}

static void _set_callback_cbs_createPopupMenu_0_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_createPopupMenu_0_0 = cb;
}


// emitter void QMainWindow::customContextMenuRequested(const QPoint &pos)

static void _init_emitter_customContextMenuRequested_1916 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("pos");
  decl->add_arg<const QPoint & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_emitter_customContextMenuRequested_1916 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs & /*ret*/) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QPoint &arg1 = gsi::arg_reader<const QPoint & >() (args, heap);
  ((QMainWindow_Adaptor *)cls)->emitter_QMainWindow_customContextMenuRequested_1916 (arg1);
}


// void QMainWindow::customEvent(QEvent *)

static void _init_cbs_customEvent_1217_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_customEvent_1217_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QEvent *arg1 = args.read<QEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_customEvent_1217_0 (arg1);
}

static void _set_callback_cbs_customEvent_1217_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_customEvent_1217_0 = cb;
}


// exposed void QMainWindow::destroy(bool destroyWindow, bool destroySubWindows)

static void _init_fp_destroy_1620 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("destroyWindow", true, "true");
  decl->add_arg<bool > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("destroySubWindows", true, "true");
  decl->add_arg<bool > (argspec_1);
  decl->set_return<void > ();
}

static void _call_fp_destroy_1620 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  bool arg1 = args ? gsi::arg_reader<bool >() (args, heap) : gsi::arg_maker<bool >() (true, heap);
  bool arg2 = args ? gsi::arg_reader<bool >() (args, heap) : gsi::arg_maker<bool >() (true, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->fp_QMainWindow_destroy_1620 (arg1, arg2);
}


// emitter void QMainWindow::destroyed(QObject *)

static void _init_emitter_destroyed_1302 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1", true, "0");
  decl->add_arg<QObject * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_emitter_destroyed_1302 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs & /*ret*/) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QObject *arg1 = args ? gsi::arg_reader<QObject * >() (args, heap) : gsi::arg_maker<QObject * >() (0, heap);
  ((QMainWindow_Adaptor *)cls)->emitter_QMainWindow_destroyed_1302 (arg1);
}


// void QMainWindow::disconnectNotify(const QMetaMethod &signal)

static void _init_cbs_disconnectNotify_2394_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("signal");
  decl->add_arg<const QMetaMethod & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_disconnectNotify_2394_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QMetaMethod &arg1 = args.read<const QMetaMethod & > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_disconnectNotify_2394_0 (arg1);
}

static void _set_callback_cbs_disconnectNotify_2394_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_disconnectNotify_2394_0 = cb;
}


// void QMainWindow::dragEnterEvent(QDragEnterEvent *)

static void _init_cbs_dragEnterEvent_2109_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QDragEnterEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_dragEnterEvent_2109_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QDragEnterEvent *arg1 = args.read<QDragEnterEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_dragEnterEvent_2109_0 (arg1);
}

static void _set_callback_cbs_dragEnterEvent_2109_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_dragEnterEvent_2109_0 = cb;
}


// void QMainWindow::dragLeaveEvent(QDragLeaveEvent *)

static void _init_cbs_dragLeaveEvent_2092_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QDragLeaveEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_dragLeaveEvent_2092_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QDragLeaveEvent *arg1 = args.read<QDragLeaveEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_dragLeaveEvent_2092_0 (arg1);
}

static void _set_callback_cbs_dragLeaveEvent_2092_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_dragLeaveEvent_2092_0 = cb;
}


// void QMainWindow::dragMoveEvent(QDragMoveEvent *)

static void _init_cbs_dragMoveEvent_2006_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QDragMoveEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_dragMoveEvent_2006_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QDragMoveEvent *arg1 = args.read<QDragMoveEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_dragMoveEvent_2006_0 (arg1);
}

static void _set_callback_cbs_dragMoveEvent_2006_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_dragMoveEvent_2006_0 = cb;
}


// void QMainWindow::dropEvent(QDropEvent *)

static void _init_cbs_dropEvent_1622_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QDropEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_dropEvent_1622_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QDropEvent *arg1 = args.read<QDropEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_dropEvent_1622_0 (arg1);
}

static void _set_callback_cbs_dropEvent_1622_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_dropEvent_1622_0 = cb;
}


// void QMainWindow::enterEvent(QEvent *)

static void _init_cbs_enterEvent_1217_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_enterEvent_1217_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QEvent *arg1 = args.read<QEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_enterEvent_1217_0 (arg1);
}

static void _set_callback_cbs_enterEvent_1217_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_enterEvent_1217_0 = cb;
}


// bool QMainWindow::event(QEvent *event)

static void _init_cbs_event_1217_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("event");
  decl->add_arg<QEvent * > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_cbs_event_1217_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QEvent *arg1 = args.read<QEvent * > (heap);
  ret.write<bool > ((bool)((QMainWindow_Adaptor *)cls)->cbs_event_1217_0 (arg1));
}

static void _set_callback_cbs_event_1217_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_event_1217_0 = cb;
}


// bool QMainWindow::eventFilter(QObject *, QEvent *)

static void _init_cbs_eventFilter_2411_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QObject * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("arg2");
  decl->add_arg<QEvent * > (argspec_1);
  decl->set_return<bool > ();
}

static void _call_cbs_eventFilter_2411_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QObject *arg1 = args.read<QObject * > (heap);
  QEvent *arg2 = args.read<QEvent * > (heap);
  ret.write<bool > ((bool)((QMainWindow_Adaptor *)cls)->cbs_eventFilter_2411_0 (arg1, arg2));
}

static void _set_callback_cbs_eventFilter_2411_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_eventFilter_2411_0 = cb;
}


// void QMainWindow::focusInEvent(QFocusEvent *)

static void _init_cbs_focusInEvent_1729_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QFocusEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_focusInEvent_1729_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QFocusEvent *arg1 = args.read<QFocusEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_focusInEvent_1729_0 (arg1);
}

static void _set_callback_cbs_focusInEvent_1729_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_focusInEvent_1729_0 = cb;
}


// exposed bool QMainWindow::focusNextChild()

static void _init_fp_focusNextChild_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_fp_focusNextChild_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QMainWindow_Adaptor *)cls)->fp_QMainWindow_focusNextChild_0 ());
}


// bool QMainWindow::focusNextPrevChild(bool next)

static void _init_cbs_focusNextPrevChild_864_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("next");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_cbs_focusNextPrevChild_864_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  bool arg1 = args.read<bool > (heap);
  ret.write<bool > ((bool)((QMainWindow_Adaptor *)cls)->cbs_focusNextPrevChild_864_0 (arg1));
}

static void _set_callback_cbs_focusNextPrevChild_864_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_focusNextPrevChild_864_0 = cb;
}


// void QMainWindow::focusOutEvent(QFocusEvent *)

static void _init_cbs_focusOutEvent_1729_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QFocusEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_focusOutEvent_1729_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QFocusEvent *arg1 = args.read<QFocusEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_focusOutEvent_1729_0 (arg1);
}

static void _set_callback_cbs_focusOutEvent_1729_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_focusOutEvent_1729_0 = cb;
}


// exposed bool QMainWindow::focusPreviousChild()

static void _init_fp_focusPreviousChild_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_fp_focusPreviousChild_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QMainWindow_Adaptor *)cls)->fp_QMainWindow_focusPreviousChild_0 ());
}


// bool QMainWindow::hasHeightForWidth()

static void _init_cbs_hasHeightForWidth_c0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_cbs_hasHeightForWidth_c0_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QMainWindow_Adaptor *)cls)->cbs_hasHeightForWidth_c0_0 ());
}

static void _set_callback_cbs_hasHeightForWidth_c0_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_hasHeightForWidth_c0_0 = cb;
}


// int QMainWindow::heightForWidth(int)

static void _init_cbs_heightForWidth_c767_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<int > (argspec_0);
  decl->set_return<int > ();
}

static void _call_cbs_heightForWidth_c767_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  int arg1 = args.read<int > (heap);
  ret.write<int > ((int)((QMainWindow_Adaptor *)cls)->cbs_heightForWidth_c767_0 (arg1));
}

static void _set_callback_cbs_heightForWidth_c767_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_heightForWidth_c767_0 = cb;
}


// void QMainWindow::hideEvent(QHideEvent *)

static void _init_cbs_hideEvent_1595_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QHideEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_hideEvent_1595_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QHideEvent *arg1 = args.read<QHideEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_hideEvent_1595_0 (arg1);
}

static void _set_callback_cbs_hideEvent_1595_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_hideEvent_1595_0 = cb;
}


// emitter void QMainWindow::iconSizeChanged(const QSize &iconSize)

static void _init_emitter_iconSizeChanged_1805 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("iconSize");
  decl->add_arg<const QSize & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_emitter_iconSizeChanged_1805 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs & /*ret*/) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QSize &arg1 = gsi::arg_reader<const QSize & >() (args, heap);
  ((QMainWindow_Adaptor *)cls)->emitter_QMainWindow_iconSizeChanged_1805 (arg1);
}


// void QMainWindow::initPainter(QPainter *painter)

static void _init_cbs_initPainter_c1426_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("painter");
  decl->add_arg<QPainter * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_initPainter_c1426_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QPainter *arg1 = args.read<QPainter * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_initPainter_c1426_0 (arg1);
}

static void _set_callback_cbs_initPainter_c1426_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_initPainter_c1426_0 = cb;
}


// void QMainWindow::inputMethodEvent(QInputMethodEvent *)

static void _init_cbs_inputMethodEvent_2354_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QInputMethodEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_inputMethodEvent_2354_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QInputMethodEvent *arg1 = args.read<QInputMethodEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_inputMethodEvent_2354_0 (arg1);
}

static void _set_callback_cbs_inputMethodEvent_2354_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_inputMethodEvent_2354_0 = cb;
}


// QVariant QMainWindow::inputMethodQuery(Qt::InputMethodQuery)

static void _init_cbs_inputMethodQuery_c2420_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<const qt_gsi::Converter<Qt::InputMethodQuery>::target_type & > (argspec_0);
  decl->set_return<QVariant > ();
}

static void _call_cbs_inputMethodQuery_c2420_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<Qt::InputMethodQuery>::target_type & arg1 = args.read<const qt_gsi::Converter<Qt::InputMethodQuery>::target_type & > (heap);
  ret.write<QVariant > ((QVariant)((QMainWindow_Adaptor *)cls)->cbs_inputMethodQuery_c2420_0 (arg1));
}

static void _set_callback_cbs_inputMethodQuery_c2420_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_inputMethodQuery_c2420_0 = cb;
}


// exposed bool QMainWindow::isSignalConnected(const QMetaMethod &signal)

static void _init_fp_isSignalConnected_c2394 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("signal");
  decl->add_arg<const QMetaMethod & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_fp_isSignalConnected_c2394 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QMetaMethod &arg1 = gsi::arg_reader<const QMetaMethod & >() (args, heap);
  ret.write<bool > ((bool)((QMainWindow_Adaptor *)cls)->fp_QMainWindow_isSignalConnected_c2394 (arg1));
}


// void QMainWindow::keyPressEvent(QKeyEvent *)

static void _init_cbs_keyPressEvent_1514_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QKeyEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_keyPressEvent_1514_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QKeyEvent *arg1 = args.read<QKeyEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_keyPressEvent_1514_0 (arg1);
}

static void _set_callback_cbs_keyPressEvent_1514_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_keyPressEvent_1514_0 = cb;
}


// void QMainWindow::keyReleaseEvent(QKeyEvent *)

static void _init_cbs_keyReleaseEvent_1514_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QKeyEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_keyReleaseEvent_1514_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QKeyEvent *arg1 = args.read<QKeyEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_keyReleaseEvent_1514_0 (arg1);
}

static void _set_callback_cbs_keyReleaseEvent_1514_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_keyReleaseEvent_1514_0 = cb;
}


// void QMainWindow::leaveEvent(QEvent *)

static void _init_cbs_leaveEvent_1217_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_leaveEvent_1217_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QEvent *arg1 = args.read<QEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_leaveEvent_1217_0 (arg1);
}

static void _set_callback_cbs_leaveEvent_1217_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_leaveEvent_1217_0 = cb;
}


// int QMainWindow::metric(QPaintDevice::PaintDeviceMetric)

static void _init_cbs_metric_c3445_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<const qt_gsi::Converter<QPaintDevice::PaintDeviceMetric>::target_type & > (argspec_0);
  decl->set_return<int > ();
}

static void _call_cbs_metric_c3445_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<QPaintDevice::PaintDeviceMetric>::target_type & arg1 = args.read<const qt_gsi::Converter<QPaintDevice::PaintDeviceMetric>::target_type & > (heap);
  ret.write<int > ((int)((QMainWindow_Adaptor *)cls)->cbs_metric_c3445_0 (arg1));
}

static void _set_callback_cbs_metric_c3445_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_metric_c3445_0 = cb;
}


// QSize QMainWindow::minimumSizeHint()

static void _init_cbs_minimumSizeHint_c0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QSize > ();
}

static void _call_cbs_minimumSizeHint_c0_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QSize > ((QSize)((QMainWindow_Adaptor *)cls)->cbs_minimumSizeHint_c0_0 ());
}

static void _set_callback_cbs_minimumSizeHint_c0_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_minimumSizeHint_c0_0 = cb;
}


// void QMainWindow::mouseDoubleClickEvent(QMouseEvent *)

static void _init_cbs_mouseDoubleClickEvent_1738_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QMouseEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_mouseDoubleClickEvent_1738_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QMouseEvent *arg1 = args.read<QMouseEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_mouseDoubleClickEvent_1738_0 (arg1);
}

static void _set_callback_cbs_mouseDoubleClickEvent_1738_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_mouseDoubleClickEvent_1738_0 = cb;
}


// void QMainWindow::mouseMoveEvent(QMouseEvent *)

static void _init_cbs_mouseMoveEvent_1738_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QMouseEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_mouseMoveEvent_1738_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QMouseEvent *arg1 = args.read<QMouseEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_mouseMoveEvent_1738_0 (arg1);
}

static void _set_callback_cbs_mouseMoveEvent_1738_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_mouseMoveEvent_1738_0 = cb;
}


// void QMainWindow::mousePressEvent(QMouseEvent *)

static void _init_cbs_mousePressEvent_1738_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QMouseEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_mousePressEvent_1738_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QMouseEvent *arg1 = args.read<QMouseEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_mousePressEvent_1738_0 (arg1);
}

static void _set_callback_cbs_mousePressEvent_1738_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_mousePressEvent_1738_0 = cb;
}


// void QMainWindow::mouseReleaseEvent(QMouseEvent *)

static void _init_cbs_mouseReleaseEvent_1738_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QMouseEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_mouseReleaseEvent_1738_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QMouseEvent *arg1 = args.read<QMouseEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_mouseReleaseEvent_1738_0 (arg1);
}

static void _set_callback_cbs_mouseReleaseEvent_1738_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_mouseReleaseEvent_1738_0 = cb;
}


// void QMainWindow::moveEvent(QMoveEvent *)

static void _init_cbs_moveEvent_1624_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QMoveEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_moveEvent_1624_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QMoveEvent *arg1 = args.read<QMoveEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_moveEvent_1624_0 (arg1);
}

static void _set_callback_cbs_moveEvent_1624_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_moveEvent_1624_0 = cb;
}


// bool QMainWindow::nativeEvent(const QByteArray &eventType, void *message, long int *result)

static void _init_cbs_nativeEvent_4678_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("eventType");
  decl->add_arg<const QByteArray & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("message");
  decl->add_arg<void * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("result");
  decl->add_arg<long int * > (argspec_2);
  decl->set_return<bool > ();
}

static void _call_cbs_nativeEvent_4678_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QByteArray &arg1 = args.read<const QByteArray & > (heap);
  void *arg2 = args.read<void * > (heap);
  long int *arg3 = args.read<long int * > (heap);
  ret.write<bool > ((bool)((QMainWindow_Adaptor *)cls)->cbs_nativeEvent_4678_0 (arg1, arg2, arg3));
}

static void _set_callback_cbs_nativeEvent_4678_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_nativeEvent_4678_0 = cb;
}


// QPaintEngine *QMainWindow::paintEngine()

static void _init_cbs_paintEngine_c0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QPaintEngine * > ();
}

static void _call_cbs_paintEngine_c0_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QPaintEngine * > ((QPaintEngine *)((QMainWindow_Adaptor *)cls)->cbs_paintEngine_c0_0 ());
}

static void _set_callback_cbs_paintEngine_c0_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_paintEngine_c0_0 = cb;
}


// void QMainWindow::paintEvent(QPaintEvent *)

static void _init_cbs_paintEvent_1725_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QPaintEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_paintEvent_1725_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QPaintEvent *arg1 = args.read<QPaintEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_paintEvent_1725_0 (arg1);
}

static void _set_callback_cbs_paintEvent_1725_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_paintEvent_1725_0 = cb;
}


// exposed int QMainWindow::receivers(const char *signal)

static void _init_fp_receivers_c1731 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("signal");
  decl->add_arg<const char * > (argspec_0);
  decl->set_return<int > ();
}

static void _call_fp_receivers_c1731 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const char *arg1 = gsi::arg_reader<const char * >() (args, heap);
  ret.write<int > ((int)((QMainWindow_Adaptor *)cls)->fp_QMainWindow_receivers_c1731 (arg1));
}


// QPaintDevice *QMainWindow::redirected(QPoint *offset)

static void _init_cbs_redirected_c1225_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("offset");
  decl->add_arg<QPoint * > (argspec_0);
  decl->set_return<QPaintDevice * > ();
}

static void _call_cbs_redirected_c1225_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QPoint *arg1 = args.read<QPoint * > (heap);
  ret.write<QPaintDevice * > ((QPaintDevice *)((QMainWindow_Adaptor *)cls)->cbs_redirected_c1225_0 (arg1));
}

static void _set_callback_cbs_redirected_c1225_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_redirected_c1225_0 = cb;
}


// void QMainWindow::resizeEvent(QResizeEvent *)

static void _init_cbs_resizeEvent_1843_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QResizeEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_resizeEvent_1843_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QResizeEvent *arg1 = args.read<QResizeEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_resizeEvent_1843_0 (arg1);
}

static void _set_callback_cbs_resizeEvent_1843_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_resizeEvent_1843_0 = cb;
}


// exposed QObject *QMainWindow::sender()

static void _init_fp_sender_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QObject * > ();
}

static void _call_fp_sender_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QObject * > ((QObject *)((QMainWindow_Adaptor *)cls)->fp_QMainWindow_sender_c0 ());
}


// exposed int QMainWindow::senderSignalIndex()

static void _init_fp_senderSignalIndex_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_fp_senderSignalIndex_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<int > ((int)((QMainWindow_Adaptor *)cls)->fp_QMainWindow_senderSignalIndex_c0 ());
}


// void QMainWindow::setVisible(bool visible)

static void _init_cbs_setVisible_864_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("visible");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_setVisible_864_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  bool arg1 = args.read<bool > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_setVisible_864_0 (arg1);
}

static void _set_callback_cbs_setVisible_864_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_setVisible_864_0 = cb;
}


// QPainter *QMainWindow::sharedPainter()

static void _init_cbs_sharedPainter_c0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QPainter * > ();
}

static void _call_cbs_sharedPainter_c0_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QPainter * > ((QPainter *)((QMainWindow_Adaptor *)cls)->cbs_sharedPainter_c0_0 ());
}

static void _set_callback_cbs_sharedPainter_c0_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_sharedPainter_c0_0 = cb;
}


// void QMainWindow::showEvent(QShowEvent *)

static void _init_cbs_showEvent_1634_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QShowEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_showEvent_1634_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QShowEvent *arg1 = args.read<QShowEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_showEvent_1634_0 (arg1);
}

static void _set_callback_cbs_showEvent_1634_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_showEvent_1634_0 = cb;
}


// QSize QMainWindow::sizeHint()

static void _init_cbs_sizeHint_c0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QSize > ();
}

static void _call_cbs_sizeHint_c0_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QSize > ((QSize)((QMainWindow_Adaptor *)cls)->cbs_sizeHint_c0_0 ());
}

static void _set_callback_cbs_sizeHint_c0_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_sizeHint_c0_0 = cb;
}


// void QMainWindow::tabletEvent(QTabletEvent *)

static void _init_cbs_tabletEvent_1821_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QTabletEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_tabletEvent_1821_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QTabletEvent *arg1 = args.read<QTabletEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_tabletEvent_1821_0 (arg1);
}

static void _set_callback_cbs_tabletEvent_1821_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_tabletEvent_1821_0 = cb;
}


// void QMainWindow::timerEvent(QTimerEvent *)

static void _init_cbs_timerEvent_1730_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QTimerEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_timerEvent_1730_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QTimerEvent *arg1 = args.read<QTimerEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_timerEvent_1730_0 (arg1);
}

static void _set_callback_cbs_timerEvent_1730_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_timerEvent_1730_0 = cb;
}


// emitter void QMainWindow::toolButtonStyleChanged(Qt::ToolButtonStyle toolButtonStyle)

static void _init_emitter_toolButtonStyleChanged_2328 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("toolButtonStyle");
  decl->add_arg<const qt_gsi::Converter<Qt::ToolButtonStyle>::target_type & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_emitter_toolButtonStyleChanged_2328 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs & /*ret*/) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<Qt::ToolButtonStyle>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<Qt::ToolButtonStyle>::target_type & >() (args, heap);
  ((QMainWindow_Adaptor *)cls)->emitter_QMainWindow_toolButtonStyleChanged_2328 (arg1);
}


// exposed void QMainWindow::updateMicroFocus()

static void _init_fp_updateMicroFocus_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_fp_updateMicroFocus_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->fp_QMainWindow_updateMicroFocus_0 ();
}


// void QMainWindow::wheelEvent(QWheelEvent *)

static void _init_cbs_wheelEvent_1718_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QWheelEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_wheelEvent_1718_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QWheelEvent *arg1 = args.read<QWheelEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMainWindow_Adaptor *)cls)->cbs_wheelEvent_1718_0 (arg1);
}

static void _set_callback_cbs_wheelEvent_1718_0 (void *cls, const gsi::Callback &cb)
{
  ((QMainWindow_Adaptor *)cls)->cb_wheelEvent_1718_0 = cb;
}


// emitter void QMainWindow::windowIconChanged(const QIcon &icon)

static void _init_emitter_windowIconChanged_1787 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("icon");
  decl->add_arg<const QIcon & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_emitter_windowIconChanged_1787 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs & /*ret*/) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QIcon &arg1 = gsi::arg_reader<const QIcon & >() (args, heap);
  ((QMainWindow_Adaptor *)cls)->emitter_QMainWindow_windowIconChanged_1787 (arg1);
}


// emitter void QMainWindow::windowIconTextChanged(const QString &iconText)

static void _init_emitter_windowIconTextChanged_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("iconText");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_emitter_windowIconTextChanged_2025 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs & /*ret*/) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = gsi::arg_reader<const QString & >() (args, heap);
  ((QMainWindow_Adaptor *)cls)->emitter_QMainWindow_windowIconTextChanged_2025 (arg1);
}


// emitter void QMainWindow::windowTitleChanged(const QString &title)

static void _init_emitter_windowTitleChanged_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("title");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_emitter_windowTitleChanged_2025 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs & /*ret*/) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = gsi::arg_reader<const QString & >() (args, heap);
  ((QMainWindow_Adaptor *)cls)->emitter_QMainWindow_windowTitleChanged_2025 (arg1);
}


namespace gsi
{

gsi::Class<QMainWindow> &qtdecl_QMainWindow ();

static gsi::Methods methods_QMainWindow_Adaptor () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QMainWindow::QMainWindow(QWidget *parent, QFlags<Qt::WindowType> flags)\nThis method creates an object of class QMainWindow.", &_init_ctor_QMainWindow_Adaptor_3702, &_call_ctor_QMainWindow_Adaptor_3702);
  methods += new qt_gsi::GenericMethod ("*actionEvent", "@hide", false, &_init_cbs_actionEvent_1823_0, &_call_cbs_actionEvent_1823_0);
  methods += new qt_gsi::GenericMethod ("*actionEvent", "@brief Virtual method void QMainWindow::actionEvent(QActionEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_actionEvent_1823_0, &_call_cbs_actionEvent_1823_0, &_set_callback_cbs_actionEvent_1823_0);
  methods += new qt_gsi::GenericMethod ("*changeEvent", "@hide", false, &_init_cbs_changeEvent_1217_0, &_call_cbs_changeEvent_1217_0);
  methods += new qt_gsi::GenericMethod ("*changeEvent", "@brief Virtual method void QMainWindow::changeEvent(QEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_changeEvent_1217_0, &_call_cbs_changeEvent_1217_0, &_set_callback_cbs_changeEvent_1217_0);
  methods += new qt_gsi::GenericMethod ("*childEvent", "@hide", false, &_init_cbs_childEvent_1701_0, &_call_cbs_childEvent_1701_0);
  methods += new qt_gsi::GenericMethod ("*childEvent", "@brief Virtual method void QMainWindow::childEvent(QChildEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_childEvent_1701_0, &_call_cbs_childEvent_1701_0, &_set_callback_cbs_childEvent_1701_0);
  methods += new qt_gsi::GenericMethod ("*closeEvent", "@hide", false, &_init_cbs_closeEvent_1719_0, &_call_cbs_closeEvent_1719_0);
  methods += new qt_gsi::GenericMethod ("*closeEvent", "@brief Virtual method void QMainWindow::closeEvent(QCloseEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_closeEvent_1719_0, &_call_cbs_closeEvent_1719_0, &_set_callback_cbs_closeEvent_1719_0);
  methods += new qt_gsi::GenericMethod ("*contextMenuEvent", "@hide", false, &_init_cbs_contextMenuEvent_2363_0, &_call_cbs_contextMenuEvent_2363_0);
  methods += new qt_gsi::GenericMethod ("*contextMenuEvent", "@brief Virtual method void QMainWindow::contextMenuEvent(QContextMenuEvent *event)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_contextMenuEvent_2363_0, &_call_cbs_contextMenuEvent_2363_0, &_set_callback_cbs_contextMenuEvent_2363_0);
  methods += new qt_gsi::GenericMethod ("*qt_create", "@brief Method void QMainWindow::create(WId, bool initializeWindow, bool destroyOldWindow)\nThis method is protected and can only be called from inside a derived class.", false, &_init_fp_create_2208, &_call_fp_create_2208);
  methods += new qt_gsi::GenericMethod ("createPopupMenu", "@hide", false, &_init_cbs_createPopupMenu_0_0, &_call_cbs_createPopupMenu_0_0);
  methods += new qt_gsi::GenericMethod ("createPopupMenu", "@brief Virtual method QMenu *QMainWindow::createPopupMenu()\nThis method can be reimplemented in a derived class.", false, &_init_cbs_createPopupMenu_0_0, &_call_cbs_createPopupMenu_0_0, &_set_callback_cbs_createPopupMenu_0_0);
  methods += new qt_gsi::GenericMethod ("emit_customContextMenuRequested", "@brief Emitter for signal void QMainWindow::customContextMenuRequested(const QPoint &pos)\nCall this method to emit this signal.", false, &_init_emitter_customContextMenuRequested_1916, &_call_emitter_customContextMenuRequested_1916);
  methods += new qt_gsi::GenericMethod ("*customEvent", "@hide", false, &_init_cbs_customEvent_1217_0, &_call_cbs_customEvent_1217_0);
  methods += new qt_gsi::GenericMethod ("*customEvent", "@brief Virtual method void QMainWindow::customEvent(QEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_customEvent_1217_0, &_call_cbs_customEvent_1217_0, &_set_callback_cbs_customEvent_1217_0);
  methods += new qt_gsi::GenericMethod ("*qt_destroy", "@brief Method void QMainWindow::destroy(bool destroyWindow, bool destroySubWindows)\nThis method is protected and can only be called from inside a derived class.", false, &_init_fp_destroy_1620, &_call_fp_destroy_1620);
  methods += new qt_gsi::GenericMethod ("emit_destroyed", "@brief Emitter for signal void QMainWindow::destroyed(QObject *)\nCall this method to emit this signal.", false, &_init_emitter_destroyed_1302, &_call_emitter_destroyed_1302);
  methods += new qt_gsi::GenericMethod ("*disconnectNotify", "@hide", false, &_init_cbs_disconnectNotify_2394_0, &_call_cbs_disconnectNotify_2394_0);
  methods += new qt_gsi::GenericMethod ("*disconnectNotify", "@brief Virtual method void QMainWindow::disconnectNotify(const QMetaMethod &signal)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_disconnectNotify_2394_0, &_call_cbs_disconnectNotify_2394_0, &_set_callback_cbs_disconnectNotify_2394_0);
  methods += new qt_gsi::GenericMethod ("*dragEnterEvent", "@hide", false, &_init_cbs_dragEnterEvent_2109_0, &_call_cbs_dragEnterEvent_2109_0);
  methods += new qt_gsi::GenericMethod ("*dragEnterEvent", "@brief Virtual method void QMainWindow::dragEnterEvent(QDragEnterEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_dragEnterEvent_2109_0, &_call_cbs_dragEnterEvent_2109_0, &_set_callback_cbs_dragEnterEvent_2109_0);
  methods += new qt_gsi::GenericMethod ("*dragLeaveEvent", "@hide", false, &_init_cbs_dragLeaveEvent_2092_0, &_call_cbs_dragLeaveEvent_2092_0);
  methods += new qt_gsi::GenericMethod ("*dragLeaveEvent", "@brief Virtual method void QMainWindow::dragLeaveEvent(QDragLeaveEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_dragLeaveEvent_2092_0, &_call_cbs_dragLeaveEvent_2092_0, &_set_callback_cbs_dragLeaveEvent_2092_0);
  methods += new qt_gsi::GenericMethod ("*dragMoveEvent", "@hide", false, &_init_cbs_dragMoveEvent_2006_0, &_call_cbs_dragMoveEvent_2006_0);
  methods += new qt_gsi::GenericMethod ("*dragMoveEvent", "@brief Virtual method void QMainWindow::dragMoveEvent(QDragMoveEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_dragMoveEvent_2006_0, &_call_cbs_dragMoveEvent_2006_0, &_set_callback_cbs_dragMoveEvent_2006_0);
  methods += new qt_gsi::GenericMethod ("*dropEvent", "@hide", false, &_init_cbs_dropEvent_1622_0, &_call_cbs_dropEvent_1622_0);
  methods += new qt_gsi::GenericMethod ("*dropEvent", "@brief Virtual method void QMainWindow::dropEvent(QDropEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_dropEvent_1622_0, &_call_cbs_dropEvent_1622_0, &_set_callback_cbs_dropEvent_1622_0);
  methods += new qt_gsi::GenericMethod ("*enterEvent", "@hide", false, &_init_cbs_enterEvent_1217_0, &_call_cbs_enterEvent_1217_0);
  methods += new qt_gsi::GenericMethod ("*enterEvent", "@brief Virtual method void QMainWindow::enterEvent(QEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_enterEvent_1217_0, &_call_cbs_enterEvent_1217_0, &_set_callback_cbs_enterEvent_1217_0);
  methods += new qt_gsi::GenericMethod ("*event", "@hide", false, &_init_cbs_event_1217_0, &_call_cbs_event_1217_0);
  methods += new qt_gsi::GenericMethod ("*event", "@brief Virtual method bool QMainWindow::event(QEvent *event)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_event_1217_0, &_call_cbs_event_1217_0, &_set_callback_cbs_event_1217_0);
  methods += new qt_gsi::GenericMethod ("eventFilter", "@hide", false, &_init_cbs_eventFilter_2411_0, &_call_cbs_eventFilter_2411_0);
  methods += new qt_gsi::GenericMethod ("eventFilter", "@brief Virtual method bool QMainWindow::eventFilter(QObject *, QEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_eventFilter_2411_0, &_call_cbs_eventFilter_2411_0, &_set_callback_cbs_eventFilter_2411_0);
  methods += new qt_gsi::GenericMethod ("*focusInEvent", "@hide", false, &_init_cbs_focusInEvent_1729_0, &_call_cbs_focusInEvent_1729_0);
  methods += new qt_gsi::GenericMethod ("*focusInEvent", "@brief Virtual method void QMainWindow::focusInEvent(QFocusEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_focusInEvent_1729_0, &_call_cbs_focusInEvent_1729_0, &_set_callback_cbs_focusInEvent_1729_0);
  methods += new qt_gsi::GenericMethod ("*focusNextChild", "@brief Method bool QMainWindow::focusNextChild()\nThis method is protected and can only be called from inside a derived class.", false, &_init_fp_focusNextChild_0, &_call_fp_focusNextChild_0);
  methods += new qt_gsi::GenericMethod ("*focusNextPrevChild", "@hide", false, &_init_cbs_focusNextPrevChild_864_0, &_call_cbs_focusNextPrevChild_864_0);
  methods += new qt_gsi::GenericMethod ("*focusNextPrevChild", "@brief Virtual method bool QMainWindow::focusNextPrevChild(bool next)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_focusNextPrevChild_864_0, &_call_cbs_focusNextPrevChild_864_0, &_set_callback_cbs_focusNextPrevChild_864_0);
  methods += new qt_gsi::GenericMethod ("*focusOutEvent", "@hide", false, &_init_cbs_focusOutEvent_1729_0, &_call_cbs_focusOutEvent_1729_0);
  methods += new qt_gsi::GenericMethod ("*focusOutEvent", "@brief Virtual method void QMainWindow::focusOutEvent(QFocusEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_focusOutEvent_1729_0, &_call_cbs_focusOutEvent_1729_0, &_set_callback_cbs_focusOutEvent_1729_0);
  methods += new qt_gsi::GenericMethod ("*focusPreviousChild", "@brief Method bool QMainWindow::focusPreviousChild()\nThis method is protected and can only be called from inside a derived class.", false, &_init_fp_focusPreviousChild_0, &_call_fp_focusPreviousChild_0);
  methods += new qt_gsi::GenericMethod ("hasHeightForWidth", "@hide", true, &_init_cbs_hasHeightForWidth_c0_0, &_call_cbs_hasHeightForWidth_c0_0);
  methods += new qt_gsi::GenericMethod ("hasHeightForWidth", "@brief Virtual method bool QMainWindow::hasHeightForWidth()\nThis method can be reimplemented in a derived class.", true, &_init_cbs_hasHeightForWidth_c0_0, &_call_cbs_hasHeightForWidth_c0_0, &_set_callback_cbs_hasHeightForWidth_c0_0);
  methods += new qt_gsi::GenericMethod ("heightForWidth", "@hide", true, &_init_cbs_heightForWidth_c767_0, &_call_cbs_heightForWidth_c767_0);
  methods += new qt_gsi::GenericMethod ("heightForWidth", "@brief Virtual method int QMainWindow::heightForWidth(int)\nThis method can be reimplemented in a derived class.", true, &_init_cbs_heightForWidth_c767_0, &_call_cbs_heightForWidth_c767_0, &_set_callback_cbs_heightForWidth_c767_0);
  methods += new qt_gsi::GenericMethod ("*hideEvent", "@hide", false, &_init_cbs_hideEvent_1595_0, &_call_cbs_hideEvent_1595_0);
  methods += new qt_gsi::GenericMethod ("*hideEvent", "@brief Virtual method void QMainWindow::hideEvent(QHideEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_hideEvent_1595_0, &_call_cbs_hideEvent_1595_0, &_set_callback_cbs_hideEvent_1595_0);
  methods += new qt_gsi::GenericMethod ("emit_iconSizeChanged", "@brief Emitter for signal void QMainWindow::iconSizeChanged(const QSize &iconSize)\nCall this method to emit this signal.", false, &_init_emitter_iconSizeChanged_1805, &_call_emitter_iconSizeChanged_1805);
  methods += new qt_gsi::GenericMethod ("*initPainter", "@hide", true, &_init_cbs_initPainter_c1426_0, &_call_cbs_initPainter_c1426_0);
  methods += new qt_gsi::GenericMethod ("*initPainter", "@brief Virtual method void QMainWindow::initPainter(QPainter *painter)\nThis method can be reimplemented in a derived class.", true, &_init_cbs_initPainter_c1426_0, &_call_cbs_initPainter_c1426_0, &_set_callback_cbs_initPainter_c1426_0);
  methods += new qt_gsi::GenericMethod ("*inputMethodEvent", "@hide", false, &_init_cbs_inputMethodEvent_2354_0, &_call_cbs_inputMethodEvent_2354_0);
  methods += new qt_gsi::GenericMethod ("*inputMethodEvent", "@brief Virtual method void QMainWindow::inputMethodEvent(QInputMethodEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_inputMethodEvent_2354_0, &_call_cbs_inputMethodEvent_2354_0, &_set_callback_cbs_inputMethodEvent_2354_0);
  methods += new qt_gsi::GenericMethod ("inputMethodQuery", "@hide", true, &_init_cbs_inputMethodQuery_c2420_0, &_call_cbs_inputMethodQuery_c2420_0);
  methods += new qt_gsi::GenericMethod ("inputMethodQuery", "@brief Virtual method QVariant QMainWindow::inputMethodQuery(Qt::InputMethodQuery)\nThis method can be reimplemented in a derived class.", true, &_init_cbs_inputMethodQuery_c2420_0, &_call_cbs_inputMethodQuery_c2420_0, &_set_callback_cbs_inputMethodQuery_c2420_0);
  methods += new qt_gsi::GenericMethod ("*isSignalConnected", "@brief Method bool QMainWindow::isSignalConnected(const QMetaMethod &signal)\nThis method is protected and can only be called from inside a derived class.", true, &_init_fp_isSignalConnected_c2394, &_call_fp_isSignalConnected_c2394);
  methods += new qt_gsi::GenericMethod ("*keyPressEvent", "@hide", false, &_init_cbs_keyPressEvent_1514_0, &_call_cbs_keyPressEvent_1514_0);
  methods += new qt_gsi::GenericMethod ("*keyPressEvent", "@brief Virtual method void QMainWindow::keyPressEvent(QKeyEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_keyPressEvent_1514_0, &_call_cbs_keyPressEvent_1514_0, &_set_callback_cbs_keyPressEvent_1514_0);
  methods += new qt_gsi::GenericMethod ("*keyReleaseEvent", "@hide", false, &_init_cbs_keyReleaseEvent_1514_0, &_call_cbs_keyReleaseEvent_1514_0);
  methods += new qt_gsi::GenericMethod ("*keyReleaseEvent", "@brief Virtual method void QMainWindow::keyReleaseEvent(QKeyEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_keyReleaseEvent_1514_0, &_call_cbs_keyReleaseEvent_1514_0, &_set_callback_cbs_keyReleaseEvent_1514_0);
  methods += new qt_gsi::GenericMethod ("*leaveEvent", "@hide", false, &_init_cbs_leaveEvent_1217_0, &_call_cbs_leaveEvent_1217_0);
  methods += new qt_gsi::GenericMethod ("*leaveEvent", "@brief Virtual method void QMainWindow::leaveEvent(QEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_leaveEvent_1217_0, &_call_cbs_leaveEvent_1217_0, &_set_callback_cbs_leaveEvent_1217_0);
  methods += new qt_gsi::GenericMethod ("*metric", "@hide", true, &_init_cbs_metric_c3445_0, &_call_cbs_metric_c3445_0);
  methods += new qt_gsi::GenericMethod ("*metric", "@brief Virtual method int QMainWindow::metric(QPaintDevice::PaintDeviceMetric)\nThis method can be reimplemented in a derived class.", true, &_init_cbs_metric_c3445_0, &_call_cbs_metric_c3445_0, &_set_callback_cbs_metric_c3445_0);
  methods += new qt_gsi::GenericMethod ("minimumSizeHint", "@hide", true, &_init_cbs_minimumSizeHint_c0_0, &_call_cbs_minimumSizeHint_c0_0);
  methods += new qt_gsi::GenericMethod ("minimumSizeHint", "@brief Virtual method QSize QMainWindow::minimumSizeHint()\nThis method can be reimplemented in a derived class.", true, &_init_cbs_minimumSizeHint_c0_0, &_call_cbs_minimumSizeHint_c0_0, &_set_callback_cbs_minimumSizeHint_c0_0);
  methods += new qt_gsi::GenericMethod ("*mouseDoubleClickEvent", "@hide", false, &_init_cbs_mouseDoubleClickEvent_1738_0, &_call_cbs_mouseDoubleClickEvent_1738_0);
  methods += new qt_gsi::GenericMethod ("*mouseDoubleClickEvent", "@brief Virtual method void QMainWindow::mouseDoubleClickEvent(QMouseEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_mouseDoubleClickEvent_1738_0, &_call_cbs_mouseDoubleClickEvent_1738_0, &_set_callback_cbs_mouseDoubleClickEvent_1738_0);
  methods += new qt_gsi::GenericMethod ("*mouseMoveEvent", "@hide", false, &_init_cbs_mouseMoveEvent_1738_0, &_call_cbs_mouseMoveEvent_1738_0);
  methods += new qt_gsi::GenericMethod ("*mouseMoveEvent", "@brief Virtual method void QMainWindow::mouseMoveEvent(QMouseEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_mouseMoveEvent_1738_0, &_call_cbs_mouseMoveEvent_1738_0, &_set_callback_cbs_mouseMoveEvent_1738_0);
  methods += new qt_gsi::GenericMethod ("*mousePressEvent", "@hide", false, &_init_cbs_mousePressEvent_1738_0, &_call_cbs_mousePressEvent_1738_0);
  methods += new qt_gsi::GenericMethod ("*mousePressEvent", "@brief Virtual method void QMainWindow::mousePressEvent(QMouseEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_mousePressEvent_1738_0, &_call_cbs_mousePressEvent_1738_0, &_set_callback_cbs_mousePressEvent_1738_0);
  methods += new qt_gsi::GenericMethod ("*mouseReleaseEvent", "@hide", false, &_init_cbs_mouseReleaseEvent_1738_0, &_call_cbs_mouseReleaseEvent_1738_0);
  methods += new qt_gsi::GenericMethod ("*mouseReleaseEvent", "@brief Virtual method void QMainWindow::mouseReleaseEvent(QMouseEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_mouseReleaseEvent_1738_0, &_call_cbs_mouseReleaseEvent_1738_0, &_set_callback_cbs_mouseReleaseEvent_1738_0);
  methods += new qt_gsi::GenericMethod ("*moveEvent", "@hide", false, &_init_cbs_moveEvent_1624_0, &_call_cbs_moveEvent_1624_0);
  methods += new qt_gsi::GenericMethod ("*moveEvent", "@brief Virtual method void QMainWindow::moveEvent(QMoveEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_moveEvent_1624_0, &_call_cbs_moveEvent_1624_0, &_set_callback_cbs_moveEvent_1624_0);
  methods += new qt_gsi::GenericMethod ("*nativeEvent", "@hide", false, &_init_cbs_nativeEvent_4678_0, &_call_cbs_nativeEvent_4678_0);
  methods += new qt_gsi::GenericMethod ("*nativeEvent", "@brief Virtual method bool QMainWindow::nativeEvent(const QByteArray &eventType, void *message, long int *result)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_nativeEvent_4678_0, &_call_cbs_nativeEvent_4678_0, &_set_callback_cbs_nativeEvent_4678_0);
  methods += new qt_gsi::GenericMethod ("paintEngine", "@hide", true, &_init_cbs_paintEngine_c0_0, &_call_cbs_paintEngine_c0_0);
  methods += new qt_gsi::GenericMethod ("paintEngine", "@brief Virtual method QPaintEngine *QMainWindow::paintEngine()\nThis method can be reimplemented in a derived class.", true, &_init_cbs_paintEngine_c0_0, &_call_cbs_paintEngine_c0_0, &_set_callback_cbs_paintEngine_c0_0);
  methods += new qt_gsi::GenericMethod ("*paintEvent", "@hide", false, &_init_cbs_paintEvent_1725_0, &_call_cbs_paintEvent_1725_0);
  methods += new qt_gsi::GenericMethod ("*paintEvent", "@brief Virtual method void QMainWindow::paintEvent(QPaintEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_paintEvent_1725_0, &_call_cbs_paintEvent_1725_0, &_set_callback_cbs_paintEvent_1725_0);
  methods += new qt_gsi::GenericMethod ("*receivers", "@brief Method int QMainWindow::receivers(const char *signal)\nThis method is protected and can only be called from inside a derived class.", true, &_init_fp_receivers_c1731, &_call_fp_receivers_c1731);
  methods += new qt_gsi::GenericMethod ("*redirected", "@hide", true, &_init_cbs_redirected_c1225_0, &_call_cbs_redirected_c1225_0);
  methods += new qt_gsi::GenericMethod ("*redirected", "@brief Virtual method QPaintDevice *QMainWindow::redirected(QPoint *offset)\nThis method can be reimplemented in a derived class.", true, &_init_cbs_redirected_c1225_0, &_call_cbs_redirected_c1225_0, &_set_callback_cbs_redirected_c1225_0);
  methods += new qt_gsi::GenericMethod ("*resizeEvent", "@hide", false, &_init_cbs_resizeEvent_1843_0, &_call_cbs_resizeEvent_1843_0);
  methods += new qt_gsi::GenericMethod ("*resizeEvent", "@brief Virtual method void QMainWindow::resizeEvent(QResizeEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_resizeEvent_1843_0, &_call_cbs_resizeEvent_1843_0, &_set_callback_cbs_resizeEvent_1843_0);
  methods += new qt_gsi::GenericMethod ("*sender", "@brief Method QObject *QMainWindow::sender()\nThis method is protected and can only be called from inside a derived class.", true, &_init_fp_sender_c0, &_call_fp_sender_c0);
  methods += new qt_gsi::GenericMethod ("*senderSignalIndex", "@brief Method int QMainWindow::senderSignalIndex()\nThis method is protected and can only be called from inside a derived class.", true, &_init_fp_senderSignalIndex_c0, &_call_fp_senderSignalIndex_c0);
  methods += new qt_gsi::GenericMethod ("setVisible", "@hide", false, &_init_cbs_setVisible_864_0, &_call_cbs_setVisible_864_0);
  methods += new qt_gsi::GenericMethod ("setVisible", "@brief Virtual method void QMainWindow::setVisible(bool visible)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_setVisible_864_0, &_call_cbs_setVisible_864_0, &_set_callback_cbs_setVisible_864_0);
  methods += new qt_gsi::GenericMethod ("*sharedPainter", "@hide", true, &_init_cbs_sharedPainter_c0_0, &_call_cbs_sharedPainter_c0_0);
  methods += new qt_gsi::GenericMethod ("*sharedPainter", "@brief Virtual method QPainter *QMainWindow::sharedPainter()\nThis method can be reimplemented in a derived class.", true, &_init_cbs_sharedPainter_c0_0, &_call_cbs_sharedPainter_c0_0, &_set_callback_cbs_sharedPainter_c0_0);
  methods += new qt_gsi::GenericMethod ("*showEvent", "@hide", false, &_init_cbs_showEvent_1634_0, &_call_cbs_showEvent_1634_0);
  methods += new qt_gsi::GenericMethod ("*showEvent", "@brief Virtual method void QMainWindow::showEvent(QShowEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_showEvent_1634_0, &_call_cbs_showEvent_1634_0, &_set_callback_cbs_showEvent_1634_0);
  methods += new qt_gsi::GenericMethod ("sizeHint", "@hide", true, &_init_cbs_sizeHint_c0_0, &_call_cbs_sizeHint_c0_0);
  methods += new qt_gsi::GenericMethod ("sizeHint", "@brief Virtual method QSize QMainWindow::sizeHint()\nThis method can be reimplemented in a derived class.", true, &_init_cbs_sizeHint_c0_0, &_call_cbs_sizeHint_c0_0, &_set_callback_cbs_sizeHint_c0_0);
  methods += new qt_gsi::GenericMethod ("*tabletEvent", "@hide", false, &_init_cbs_tabletEvent_1821_0, &_call_cbs_tabletEvent_1821_0);
  methods += new qt_gsi::GenericMethod ("*tabletEvent", "@brief Virtual method void QMainWindow::tabletEvent(QTabletEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_tabletEvent_1821_0, &_call_cbs_tabletEvent_1821_0, &_set_callback_cbs_tabletEvent_1821_0);
  methods += new qt_gsi::GenericMethod ("*timerEvent", "@hide", false, &_init_cbs_timerEvent_1730_0, &_call_cbs_timerEvent_1730_0);
  methods += new qt_gsi::GenericMethod ("*timerEvent", "@brief Virtual method void QMainWindow::timerEvent(QTimerEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_timerEvent_1730_0, &_call_cbs_timerEvent_1730_0, &_set_callback_cbs_timerEvent_1730_0);
  methods += new qt_gsi::GenericMethod ("emit_toolButtonStyleChanged", "@brief Emitter for signal void QMainWindow::toolButtonStyleChanged(Qt::ToolButtonStyle toolButtonStyle)\nCall this method to emit this signal.", false, &_init_emitter_toolButtonStyleChanged_2328, &_call_emitter_toolButtonStyleChanged_2328);
  methods += new qt_gsi::GenericMethod ("*updateMicroFocus", "@brief Method void QMainWindow::updateMicroFocus()\nThis method is protected and can only be called from inside a derived class.", false, &_init_fp_updateMicroFocus_0, &_call_fp_updateMicroFocus_0);
  methods += new qt_gsi::GenericMethod ("*wheelEvent", "@hide", false, &_init_cbs_wheelEvent_1718_0, &_call_cbs_wheelEvent_1718_0);
  methods += new qt_gsi::GenericMethod ("*wheelEvent", "@brief Virtual method void QMainWindow::wheelEvent(QWheelEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_wheelEvent_1718_0, &_call_cbs_wheelEvent_1718_0, &_set_callback_cbs_wheelEvent_1718_0);
  methods += new qt_gsi::GenericMethod ("emit_windowIconChanged", "@brief Emitter for signal void QMainWindow::windowIconChanged(const QIcon &icon)\nCall this method to emit this signal.", false, &_init_emitter_windowIconChanged_1787, &_call_emitter_windowIconChanged_1787);
  methods += new qt_gsi::GenericMethod ("emit_windowIconTextChanged", "@brief Emitter for signal void QMainWindow::windowIconTextChanged(const QString &iconText)\nCall this method to emit this signal.", false, &_init_emitter_windowIconTextChanged_2025, &_call_emitter_windowIconTextChanged_2025);
  methods += new qt_gsi::GenericMethod ("emit_windowTitleChanged", "@brief Emitter for signal void QMainWindow::windowTitleChanged(const QString &title)\nCall this method to emit this signal.", false, &_init_emitter_windowTitleChanged_2025, &_call_emitter_windowTitleChanged_2025);
  return methods;
}

gsi::Class<QMainWindow_Adaptor> decl_QMainWindow_Adaptor (qtdecl_QMainWindow (), "QtWidgets", "QMainWindow",
  methods_QMainWindow_Adaptor (),
  "@qt\n@brief Binding of QMainWindow");

}


//  Implementation of the enum wrapper class for QMainWindow::DockOption
namespace qt_gsi
{

static gsi::Enum<QMainWindow::DockOption> decl_QMainWindow_DockOption_Enum ("QtWidgets", "QMainWindow_DockOption",
    gsi::enum_const ("AnimatedDocks", QMainWindow::AnimatedDocks, "@brief Enum constant QMainWindow::AnimatedDocks") +
    gsi::enum_const ("AllowNestedDocks", QMainWindow::AllowNestedDocks, "@brief Enum constant QMainWindow::AllowNestedDocks") +
    gsi::enum_const ("AllowTabbedDocks", QMainWindow::AllowTabbedDocks, "@brief Enum constant QMainWindow::AllowTabbedDocks") +
    gsi::enum_const ("ForceTabbedDocks", QMainWindow::ForceTabbedDocks, "@brief Enum constant QMainWindow::ForceTabbedDocks") +
    gsi::enum_const ("VerticalTabs", QMainWindow::VerticalTabs, "@brief Enum constant QMainWindow::VerticalTabs"),
  "@qt\n@brief This class represents the QMainWindow::DockOption enum");

static gsi::QFlagsClass<QMainWindow::DockOption > decl_QMainWindow_DockOption_Enums ("QtWidgets", "QMainWindow_QFlags_DockOption",
  "@qt\n@brief This class represents the QFlags<QMainWindow::DockOption> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<QMainWindow> inject_QMainWindow_DockOption_Enum_in_parent (decl_QMainWindow_DockOption_Enum.defs ());
static gsi::ClassExt<QMainWindow> decl_QMainWindow_DockOption_Enum_as_child (decl_QMainWindow_DockOption_Enum, "DockOption");
static gsi::ClassExt<QMainWindow> decl_QMainWindow_DockOption_Enums_as_child (decl_QMainWindow_DockOption_Enums, "QFlags_DockOption");

}

