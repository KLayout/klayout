
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2019 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQPixelFormat.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QPixelFormat>
#include "gsiQt.h"
#include "gsiQtGuiCommon.h"
#include "gsiDeclQtGuiTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// class QPixelFormat

//  Constructor QPixelFormat::QPixelFormat()


static void _init_ctor_QPixelFormat_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QPixelFormat> ();
}

static void _call_ctor_QPixelFormat_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QPixelFormat *> (new QPixelFormat ());
}


//  Constructor QPixelFormat::QPixelFormat(QPixelFormat::ColorModel colorModel, unsigned char firstSize, unsigned char secondSize, unsigned char thirdSize, unsigned char fourthSize, unsigned char fifthSize, unsigned char alphaSize, QPixelFormat::AlphaUsage alphaUsage, QPixelFormat::AlphaPosition alphaPosition, QPixelFormat::AlphaPremultiplied premultiplied, QPixelFormat::TypeInterpretation typeInterpretation, QPixelFormat::ByteOrder byteOrder, unsigned char subEnum)


static void _init_ctor_QPixelFormat_30295 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("colorModel");
  decl->add_arg<const qt_gsi::Converter<QPixelFormat::ColorModel>::target_type & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("firstSize");
  decl->add_arg<unsigned char > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("secondSize");
  decl->add_arg<unsigned char > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("thirdSize");
  decl->add_arg<unsigned char > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("fourthSize");
  decl->add_arg<unsigned char > (argspec_4);
  static gsi::ArgSpecBase argspec_5 ("fifthSize");
  decl->add_arg<unsigned char > (argspec_5);
  static gsi::ArgSpecBase argspec_6 ("alphaSize");
  decl->add_arg<unsigned char > (argspec_6);
  static gsi::ArgSpecBase argspec_7 ("alphaUsage");
  decl->add_arg<const qt_gsi::Converter<QPixelFormat::AlphaUsage>::target_type & > (argspec_7);
  static gsi::ArgSpecBase argspec_8 ("alphaPosition");
  decl->add_arg<const qt_gsi::Converter<QPixelFormat::AlphaPosition>::target_type & > (argspec_8);
  static gsi::ArgSpecBase argspec_9 ("premultiplied");
  decl->add_arg<const qt_gsi::Converter<QPixelFormat::AlphaPremultiplied>::target_type & > (argspec_9);
  static gsi::ArgSpecBase argspec_10 ("typeInterpretation");
  decl->add_arg<const qt_gsi::Converter<QPixelFormat::TypeInterpretation>::target_type & > (argspec_10);
  static gsi::ArgSpecBase argspec_11 ("byteOrder", true, "QPixelFormat::CurrentSystemEndian");
  decl->add_arg<const qt_gsi::Converter<QPixelFormat::ByteOrder>::target_type & > (argspec_11);
  static gsi::ArgSpecBase argspec_12 ("subEnum", true, "0");
  decl->add_arg<unsigned char > (argspec_12);
  decl->set_return_new<QPixelFormat> ();
}

static void _call_ctor_QPixelFormat_30295 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<QPixelFormat::ColorModel>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<QPixelFormat::ColorModel>::target_type & >() (args, heap);
  unsigned char arg2 = gsi::arg_reader<unsigned char >() (args, heap);
  unsigned char arg3 = gsi::arg_reader<unsigned char >() (args, heap);
  unsigned char arg4 = gsi::arg_reader<unsigned char >() (args, heap);
  unsigned char arg5 = gsi::arg_reader<unsigned char >() (args, heap);
  unsigned char arg6 = gsi::arg_reader<unsigned char >() (args, heap);
  unsigned char arg7 = gsi::arg_reader<unsigned char >() (args, heap);
  const qt_gsi::Converter<QPixelFormat::AlphaUsage>::target_type & arg8 = gsi::arg_reader<const qt_gsi::Converter<QPixelFormat::AlphaUsage>::target_type & >() (args, heap);
  const qt_gsi::Converter<QPixelFormat::AlphaPosition>::target_type & arg9 = gsi::arg_reader<const qt_gsi::Converter<QPixelFormat::AlphaPosition>::target_type & >() (args, heap);
  const qt_gsi::Converter<QPixelFormat::AlphaPremultiplied>::target_type & arg10 = gsi::arg_reader<const qt_gsi::Converter<QPixelFormat::AlphaPremultiplied>::target_type & >() (args, heap);
  const qt_gsi::Converter<QPixelFormat::TypeInterpretation>::target_type & arg11 = gsi::arg_reader<const qt_gsi::Converter<QPixelFormat::TypeInterpretation>::target_type & >() (args, heap);
  const qt_gsi::Converter<QPixelFormat::ByteOrder>::target_type & arg12 = args ? gsi::arg_reader<const qt_gsi::Converter<QPixelFormat::ByteOrder>::target_type & >() (args, heap) : gsi::arg_maker<const qt_gsi::Converter<QPixelFormat::ByteOrder>::target_type & >() (qt_gsi::CppToQtReadAdaptor<QPixelFormat::ByteOrder>(heap, QPixelFormat::CurrentSystemEndian), heap);
  unsigned char arg13 = args ? gsi::arg_reader<unsigned char >() (args, heap) : gsi::arg_maker<unsigned char >() (0, heap);
  ret.write<QPixelFormat *> (new QPixelFormat (qt_gsi::QtToCppAdaptor<QPixelFormat::ColorModel>(arg1).cref(), arg2, arg3, arg4, arg5, arg6, arg7, qt_gsi::QtToCppAdaptor<QPixelFormat::AlphaUsage>(arg8).cref(), qt_gsi::QtToCppAdaptor<QPixelFormat::AlphaPosition>(arg9).cref(), qt_gsi::QtToCppAdaptor<QPixelFormat::AlphaPremultiplied>(arg10).cref(), qt_gsi::QtToCppAdaptor<QPixelFormat::TypeInterpretation>(arg11).cref(), qt_gsi::QtToCppAdaptor<QPixelFormat::ByteOrder>(arg12).cref(), arg13));
}


// QPixelFormat::AlphaPosition QPixelFormat::alphaPosition()


static void _init_f_alphaPosition_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QPixelFormat::AlphaPosition>::target_type > ();
}

static void _call_f_alphaPosition_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qt_gsi::Converter<QPixelFormat::AlphaPosition>::target_type > ((qt_gsi::Converter<QPixelFormat::AlphaPosition>::target_type)qt_gsi::CppToQtAdaptor<QPixelFormat::AlphaPosition>(((QPixelFormat *)cls)->alphaPosition ()));
}


// unsigned char QPixelFormat::alphaSize()


static void _init_f_alphaSize_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<unsigned char > ();
}

static void _call_f_alphaSize_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<unsigned char > ((unsigned char)((QPixelFormat *)cls)->alphaSize ());
}


// QPixelFormat::AlphaUsage QPixelFormat::alphaUsage()


static void _init_f_alphaUsage_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QPixelFormat::AlphaUsage>::target_type > ();
}

static void _call_f_alphaUsage_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qt_gsi::Converter<QPixelFormat::AlphaUsage>::target_type > ((qt_gsi::Converter<QPixelFormat::AlphaUsage>::target_type)qt_gsi::CppToQtAdaptor<QPixelFormat::AlphaUsage>(((QPixelFormat *)cls)->alphaUsage ()));
}


// unsigned char QPixelFormat::bitsPerPixel()


static void _init_f_bitsPerPixel_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<unsigned char > ();
}

static void _call_f_bitsPerPixel_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<unsigned char > ((unsigned char)((QPixelFormat *)cls)->bitsPerPixel ());
}


// unsigned char QPixelFormat::blackSize()


static void _init_f_blackSize_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<unsigned char > ();
}

static void _call_f_blackSize_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<unsigned char > ((unsigned char)((QPixelFormat *)cls)->blackSize ());
}


// unsigned char QPixelFormat::blueSize()


static void _init_f_blueSize_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<unsigned char > ();
}

static void _call_f_blueSize_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<unsigned char > ((unsigned char)((QPixelFormat *)cls)->blueSize ());
}


// unsigned char QPixelFormat::brightnessSize()


static void _init_f_brightnessSize_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<unsigned char > ();
}

static void _call_f_brightnessSize_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<unsigned char > ((unsigned char)((QPixelFormat *)cls)->brightnessSize ());
}


// QPixelFormat::ByteOrder QPixelFormat::byteOrder()


static void _init_f_byteOrder_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QPixelFormat::ByteOrder>::target_type > ();
}

static void _call_f_byteOrder_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qt_gsi::Converter<QPixelFormat::ByteOrder>::target_type > ((qt_gsi::Converter<QPixelFormat::ByteOrder>::target_type)qt_gsi::CppToQtAdaptor<QPixelFormat::ByteOrder>(((QPixelFormat *)cls)->byteOrder ()));
}


// unsigned char QPixelFormat::channelCount()


static void _init_f_channelCount_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<unsigned char > ();
}

static void _call_f_channelCount_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<unsigned char > ((unsigned char)((QPixelFormat *)cls)->channelCount ());
}


// QPixelFormat::ColorModel QPixelFormat::colorModel()


static void _init_f_colorModel_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QPixelFormat::ColorModel>::target_type > ();
}

static void _call_f_colorModel_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qt_gsi::Converter<QPixelFormat::ColorModel>::target_type > ((qt_gsi::Converter<QPixelFormat::ColorModel>::target_type)qt_gsi::CppToQtAdaptor<QPixelFormat::ColorModel>(((QPixelFormat *)cls)->colorModel ()));
}


// unsigned char QPixelFormat::cyanSize()


static void _init_f_cyanSize_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<unsigned char > ();
}

static void _call_f_cyanSize_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<unsigned char > ((unsigned char)((QPixelFormat *)cls)->cyanSize ());
}


// unsigned char QPixelFormat::greenSize()


static void _init_f_greenSize_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<unsigned char > ();
}

static void _call_f_greenSize_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<unsigned char > ((unsigned char)((QPixelFormat *)cls)->greenSize ());
}


// unsigned char QPixelFormat::hueSize()


static void _init_f_hueSize_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<unsigned char > ();
}

static void _call_f_hueSize_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<unsigned char > ((unsigned char)((QPixelFormat *)cls)->hueSize ());
}


// unsigned char QPixelFormat::lightnessSize()


static void _init_f_lightnessSize_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<unsigned char > ();
}

static void _call_f_lightnessSize_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<unsigned char > ((unsigned char)((QPixelFormat *)cls)->lightnessSize ());
}


// unsigned char QPixelFormat::magentaSize()


static void _init_f_magentaSize_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<unsigned char > ();
}

static void _call_f_magentaSize_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<unsigned char > ((unsigned char)((QPixelFormat *)cls)->magentaSize ());
}


// QPixelFormat::AlphaPremultiplied QPixelFormat::premultiplied()


static void _init_f_premultiplied_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QPixelFormat::AlphaPremultiplied>::target_type > ();
}

static void _call_f_premultiplied_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qt_gsi::Converter<QPixelFormat::AlphaPremultiplied>::target_type > ((qt_gsi::Converter<QPixelFormat::AlphaPremultiplied>::target_type)qt_gsi::CppToQtAdaptor<QPixelFormat::AlphaPremultiplied>(((QPixelFormat *)cls)->premultiplied ()));
}


// unsigned char QPixelFormat::redSize()


static void _init_f_redSize_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<unsigned char > ();
}

static void _call_f_redSize_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<unsigned char > ((unsigned char)((QPixelFormat *)cls)->redSize ());
}


// unsigned char QPixelFormat::saturationSize()


static void _init_f_saturationSize_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<unsigned char > ();
}

static void _call_f_saturationSize_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<unsigned char > ((unsigned char)((QPixelFormat *)cls)->saturationSize ());
}


// unsigned char QPixelFormat::subEnum()


static void _init_f_subEnum_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<unsigned char > ();
}

static void _call_f_subEnum_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<unsigned char > ((unsigned char)((QPixelFormat *)cls)->subEnum ());
}


// QPixelFormat::TypeInterpretation QPixelFormat::typeInterpretation()


static void _init_f_typeInterpretation_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QPixelFormat::TypeInterpretation>::target_type > ();
}

static void _call_f_typeInterpretation_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qt_gsi::Converter<QPixelFormat::TypeInterpretation>::target_type > ((qt_gsi::Converter<QPixelFormat::TypeInterpretation>::target_type)qt_gsi::CppToQtAdaptor<QPixelFormat::TypeInterpretation>(((QPixelFormat *)cls)->typeInterpretation ()));
}


// unsigned char QPixelFormat::yellowSize()


static void _init_f_yellowSize_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<unsigned char > ();
}

static void _call_f_yellowSize_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<unsigned char > ((unsigned char)((QPixelFormat *)cls)->yellowSize ());
}


// QPixelFormat::YUVLayout QPixelFormat::yuvLayout()


static void _init_f_yuvLayout_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QPixelFormat::YUVLayout>::target_type > ();
}

static void _call_f_yuvLayout_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qt_gsi::Converter<QPixelFormat::YUVLayout>::target_type > ((qt_gsi::Converter<QPixelFormat::YUVLayout>::target_type)qt_gsi::CppToQtAdaptor<QPixelFormat::YUVLayout>(((QPixelFormat *)cls)->yuvLayout ()));
}



namespace gsi
{

static gsi::Methods methods_QPixelFormat () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QPixelFormat::QPixelFormat()\nThis method creates an object of class QPixelFormat.", &_init_ctor_QPixelFormat_0, &_call_ctor_QPixelFormat_0);
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QPixelFormat::QPixelFormat(QPixelFormat::ColorModel colorModel, unsigned char firstSize, unsigned char secondSize, unsigned char thirdSize, unsigned char fourthSize, unsigned char fifthSize, unsigned char alphaSize, QPixelFormat::AlphaUsage alphaUsage, QPixelFormat::AlphaPosition alphaPosition, QPixelFormat::AlphaPremultiplied premultiplied, QPixelFormat::TypeInterpretation typeInterpretation, QPixelFormat::ByteOrder byteOrder, unsigned char subEnum)\nThis method creates an object of class QPixelFormat.", &_init_ctor_QPixelFormat_30295, &_call_ctor_QPixelFormat_30295);
  methods += new qt_gsi::GenericMethod ("alphaPosition", "@brief Method QPixelFormat::AlphaPosition QPixelFormat::alphaPosition()\n", true, &_init_f_alphaPosition_c0, &_call_f_alphaPosition_c0);
  methods += new qt_gsi::GenericMethod ("alphaSize", "@brief Method unsigned char QPixelFormat::alphaSize()\n", true, &_init_f_alphaSize_c0, &_call_f_alphaSize_c0);
  methods += new qt_gsi::GenericMethod ("alphaUsage", "@brief Method QPixelFormat::AlphaUsage QPixelFormat::alphaUsage()\n", true, &_init_f_alphaUsage_c0, &_call_f_alphaUsage_c0);
  methods += new qt_gsi::GenericMethod ("bitsPerPixel", "@brief Method unsigned char QPixelFormat::bitsPerPixel()\n", true, &_init_f_bitsPerPixel_c0, &_call_f_bitsPerPixel_c0);
  methods += new qt_gsi::GenericMethod ("blackSize", "@brief Method unsigned char QPixelFormat::blackSize()\n", true, &_init_f_blackSize_c0, &_call_f_blackSize_c0);
  methods += new qt_gsi::GenericMethod ("blueSize", "@brief Method unsigned char QPixelFormat::blueSize()\n", true, &_init_f_blueSize_c0, &_call_f_blueSize_c0);
  methods += new qt_gsi::GenericMethod ("brightnessSize", "@brief Method unsigned char QPixelFormat::brightnessSize()\n", true, &_init_f_brightnessSize_c0, &_call_f_brightnessSize_c0);
  methods += new qt_gsi::GenericMethod ("byteOrder", "@brief Method QPixelFormat::ByteOrder QPixelFormat::byteOrder()\n", true, &_init_f_byteOrder_c0, &_call_f_byteOrder_c0);
  methods += new qt_gsi::GenericMethod ("channelCount", "@brief Method unsigned char QPixelFormat::channelCount()\n", true, &_init_f_channelCount_c0, &_call_f_channelCount_c0);
  methods += new qt_gsi::GenericMethod ("colorModel", "@brief Method QPixelFormat::ColorModel QPixelFormat::colorModel()\n", true, &_init_f_colorModel_c0, &_call_f_colorModel_c0);
  methods += new qt_gsi::GenericMethod ("cyanSize", "@brief Method unsigned char QPixelFormat::cyanSize()\n", true, &_init_f_cyanSize_c0, &_call_f_cyanSize_c0);
  methods += new qt_gsi::GenericMethod ("greenSize", "@brief Method unsigned char QPixelFormat::greenSize()\n", true, &_init_f_greenSize_c0, &_call_f_greenSize_c0);
  methods += new qt_gsi::GenericMethod ("hueSize", "@brief Method unsigned char QPixelFormat::hueSize()\n", true, &_init_f_hueSize_c0, &_call_f_hueSize_c0);
  methods += new qt_gsi::GenericMethod ("lightnessSize", "@brief Method unsigned char QPixelFormat::lightnessSize()\n", true, &_init_f_lightnessSize_c0, &_call_f_lightnessSize_c0);
  methods += new qt_gsi::GenericMethod ("magentaSize", "@brief Method unsigned char QPixelFormat::magentaSize()\n", true, &_init_f_magentaSize_c0, &_call_f_magentaSize_c0);
  methods += new qt_gsi::GenericMethod ("premultiplied", "@brief Method QPixelFormat::AlphaPremultiplied QPixelFormat::premultiplied()\n", true, &_init_f_premultiplied_c0, &_call_f_premultiplied_c0);
  methods += new qt_gsi::GenericMethod ("redSize", "@brief Method unsigned char QPixelFormat::redSize()\n", true, &_init_f_redSize_c0, &_call_f_redSize_c0);
  methods += new qt_gsi::GenericMethod ("saturationSize", "@brief Method unsigned char QPixelFormat::saturationSize()\n", true, &_init_f_saturationSize_c0, &_call_f_saturationSize_c0);
  methods += new qt_gsi::GenericMethod ("subEnum", "@brief Method unsigned char QPixelFormat::subEnum()\n", true, &_init_f_subEnum_c0, &_call_f_subEnum_c0);
  methods += new qt_gsi::GenericMethod ("typeInterpretation", "@brief Method QPixelFormat::TypeInterpretation QPixelFormat::typeInterpretation()\n", true, &_init_f_typeInterpretation_c0, &_call_f_typeInterpretation_c0);
  methods += new qt_gsi::GenericMethod ("yellowSize", "@brief Method unsigned char QPixelFormat::yellowSize()\n", true, &_init_f_yellowSize_c0, &_call_f_yellowSize_c0);
  methods += new qt_gsi::GenericMethod ("yuvLayout", "@brief Method QPixelFormat::YUVLayout QPixelFormat::yuvLayout()\n", true, &_init_f_yuvLayout_c0, &_call_f_yuvLayout_c0);
  return methods;
}

gsi::Class<QPixelFormat> decl_QPixelFormat ("QtGui", "QPixelFormat",
  methods_QPixelFormat (),
  "@qt\n@brief Binding of QPixelFormat");


GSI_QTGUI_PUBLIC gsi::Class<QPixelFormat> &qtdecl_QPixelFormat () { return decl_QPixelFormat; }

}


//  Implementation of the enum wrapper class for QPixelFormat::AlphaPosition
namespace qt_gsi
{

static gsi::Enum<QPixelFormat::AlphaPosition> decl_QPixelFormat_AlphaPosition_Enum ("QtGui", "QPixelFormat_AlphaPosition",
    gsi::enum_const ("AtBeginning", QPixelFormat::AtBeginning, "@brief Enum constant QPixelFormat::AtBeginning") +
    gsi::enum_const ("AtEnd", QPixelFormat::AtEnd, "@brief Enum constant QPixelFormat::AtEnd"),
  "@qt\n@brief This class represents the QPixelFormat::AlphaPosition enum");

static gsi::QFlagsClass<QPixelFormat::AlphaPosition > decl_QPixelFormat_AlphaPosition_Enums ("QtGui", "QPixelFormat_QFlags_AlphaPosition",
  "@qt\n@brief This class represents the QFlags<QPixelFormat::AlphaPosition> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<QPixelFormat> inject_QPixelFormat_AlphaPosition_Enum_in_parent (decl_QPixelFormat_AlphaPosition_Enum.defs ());
static gsi::ClassExt<QPixelFormat> decl_QPixelFormat_AlphaPosition_Enum_as_child (decl_QPixelFormat_AlphaPosition_Enum, "AlphaPosition");
static gsi::ClassExt<QPixelFormat> decl_QPixelFormat_AlphaPosition_Enums_as_child (decl_QPixelFormat_AlphaPosition_Enums, "QFlags_AlphaPosition");

}


//  Implementation of the enum wrapper class for QPixelFormat::AlphaPremultiplied
namespace qt_gsi
{

static gsi::Enum<QPixelFormat::AlphaPremultiplied> decl_QPixelFormat_AlphaPremultiplied_Enum ("QtGui", "QPixelFormat_AlphaPremultiplied",
    gsi::enum_const ("NotPremultiplied", QPixelFormat::NotPremultiplied, "@brief Enum constant QPixelFormat::NotPremultiplied") +
    gsi::enum_const ("Premultiplied", QPixelFormat::Premultiplied, "@brief Enum constant QPixelFormat::Premultiplied"),
  "@qt\n@brief This class represents the QPixelFormat::AlphaPremultiplied enum");

static gsi::QFlagsClass<QPixelFormat::AlphaPremultiplied > decl_QPixelFormat_AlphaPremultiplied_Enums ("QtGui", "QPixelFormat_QFlags_AlphaPremultiplied",
  "@qt\n@brief This class represents the QFlags<QPixelFormat::AlphaPremultiplied> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<QPixelFormat> inject_QPixelFormat_AlphaPremultiplied_Enum_in_parent (decl_QPixelFormat_AlphaPremultiplied_Enum.defs ());
static gsi::ClassExt<QPixelFormat> decl_QPixelFormat_AlphaPremultiplied_Enum_as_child (decl_QPixelFormat_AlphaPremultiplied_Enum, "AlphaPremultiplied");
static gsi::ClassExt<QPixelFormat> decl_QPixelFormat_AlphaPremultiplied_Enums_as_child (decl_QPixelFormat_AlphaPremultiplied_Enums, "QFlags_AlphaPremultiplied");

}


//  Implementation of the enum wrapper class for QPixelFormat::AlphaUsage
namespace qt_gsi
{

static gsi::Enum<QPixelFormat::AlphaUsage> decl_QPixelFormat_AlphaUsage_Enum ("QtGui", "QPixelFormat_AlphaUsage",
    gsi::enum_const ("UsesAlpha", QPixelFormat::UsesAlpha, "@brief Enum constant QPixelFormat::UsesAlpha") +
    gsi::enum_const ("IgnoresAlpha", QPixelFormat::IgnoresAlpha, "@brief Enum constant QPixelFormat::IgnoresAlpha"),
  "@qt\n@brief This class represents the QPixelFormat::AlphaUsage enum");

static gsi::QFlagsClass<QPixelFormat::AlphaUsage > decl_QPixelFormat_AlphaUsage_Enums ("QtGui", "QPixelFormat_QFlags_AlphaUsage",
  "@qt\n@brief This class represents the QFlags<QPixelFormat::AlphaUsage> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<QPixelFormat> inject_QPixelFormat_AlphaUsage_Enum_in_parent (decl_QPixelFormat_AlphaUsage_Enum.defs ());
static gsi::ClassExt<QPixelFormat> decl_QPixelFormat_AlphaUsage_Enum_as_child (decl_QPixelFormat_AlphaUsage_Enum, "AlphaUsage");
static gsi::ClassExt<QPixelFormat> decl_QPixelFormat_AlphaUsage_Enums_as_child (decl_QPixelFormat_AlphaUsage_Enums, "QFlags_AlphaUsage");

}


//  Implementation of the enum wrapper class for QPixelFormat::ByteOrder
namespace qt_gsi
{

static gsi::Enum<QPixelFormat::ByteOrder> decl_QPixelFormat_ByteOrder_Enum ("QtGui", "QPixelFormat_ByteOrder",
    gsi::enum_const ("LittleEndian", QPixelFormat::LittleEndian, "@brief Enum constant QPixelFormat::LittleEndian") +
    gsi::enum_const ("BigEndian", QPixelFormat::BigEndian, "@brief Enum constant QPixelFormat::BigEndian") +
    gsi::enum_const ("CurrentSystemEndian", QPixelFormat::CurrentSystemEndian, "@brief Enum constant QPixelFormat::CurrentSystemEndian"),
  "@qt\n@brief This class represents the QPixelFormat::ByteOrder enum");

static gsi::QFlagsClass<QPixelFormat::ByteOrder > decl_QPixelFormat_ByteOrder_Enums ("QtGui", "QPixelFormat_QFlags_ByteOrder",
  "@qt\n@brief This class represents the QFlags<QPixelFormat::ByteOrder> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<QPixelFormat> inject_QPixelFormat_ByteOrder_Enum_in_parent (decl_QPixelFormat_ByteOrder_Enum.defs ());
static gsi::ClassExt<QPixelFormat> decl_QPixelFormat_ByteOrder_Enum_as_child (decl_QPixelFormat_ByteOrder_Enum, "ByteOrder");
static gsi::ClassExt<QPixelFormat> decl_QPixelFormat_ByteOrder_Enums_as_child (decl_QPixelFormat_ByteOrder_Enums, "QFlags_ByteOrder");

}


//  Implementation of the enum wrapper class for QPixelFormat::ColorModel
namespace qt_gsi
{

static gsi::Enum<QPixelFormat::ColorModel> decl_QPixelFormat_ColorModel_Enum ("QtGui", "QPixelFormat_ColorModel",
    gsi::enum_const ("RGB", QPixelFormat::RGB, "@brief Enum constant QPixelFormat::RGB") +
    gsi::enum_const ("BGR", QPixelFormat::BGR, "@brief Enum constant QPixelFormat::BGR") +
    gsi::enum_const ("Indexed", QPixelFormat::Indexed, "@brief Enum constant QPixelFormat::Indexed") +
    gsi::enum_const ("Grayscale", QPixelFormat::Grayscale, "@brief Enum constant QPixelFormat::Grayscale") +
    gsi::enum_const ("CMYK", QPixelFormat::CMYK, "@brief Enum constant QPixelFormat::CMYK") +
    gsi::enum_const ("HSL", QPixelFormat::HSL, "@brief Enum constant QPixelFormat::HSL") +
    gsi::enum_const ("HSV", QPixelFormat::HSV, "@brief Enum constant QPixelFormat::HSV") +
    gsi::enum_const ("YUV", QPixelFormat::YUV, "@brief Enum constant QPixelFormat::YUV") +
    gsi::enum_const ("Alpha", QPixelFormat::Alpha, "@brief Enum constant QPixelFormat::Alpha"),
  "@qt\n@brief This class represents the QPixelFormat::ColorModel enum");

static gsi::QFlagsClass<QPixelFormat::ColorModel > decl_QPixelFormat_ColorModel_Enums ("QtGui", "QPixelFormat_QFlags_ColorModel",
  "@qt\n@brief This class represents the QFlags<QPixelFormat::ColorModel> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<QPixelFormat> inject_QPixelFormat_ColorModel_Enum_in_parent (decl_QPixelFormat_ColorModel_Enum.defs ());
static gsi::ClassExt<QPixelFormat> decl_QPixelFormat_ColorModel_Enum_as_child (decl_QPixelFormat_ColorModel_Enum, "ColorModel");
static gsi::ClassExt<QPixelFormat> decl_QPixelFormat_ColorModel_Enums_as_child (decl_QPixelFormat_ColorModel_Enums, "QFlags_ColorModel");

}


//  Implementation of the enum wrapper class for QPixelFormat::TypeInterpretation
namespace qt_gsi
{

static gsi::Enum<QPixelFormat::TypeInterpretation> decl_QPixelFormat_TypeInterpretation_Enum ("QtGui", "QPixelFormat_TypeInterpretation",
    gsi::enum_const ("UnsignedInteger", QPixelFormat::UnsignedInteger, "@brief Enum constant QPixelFormat::UnsignedInteger") +
    gsi::enum_const ("UnsignedShort", QPixelFormat::UnsignedShort, "@brief Enum constant QPixelFormat::UnsignedShort") +
    gsi::enum_const ("UnsignedByte", QPixelFormat::UnsignedByte, "@brief Enum constant QPixelFormat::UnsignedByte") +
    gsi::enum_const ("FloatingPoint", QPixelFormat::FloatingPoint, "@brief Enum constant QPixelFormat::FloatingPoint"),
  "@qt\n@brief This class represents the QPixelFormat::TypeInterpretation enum");

static gsi::QFlagsClass<QPixelFormat::TypeInterpretation > decl_QPixelFormat_TypeInterpretation_Enums ("QtGui", "QPixelFormat_QFlags_TypeInterpretation",
  "@qt\n@brief This class represents the QFlags<QPixelFormat::TypeInterpretation> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<QPixelFormat> inject_QPixelFormat_TypeInterpretation_Enum_in_parent (decl_QPixelFormat_TypeInterpretation_Enum.defs ());
static gsi::ClassExt<QPixelFormat> decl_QPixelFormat_TypeInterpretation_Enum_as_child (decl_QPixelFormat_TypeInterpretation_Enum, "TypeInterpretation");
static gsi::ClassExt<QPixelFormat> decl_QPixelFormat_TypeInterpretation_Enums_as_child (decl_QPixelFormat_TypeInterpretation_Enums, "QFlags_TypeInterpretation");

}


//  Implementation of the enum wrapper class for QPixelFormat::YUVLayout
namespace qt_gsi
{

static gsi::Enum<QPixelFormat::YUVLayout> decl_QPixelFormat_YUVLayout_Enum ("QtGui", "QPixelFormat_YUVLayout",
    gsi::enum_const ("YUV444", QPixelFormat::YUV444, "@brief Enum constant QPixelFormat::YUV444") +
    gsi::enum_const ("YUV422", QPixelFormat::YUV422, "@brief Enum constant QPixelFormat::YUV422") +
    gsi::enum_const ("YUV411", QPixelFormat::YUV411, "@brief Enum constant QPixelFormat::YUV411") +
    gsi::enum_const ("YUV420P", QPixelFormat::YUV420P, "@brief Enum constant QPixelFormat::YUV420P") +
    gsi::enum_const ("YUV420SP", QPixelFormat::YUV420SP, "@brief Enum constant QPixelFormat::YUV420SP") +
    gsi::enum_const ("YV12", QPixelFormat::YV12, "@brief Enum constant QPixelFormat::YV12") +
    gsi::enum_const ("UYVY", QPixelFormat::UYVY, "@brief Enum constant QPixelFormat::UYVY") +
    gsi::enum_const ("YUYV", QPixelFormat::YUYV, "@brief Enum constant QPixelFormat::YUYV") +
    gsi::enum_const ("NV12", QPixelFormat::NV12, "@brief Enum constant QPixelFormat::NV12") +
    gsi::enum_const ("NV21", QPixelFormat::NV21, "@brief Enum constant QPixelFormat::NV21") +
    gsi::enum_const ("IMC1", QPixelFormat::IMC1, "@brief Enum constant QPixelFormat::IMC1") +
    gsi::enum_const ("IMC2", QPixelFormat::IMC2, "@brief Enum constant QPixelFormat::IMC2") +
    gsi::enum_const ("IMC3", QPixelFormat::IMC3, "@brief Enum constant QPixelFormat::IMC3") +
    gsi::enum_const ("IMC4", QPixelFormat::IMC4, "@brief Enum constant QPixelFormat::IMC4") +
    gsi::enum_const ("Y8", QPixelFormat::Y8, "@brief Enum constant QPixelFormat::Y8") +
    gsi::enum_const ("Y16", QPixelFormat::Y16, "@brief Enum constant QPixelFormat::Y16"),
  "@qt\n@brief This class represents the QPixelFormat::YUVLayout enum");

static gsi::QFlagsClass<QPixelFormat::YUVLayout > decl_QPixelFormat_YUVLayout_Enums ("QtGui", "QPixelFormat_QFlags_YUVLayout",
  "@qt\n@brief This class represents the QFlags<QPixelFormat::YUVLayout> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<QPixelFormat> inject_QPixelFormat_YUVLayout_Enum_in_parent (decl_QPixelFormat_YUVLayout_Enum.defs ());
static gsi::ClassExt<QPixelFormat> decl_QPixelFormat_YUVLayout_Enum_as_child (decl_QPixelFormat_YUVLayout_Enum, "YUVLayout");
static gsi::ClassExt<QPixelFormat> decl_QPixelFormat_YUVLayout_Enums_as_child (decl_QPixelFormat_YUVLayout_Enums, "QFlags_YUVLayout");

}

