
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2022 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/*
  External declarations for for Qt bindings

  DO NOT EDIT THIS FILE. 
  This file has been created automatically
*/

#if !defined(HDR_gsiQtCoreExternals)
#define HDR_gsiQtCoreExternals

#include "gsiClass.h"
#include "gsiQtCoreCommon.h"

class QAbstractAnimation;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QAbstractAnimation> &qtdecl_QAbstractAnimation (); }

class QAbstractEventDispatcher;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QAbstractEventDispatcher> &qtdecl_QAbstractEventDispatcher (); }

class QAbstractItemModel;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QAbstractItemModel> &qtdecl_QAbstractItemModel (); }

class QAbstractListModel;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QAbstractListModel> &qtdecl_QAbstractListModel (); }

class QAbstractNativeEventFilter;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QAbstractNativeEventFilter> &qtdecl_QAbstractNativeEventFilter (); }

class QAbstractProxyModel;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QAbstractProxyModel> &qtdecl_QAbstractProxyModel (); }

class QAbstractState;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QAbstractState> &qtdecl_QAbstractState (); }

class QAbstractTableModel;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QAbstractTableModel> &qtdecl_QAbstractTableModel (); }

class QAbstractTransition;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QAbstractTransition> &qtdecl_QAbstractTransition (); }

class QAnimationDriver;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QAnimationDriver> &qtdecl_QAnimationDriver (); }

class QAnimationGroup;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QAnimationGroup> &qtdecl_QAnimationGroup (); }

class QAssociativeIterable;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QAssociativeIterable> &qtdecl_QAssociativeIterable (); }

class QBasicMutex;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QBasicMutex> &qtdecl_QBasicMutex (); }

class QBasicTimer;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QBasicTimer> &qtdecl_QBasicTimer (); }

class QBuffer;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QBuffer> &qtdecl_QBuffer (); }

struct QByteArrayDataPtr;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QByteArrayDataPtr> &qtdecl_QByteArrayDataPtr (); }

class QByteArrayMatcher;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QByteArrayMatcher> &qtdecl_QByteArrayMatcher (); }

class QChildEvent;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QChildEvent> &qtdecl_QChildEvent (); }

class QCollator;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QCollator> &qtdecl_QCollator (); }

class QCollatorSortKey;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QCollatorSortKey> &qtdecl_QCollatorSortKey (); }

class QCommandLineOption;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QCommandLineOption> &qtdecl_QCommandLineOption (); }

class QCommandLineParser;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QCommandLineParser> &qtdecl_QCommandLineParser (); }

class QCoreApplication;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QCoreApplication> &qtdecl_QCoreApplication (); }

class QCryptographicHash;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QCryptographicHash> &qtdecl_QCryptographicHash (); }

class QDataStream;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QDataStream> &qtdecl_QDataStream (); }

class QDate;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QDate> &qtdecl_QDate (); }

class QDateTime;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QDateTime> &qtdecl_QDateTime (); }

class QDebug;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QDebug> &qtdecl_QDebug (); }

class QDebugStateSaver;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QDebugStateSaver> &qtdecl_QDebugStateSaver (); }

class QDeferredDeleteEvent;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QDeferredDeleteEvent> &qtdecl_QDeferredDeleteEvent (); }

class QDir;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QDir> &qtdecl_QDir (); }

class QDirIterator;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QDirIterator> &qtdecl_QDirIterator (); }

class QDynamicPropertyChangeEvent;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QDynamicPropertyChangeEvent> &qtdecl_QDynamicPropertyChangeEvent (); }

class QEasingCurve;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QEasingCurve> &qtdecl_QEasingCurve (); }

class QElapsedTimer;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QElapsedTimer> &qtdecl_QElapsedTimer (); }

class QEvent;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QEvent> &qtdecl_QEvent (); }

class QEventLoop;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QEventLoop> &qtdecl_QEventLoop (); }

class QEventLoopLocker;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QEventLoopLocker> &qtdecl_QEventLoopLocker (); }

class QEventTransition;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QEventTransition> &qtdecl_QEventTransition (); }

struct QFactoryInterface;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QFactoryInterface> &qtdecl_QFactoryInterface (); }

class QFile;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QFile> &qtdecl_QFile (); }

class QFileDevice;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QFileDevice> &qtdecl_QFileDevice (); }

class QFileInfo;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QFileInfo> &qtdecl_QFileInfo (); }

class QFileSelector;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QFileSelector> &qtdecl_QFileSelector (); }

class QFileSystemWatcher;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QFileSystemWatcher> &qtdecl_QFileSystemWatcher (); }

class QFinalState;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QFinalState> &qtdecl_QFinalState (); }

class QHistoryState;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QHistoryState> &qtdecl_QHistoryState (); }

class QIODevice;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QIODevice> &qtdecl_QIODevice (); }

class QIdentityProxyModel;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QIdentityProxyModel> &qtdecl_QIdentityProxyModel (); }

class QItemSelection;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QItemSelection> &qtdecl_QItemSelection (); }

class QItemSelectionModel;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QItemSelectionModel> &qtdecl_QItemSelectionModel (); }

class QItemSelectionRange;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QItemSelectionRange> &qtdecl_QItemSelectionRange (); }

class QJsonArray;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QJsonArray> &qtdecl_QJsonArray (); }

class QJsonDocument;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QJsonDocument> &qtdecl_QJsonDocument (); }

class QJsonObject;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QJsonObject> &qtdecl_QJsonObject (); }

struct QJsonParseError;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QJsonParseError> &qtdecl_QJsonParseError (); }

class QJsonValue;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QJsonValue> &qtdecl_QJsonValue (); }

class QJsonValuePtr;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QJsonValuePtr> &qtdecl_QJsonValuePtr (); }

class QJsonValueRef;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QJsonValueRef> &qtdecl_QJsonValueRef (); }

class QJsonValueRefPtr;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QJsonValueRefPtr> &qtdecl_QJsonValueRefPtr (); }

class QLibrary;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QLibrary> &qtdecl_QLibrary (); }

class QLibraryInfo;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QLibraryInfo> &qtdecl_QLibraryInfo (); }

class QLine;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QLine> &qtdecl_QLine (); }

class QLineF;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QLineF> &qtdecl_QLineF (); }

class QLocale;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QLocale> &qtdecl_QLocale (); }

class QLockFile;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QLockFile> &qtdecl_QLockFile (); }

class QLoggingCategory;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QLoggingCategory> &qtdecl_QLoggingCategory (); }

struct QMapDataBase;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QMapDataBase> &qtdecl_QMapDataBase (); }

struct QMapNodeBase;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QMapNodeBase> &qtdecl_QMapNodeBase (); }

class QMargins;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QMargins> &qtdecl_QMargins (); }

class QMarginsF;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QMarginsF> &qtdecl_QMarginsF (); }

class QMessageAuthenticationCode;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QMessageAuthenticationCode> &qtdecl_QMessageAuthenticationCode (); }

class QMessageLogContext;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QMessageLogContext> &qtdecl_QMessageLogContext (); }

class QMessageLogger;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QMessageLogger> &qtdecl_QMessageLogger (); }

class QMetaClassInfo;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QMetaClassInfo> &qtdecl_QMetaClassInfo (); }

class QMetaEnum;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QMetaEnum> &qtdecl_QMetaEnum (); }

class QMetaMethod;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QMetaMethod> &qtdecl_QMetaMethod (); }

struct QMetaObject;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QMetaObject> &qtdecl_QMetaObject (); }

class QMetaProperty;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QMetaProperty> &qtdecl_QMetaProperty (); }

class QMetaType;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QMetaType> &qtdecl_QMetaType (); }

class QMimeData;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QMimeData> &qtdecl_QMimeData (); }

class QMimeDatabase;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QMimeDatabase> &qtdecl_QMimeDatabase (); }

class QMimeType;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QMimeType> &qtdecl_QMimeType (); }

class QModelIndex;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QModelIndex> &qtdecl_QModelIndex (); }

class QMutex;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QMutex> &qtdecl_QMutex (); }

class QNoDebug;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QNoDebug> &qtdecl_QNoDebug (); }

class QObject;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QObject> &qtdecl_QObject (); }

class QParallelAnimationGroup;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QParallelAnimationGroup> &qtdecl_QParallelAnimationGroup (); }

class QPauseAnimation;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QPauseAnimation> &qtdecl_QPauseAnimation (); }

class QPersistentModelIndex;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QPersistentModelIndex> &qtdecl_QPersistentModelIndex (); }

class QPluginLoader;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QPluginLoader> &qtdecl_QPluginLoader (); }

class QPoint;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QPoint> &qtdecl_QPoint (); }

class QPointF;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QPointF> &qtdecl_QPointF (); }

class QProcess;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QProcess> &qtdecl_QProcess (); }

class QProcessEnvironment;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QProcessEnvironment> &qtdecl_QProcessEnvironment (); }

class QPropertyAnimation;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QPropertyAnimation> &qtdecl_QPropertyAnimation (); }

class QReadLocker;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QReadLocker> &qtdecl_QReadLocker (); }

class QReadWriteLock;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QReadWriteLock> &qtdecl_QReadWriteLock (); }

class QRect;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QRect> &qtdecl_QRect (); }

class QRectF;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QRectF> &qtdecl_QRectF (); }

class QRegExp;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QRegExp> &qtdecl_QRegExp (); }

class QRegularExpression;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QRegularExpression> &qtdecl_QRegularExpression (); }

class QRegularExpressionMatch;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QRegularExpressionMatch> &qtdecl_QRegularExpressionMatch (); }

class QRegularExpressionMatchIterator;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QRegularExpressionMatchIterator> &qtdecl_QRegularExpressionMatchIterator (); }

class QResource;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QResource> &qtdecl_QResource (); }

class QRunnable;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QRunnable> &qtdecl_QRunnable (); }

class QSaveFile;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QSaveFile> &qtdecl_QSaveFile (); }

class QSemaphore;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QSemaphore> &qtdecl_QSemaphore (); }

class QSequentialAnimationGroup;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QSequentialAnimationGroup> &qtdecl_QSequentialAnimationGroup (); }

class QSequentialIterable;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QSequentialIterable> &qtdecl_QSequentialIterable (); }

class QSettings;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QSettings> &qtdecl_QSettings (); }

class QSharedMemory;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QSharedMemory> &qtdecl_QSharedMemory (); }

class QSignalBlocker;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QSignalBlocker> &qtdecl_QSignalBlocker (); }

class QSignalMapper;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QSignalMapper> &qtdecl_QSignalMapper (); }

class QSignalTransition;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QSignalTransition> &qtdecl_QSignalTransition (); }

class QSize;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QSize> &qtdecl_QSize (); }

class QSizeF;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QSizeF> &qtdecl_QSizeF (); }

class QSocketNotifier;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QSocketNotifier> &qtdecl_QSocketNotifier (); }

class QSortFilterProxyModel;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QSortFilterProxyModel> &qtdecl_QSortFilterProxyModel (); }

class QStandardPaths;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QStandardPaths> &qtdecl_QStandardPaths (); }

class QState;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QState> &qtdecl_QState (); }

class QStateMachine;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QStateMachine> &qtdecl_QStateMachine (); }

struct QStaticPlugin;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QStaticPlugin> &qtdecl_QStaticPlugin (); }

class QStorageInfo;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QStorageInfo> &qtdecl_QStorageInfo (); }

struct QStringDataPtr;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QStringDataPtr> &qtdecl_QStringDataPtr (); }

class QStringListModel;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QStringListModel> &qtdecl_QStringListModel (); }

class QStringMatcher;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QStringMatcher> &qtdecl_QStringMatcher (); }

class QSysInfo;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QSysInfo> &qtdecl_QSysInfo (); }

class QSystemSemaphore;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QSystemSemaphore> &qtdecl_QSystemSemaphore (); }

class QTemporaryDir;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QTemporaryDir> &qtdecl_QTemporaryDir (); }

class QTemporaryFile;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QTemporaryFile> &qtdecl_QTemporaryFile (); }

class QTextBoundaryFinder;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QTextBoundaryFinder> &qtdecl_QTextBoundaryFinder (); }

class QTextCodec;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QTextCodec> &qtdecl_QTextCodec (); }

class QTextDecoder;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QTextDecoder> &qtdecl_QTextDecoder (); }

class QTextEncoder;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QTextEncoder> &qtdecl_QTextEncoder (); }

class QTextStream;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QTextStream> &qtdecl_QTextStream (); }

class QThread;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QThread> &qtdecl_QThread (); }

class QThreadPool;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QThreadPool> &qtdecl_QThreadPool (); }

class QTime;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QTime> &qtdecl_QTime (); }

class QTimeLine;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QTimeLine> &qtdecl_QTimeLine (); }

class QTimeZone;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QTimeZone> &qtdecl_QTimeZone (); }

class QTimer;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QTimer> &qtdecl_QTimer (); }

class QTimerEvent;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QTimerEvent> &qtdecl_QTimerEvent (); }

class QTranslator;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QTranslator> &qtdecl_QTranslator (); }

class QUrl;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QUrl> &qtdecl_QUrl (); }

class QUrlQuery;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QUrlQuery> &qtdecl_QUrlQuery (); }

class QVariantAnimation;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QVariantAnimation> &qtdecl_QVariantAnimation (); }

class QWaitCondition;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QWaitCondition> &qtdecl_QWaitCondition (); }

class QWriteLocker;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QWriteLocker> &qtdecl_QWriteLocker (); }

class QXmlStreamAttribute;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QXmlStreamAttribute> &qtdecl_QXmlStreamAttribute (); }

class QXmlStreamAttributes;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QXmlStreamAttributes> &qtdecl_QXmlStreamAttributes (); }

class QXmlStreamEntityDeclaration;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QXmlStreamEntityDeclaration> &qtdecl_QXmlStreamEntityDeclaration (); }

class QXmlStreamEntityResolver;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QXmlStreamEntityResolver> &qtdecl_QXmlStreamEntityResolver (); }

class QXmlStreamNamespaceDeclaration;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QXmlStreamNamespaceDeclaration> &qtdecl_QXmlStreamNamespaceDeclaration (); }

class QXmlStreamNotationDeclaration;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QXmlStreamNotationDeclaration> &qtdecl_QXmlStreamNotationDeclaration (); }

class QXmlStreamReader;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QXmlStreamReader> &qtdecl_QXmlStreamReader (); }

class QXmlStreamStringRef;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QXmlStreamStringRef> &qtdecl_QXmlStreamStringRef (); }

class QXmlStreamWriter;

namespace gsi { GSI_QTCORE_PUBLIC gsi::Class<QXmlStreamWriter> &qtdecl_QXmlStreamWriter (); }


#define QT_EXTERNAL_BASE(X) gsi::qtdecl_##X(),

#endif

