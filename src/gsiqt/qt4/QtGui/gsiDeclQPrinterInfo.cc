
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2019 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQPrinterInfo.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QPrinterInfo>
#include <QPrinter>
#include "gsiQt.h"
#include "gsiQtGuiCommon.h"
#include "gsiDeclQtGuiTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// class QPrinterInfo

//  Constructor QPrinterInfo::QPrinterInfo()


static void _init_ctor_QPrinterInfo_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QPrinterInfo> ();
}

static void _call_ctor_QPrinterInfo_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QPrinterInfo *> (new QPrinterInfo ());
}


//  Constructor QPrinterInfo::QPrinterInfo(const QPrinterInfo &src)


static void _init_ctor_QPrinterInfo_2530 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("src");
  decl->add_arg<const QPrinterInfo & > (argspec_0);
  decl->set_return_new<QPrinterInfo> ();
}

static void _call_ctor_QPrinterInfo_2530 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QPrinterInfo &arg1 = gsi::arg_reader<const QPrinterInfo & >() (args, heap);
  ret.write<QPrinterInfo *> (new QPrinterInfo (arg1));
}


//  Constructor QPrinterInfo::QPrinterInfo(const QPrinter &printer)


static void _init_ctor_QPrinterInfo_2134 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("printer");
  decl->add_arg<const QPrinter & > (argspec_0);
  decl->set_return_new<QPrinterInfo> ();
}

static void _call_ctor_QPrinterInfo_2134 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QPrinter &arg1 = gsi::arg_reader<const QPrinter & >() (args, heap);
  ret.write<QPrinterInfo *> (new QPrinterInfo (arg1));
}


// bool QPrinterInfo::isDefault()


static void _init_f_isDefault_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isDefault_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QPrinterInfo *)cls)->isDefault ());
}


// bool QPrinterInfo::isNull()


static void _init_f_isNull_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isNull_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QPrinterInfo *)cls)->isNull ());
}


// QPrinterInfo &QPrinterInfo::operator=(const QPrinterInfo &src)


static void _init_f_operator_eq__2530 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("src");
  decl->add_arg<const QPrinterInfo & > (argspec_0);
  decl->set_return<QPrinterInfo & > ();
}

static void _call_f_operator_eq__2530 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QPrinterInfo &arg1 = gsi::arg_reader<const QPrinterInfo & >() (args, heap);
  ret.write<QPrinterInfo & > ((QPrinterInfo &)((QPrinterInfo *)cls)->operator= (arg1));
}


// QString QPrinterInfo::printerName()


static void _init_f_printerName_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_printerName_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QString > ((QString)((QPrinterInfo *)cls)->printerName ());
}


// QList<QPrinter::PaperSize> QPrinterInfo::supportedPaperSizes()


static void _init_f_supportedPaperSizes_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QList<QPrinter::PaperSize> > ();
}

static void _call_f_supportedPaperSizes_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QList<QPrinter::PaperSize> > ((QList<QPrinter::PaperSize>)((QPrinterInfo *)cls)->supportedPaperSizes ());
}


// static QList<QPrinterInfo> QPrinterInfo::availablePrinters()


static void _init_f_availablePrinters_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return<QList<QPrinterInfo> > ();
}

static void _call_f_availablePrinters_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QList<QPrinterInfo> > ((QList<QPrinterInfo>)QPrinterInfo::availablePrinters ());
}


// static QPrinterInfo QPrinterInfo::defaultPrinter()


static void _init_f_defaultPrinter_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return<QPrinterInfo > ();
}

static void _call_f_defaultPrinter_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QPrinterInfo > ((QPrinterInfo)QPrinterInfo::defaultPrinter ());
}



namespace gsi
{

static gsi::Methods methods_QPrinterInfo () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QPrinterInfo::QPrinterInfo()\nThis method creates an object of class QPrinterInfo.", &_init_ctor_QPrinterInfo_0, &_call_ctor_QPrinterInfo_0);
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QPrinterInfo::QPrinterInfo(const QPrinterInfo &src)\nThis method creates an object of class QPrinterInfo.", &_init_ctor_QPrinterInfo_2530, &_call_ctor_QPrinterInfo_2530);
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QPrinterInfo::QPrinterInfo(const QPrinter &printer)\nThis method creates an object of class QPrinterInfo.", &_init_ctor_QPrinterInfo_2134, &_call_ctor_QPrinterInfo_2134);
  methods += new qt_gsi::GenericMethod ("isDefault?", "@brief Method bool QPrinterInfo::isDefault()\n", true, &_init_f_isDefault_c0, &_call_f_isDefault_c0);
  methods += new qt_gsi::GenericMethod ("isNull?", "@brief Method bool QPrinterInfo::isNull()\n", true, &_init_f_isNull_c0, &_call_f_isNull_c0);
  methods += new qt_gsi::GenericMethod ("assign", "@brief Method QPrinterInfo &QPrinterInfo::operator=(const QPrinterInfo &src)\n", false, &_init_f_operator_eq__2530, &_call_f_operator_eq__2530);
  methods += new qt_gsi::GenericMethod ("printerName", "@brief Method QString QPrinterInfo::printerName()\n", true, &_init_f_printerName_c0, &_call_f_printerName_c0);
  methods += new qt_gsi::GenericMethod ("supportedPaperSizes", "@brief Method QList<QPrinter::PaperSize> QPrinterInfo::supportedPaperSizes()\n", true, &_init_f_supportedPaperSizes_c0, &_call_f_supportedPaperSizes_c0);
  methods += new qt_gsi::GenericStaticMethod ("availablePrinters", "@brief Static method QList<QPrinterInfo> QPrinterInfo::availablePrinters()\nThis method is static and can be called without an instance.", &_init_f_availablePrinters_0, &_call_f_availablePrinters_0);
  methods += new qt_gsi::GenericStaticMethod ("defaultPrinter", "@brief Static method QPrinterInfo QPrinterInfo::defaultPrinter()\nThis method is static and can be called without an instance.", &_init_f_defaultPrinter_0, &_call_f_defaultPrinter_0);
  return methods;
}

gsi::Class<QPrinterInfo> decl_QPrinterInfo ("QtGui", "QPrinterInfo",
  methods_QPrinterInfo (),
  "@qt\n@brief Binding of QPrinterInfo");


GSI_QTGUI_PUBLIC gsi::Class<QPrinterInfo> &qtdecl_QPrinterInfo () { return decl_QPrinterInfo; }

}

