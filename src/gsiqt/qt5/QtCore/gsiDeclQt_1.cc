
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2020 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQt_1.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <Qt>
#include "gsiQt.h"
#include "gsiQtCoreCommon.h"
#include "gsiDeclQtCoreTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// namespace Qt

class Qt_Namespace { };


//  Implementation of the enum wrapper class for Qt::DockWidgetArea
namespace qt_gsi
{

static gsi::Enum<Qt::DockWidgetArea> decl_Qt_DockWidgetArea_Enum ("QtCore", "Qt_DockWidgetArea",
    gsi::enum_const ("LeftDockWidgetArea", Qt::LeftDockWidgetArea, "@brief Enum constant Qt::LeftDockWidgetArea") +
    gsi::enum_const ("RightDockWidgetArea", Qt::RightDockWidgetArea, "@brief Enum constant Qt::RightDockWidgetArea") +
    gsi::enum_const ("TopDockWidgetArea", Qt::TopDockWidgetArea, "@brief Enum constant Qt::TopDockWidgetArea") +
    gsi::enum_const ("BottomDockWidgetArea", Qt::BottomDockWidgetArea, "@brief Enum constant Qt::BottomDockWidgetArea") +
    gsi::enum_const ("DockWidgetArea_Mask", Qt::DockWidgetArea_Mask, "@brief Enum constant Qt::DockWidgetArea_Mask") +
    gsi::enum_const ("AllDockWidgetAreas", Qt::AllDockWidgetAreas, "@brief Enum constant Qt::AllDockWidgetAreas") +
    gsi::enum_const ("NoDockWidgetArea", Qt::NoDockWidgetArea, "@brief Enum constant Qt::NoDockWidgetArea"),
  "@qt\n@brief This class represents the Qt::DockWidgetArea enum");

static gsi::QFlagsClass<Qt::DockWidgetArea > decl_Qt_DockWidgetArea_Enums ("QtCore", "Qt_QFlags_DockWidgetArea",
  "@qt\n@brief This class represents the QFlags<Qt::DockWidgetArea> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_DockWidgetArea_Enum_in_parent (decl_Qt_DockWidgetArea_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_DockWidgetArea_Enum_as_child (decl_Qt_DockWidgetArea_Enum, "DockWidgetArea");
static gsi::ClassExt<Qt_Namespace> decl_Qt_DockWidgetArea_Enums_as_child (decl_Qt_DockWidgetArea_Enums, "QFlags_DockWidgetArea");

}


//  Implementation of the enum wrapper class for Qt::DockWidgetAreaSizes
namespace qt_gsi
{

static gsi::Enum<Qt::DockWidgetAreaSizes> decl_Qt_DockWidgetAreaSizes_Enum ("QtCore", "Qt_DockWidgetAreaSizes",
    gsi::enum_const ("NDockWidgetAreas", Qt::NDockWidgetAreas, "@brief Enum constant Qt::NDockWidgetAreas"),
  "@qt\n@brief This class represents the Qt::DockWidgetAreaSizes enum");

static gsi::QFlagsClass<Qt::DockWidgetAreaSizes > decl_Qt_DockWidgetAreaSizes_Enums ("QtCore", "Qt_QFlags_DockWidgetAreaSizes",
  "@qt\n@brief This class represents the QFlags<Qt::DockWidgetAreaSizes> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_DockWidgetAreaSizes_Enum_in_parent (decl_Qt_DockWidgetAreaSizes_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_DockWidgetAreaSizes_Enum_as_child (decl_Qt_DockWidgetAreaSizes_Enum, "DockWidgetAreaSizes");
static gsi::ClassExt<Qt_Namespace> decl_Qt_DockWidgetAreaSizes_Enums_as_child (decl_Qt_DockWidgetAreaSizes_Enums, "QFlags_DockWidgetAreaSizes");

}


//  Implementation of the enum wrapper class for Qt::DropAction
namespace qt_gsi
{

static gsi::Enum<Qt::DropAction> decl_Qt_DropAction_Enum ("QtCore", "Qt_DropAction",
    gsi::enum_const ("CopyAction", Qt::CopyAction, "@brief Enum constant Qt::CopyAction") +
    gsi::enum_const ("MoveAction", Qt::MoveAction, "@brief Enum constant Qt::MoveAction") +
    gsi::enum_const ("LinkAction", Qt::LinkAction, "@brief Enum constant Qt::LinkAction") +
    gsi::enum_const ("ActionMask", Qt::ActionMask, "@brief Enum constant Qt::ActionMask") +
    gsi::enum_const ("TargetMoveAction", Qt::TargetMoveAction, "@brief Enum constant Qt::TargetMoveAction") +
    gsi::enum_const ("IgnoreAction", Qt::IgnoreAction, "@brief Enum constant Qt::IgnoreAction"),
  "@qt\n@brief This class represents the Qt::DropAction enum");

static gsi::QFlagsClass<Qt::DropAction > decl_Qt_DropAction_Enums ("QtCore", "Qt_QFlags_DropAction",
  "@qt\n@brief This class represents the QFlags<Qt::DropAction> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_DropAction_Enum_in_parent (decl_Qt_DropAction_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_DropAction_Enum_as_child (decl_Qt_DropAction_Enum, "DropAction");
static gsi::ClassExt<Qt_Namespace> decl_Qt_DropAction_Enums_as_child (decl_Qt_DropAction_Enums, "QFlags_DropAction");

}


//  Implementation of the enum wrapper class for Qt::Edge
namespace qt_gsi
{

static gsi::Enum<Qt::Edge> decl_Qt_Edge_Enum ("QtCore", "Qt_Edge",
    gsi::enum_const ("TopEdge", Qt::TopEdge, "@brief Enum constant Qt::TopEdge") +
    gsi::enum_const ("LeftEdge", Qt::LeftEdge, "@brief Enum constant Qt::LeftEdge") +
    gsi::enum_const ("RightEdge", Qt::RightEdge, "@brief Enum constant Qt::RightEdge") +
    gsi::enum_const ("BottomEdge", Qt::BottomEdge, "@brief Enum constant Qt::BottomEdge"),
  "@qt\n@brief This class represents the Qt::Edge enum");

static gsi::QFlagsClass<Qt::Edge > decl_Qt_Edge_Enums ("QtCore", "Qt_QFlags_Edge",
  "@qt\n@brief This class represents the QFlags<Qt::Edge> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_Edge_Enum_in_parent (decl_Qt_Edge_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_Edge_Enum_as_child (decl_Qt_Edge_Enum, "Edge");
static gsi::ClassExt<Qt_Namespace> decl_Qt_Edge_Enums_as_child (decl_Qt_Edge_Enums, "QFlags_Edge");

}


//  Implementation of the enum wrapper class for Qt::EventPriority
namespace qt_gsi
{

static gsi::Enum<Qt::EventPriority> decl_Qt_EventPriority_Enum ("QtCore", "Qt_EventPriority",
    gsi::enum_const ("HighEventPriority", Qt::HighEventPriority, "@brief Enum constant Qt::HighEventPriority") +
    gsi::enum_const ("NormalEventPriority", Qt::NormalEventPriority, "@brief Enum constant Qt::NormalEventPriority") +
    gsi::enum_const ("LowEventPriority", Qt::LowEventPriority, "@brief Enum constant Qt::LowEventPriority"),
  "@qt\n@brief This class represents the Qt::EventPriority enum");

static gsi::QFlagsClass<Qt::EventPriority > decl_Qt_EventPriority_Enums ("QtCore", "Qt_QFlags_EventPriority",
  "@qt\n@brief This class represents the QFlags<Qt::EventPriority> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_EventPriority_Enum_in_parent (decl_Qt_EventPriority_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_EventPriority_Enum_as_child (decl_Qt_EventPriority_Enum, "EventPriority");
static gsi::ClassExt<Qt_Namespace> decl_Qt_EventPriority_Enums_as_child (decl_Qt_EventPriority_Enums, "QFlags_EventPriority");

}


//  Implementation of the enum wrapper class for Qt::FillRule
namespace qt_gsi
{

static gsi::Enum<Qt::FillRule> decl_Qt_FillRule_Enum ("QtCore", "Qt_FillRule",
    gsi::enum_const ("OddEvenFill", Qt::OddEvenFill, "@brief Enum constant Qt::OddEvenFill") +
    gsi::enum_const ("WindingFill", Qt::WindingFill, "@brief Enum constant Qt::WindingFill"),
  "@qt\n@brief This class represents the Qt::FillRule enum");

static gsi::QFlagsClass<Qt::FillRule > decl_Qt_FillRule_Enums ("QtCore", "Qt_QFlags_FillRule",
  "@qt\n@brief This class represents the QFlags<Qt::FillRule> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_FillRule_Enum_in_parent (decl_Qt_FillRule_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_FillRule_Enum_as_child (decl_Qt_FillRule_Enum, "FillRule");
static gsi::ClassExt<Qt_Namespace> decl_Qt_FillRule_Enums_as_child (decl_Qt_FillRule_Enums, "QFlags_FillRule");

}


//  Implementation of the enum wrapper class for Qt::FindChildOption
namespace qt_gsi
{

static gsi::Enum<Qt::FindChildOption> decl_Qt_FindChildOption_Enum ("QtCore", "Qt_FindChildOption",
    gsi::enum_const ("FindDirectChildrenOnly", Qt::FindDirectChildrenOnly, "@brief Enum constant Qt::FindDirectChildrenOnly") +
    gsi::enum_const ("FindChildrenRecursively", Qt::FindChildrenRecursively, "@brief Enum constant Qt::FindChildrenRecursively"),
  "@qt\n@brief This class represents the Qt::FindChildOption enum");

static gsi::QFlagsClass<Qt::FindChildOption > decl_Qt_FindChildOption_Enums ("QtCore", "Qt_QFlags_FindChildOption",
  "@qt\n@brief This class represents the QFlags<Qt::FindChildOption> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_FindChildOption_Enum_in_parent (decl_Qt_FindChildOption_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_FindChildOption_Enum_as_child (decl_Qt_FindChildOption_Enum, "FindChildOption");
static gsi::ClassExt<Qt_Namespace> decl_Qt_FindChildOption_Enums_as_child (decl_Qt_FindChildOption_Enums, "QFlags_FindChildOption");

}


//  Implementation of the enum wrapper class for Qt::FocusPolicy
namespace qt_gsi
{

static gsi::Enum<Qt::FocusPolicy> decl_Qt_FocusPolicy_Enum ("QtCore", "Qt_FocusPolicy",
    gsi::enum_const ("NoFocus", Qt::NoFocus, "@brief Enum constant Qt::NoFocus") +
    gsi::enum_const ("TabFocus", Qt::TabFocus, "@brief Enum constant Qt::TabFocus") +
    gsi::enum_const ("ClickFocus", Qt::ClickFocus, "@brief Enum constant Qt::ClickFocus") +
    gsi::enum_const ("StrongFocus", Qt::StrongFocus, "@brief Enum constant Qt::StrongFocus") +
    gsi::enum_const ("WheelFocus", Qt::WheelFocus, "@brief Enum constant Qt::WheelFocus"),
  "@qt\n@brief This class represents the Qt::FocusPolicy enum");

static gsi::QFlagsClass<Qt::FocusPolicy > decl_Qt_FocusPolicy_Enums ("QtCore", "Qt_QFlags_FocusPolicy",
  "@qt\n@brief This class represents the QFlags<Qt::FocusPolicy> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_FocusPolicy_Enum_in_parent (decl_Qt_FocusPolicy_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_FocusPolicy_Enum_as_child (decl_Qt_FocusPolicy_Enum, "FocusPolicy");
static gsi::ClassExt<Qt_Namespace> decl_Qt_FocusPolicy_Enums_as_child (decl_Qt_FocusPolicy_Enums, "QFlags_FocusPolicy");

}


//  Implementation of the enum wrapper class for Qt::FocusReason
namespace qt_gsi
{

static gsi::Enum<Qt::FocusReason> decl_Qt_FocusReason_Enum ("QtCore", "Qt_FocusReason",
    gsi::enum_const ("MouseFocusReason", Qt::MouseFocusReason, "@brief Enum constant Qt::MouseFocusReason") +
    gsi::enum_const ("TabFocusReason", Qt::TabFocusReason, "@brief Enum constant Qt::TabFocusReason") +
    gsi::enum_const ("BacktabFocusReason", Qt::BacktabFocusReason, "@brief Enum constant Qt::BacktabFocusReason") +
    gsi::enum_const ("ActiveWindowFocusReason", Qt::ActiveWindowFocusReason, "@brief Enum constant Qt::ActiveWindowFocusReason") +
    gsi::enum_const ("PopupFocusReason", Qt::PopupFocusReason, "@brief Enum constant Qt::PopupFocusReason") +
    gsi::enum_const ("ShortcutFocusReason", Qt::ShortcutFocusReason, "@brief Enum constant Qt::ShortcutFocusReason") +
    gsi::enum_const ("MenuBarFocusReason", Qt::MenuBarFocusReason, "@brief Enum constant Qt::MenuBarFocusReason") +
    gsi::enum_const ("OtherFocusReason", Qt::OtherFocusReason, "@brief Enum constant Qt::OtherFocusReason") +
    gsi::enum_const ("NoFocusReason", Qt::NoFocusReason, "@brief Enum constant Qt::NoFocusReason"),
  "@qt\n@brief This class represents the Qt::FocusReason enum");

static gsi::QFlagsClass<Qt::FocusReason > decl_Qt_FocusReason_Enums ("QtCore", "Qt_QFlags_FocusReason",
  "@qt\n@brief This class represents the QFlags<Qt::FocusReason> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_FocusReason_Enum_in_parent (decl_Qt_FocusReason_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_FocusReason_Enum_as_child (decl_Qt_FocusReason_Enum, "FocusReason");
static gsi::ClassExt<Qt_Namespace> decl_Qt_FocusReason_Enums_as_child (decl_Qt_FocusReason_Enums, "QFlags_FocusReason");

}


//  Implementation of the enum wrapper class for Qt::GestureFlag
namespace qt_gsi
{

static gsi::Enum<Qt::GestureFlag> decl_Qt_GestureFlag_Enum ("QtCore", "Qt_GestureFlag",
    gsi::enum_const ("DontStartGestureOnChildren", Qt::DontStartGestureOnChildren, "@brief Enum constant Qt::DontStartGestureOnChildren") +
    gsi::enum_const ("ReceivePartialGestures", Qt::ReceivePartialGestures, "@brief Enum constant Qt::ReceivePartialGestures") +
    gsi::enum_const ("IgnoredGesturesPropagateToParent", Qt::IgnoredGesturesPropagateToParent, "@brief Enum constant Qt::IgnoredGesturesPropagateToParent"),
  "@qt\n@brief This class represents the Qt::GestureFlag enum");

static gsi::QFlagsClass<Qt::GestureFlag > decl_Qt_GestureFlag_Enums ("QtCore", "Qt_QFlags_GestureFlag",
  "@qt\n@brief This class represents the QFlags<Qt::GestureFlag> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_GestureFlag_Enum_in_parent (decl_Qt_GestureFlag_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_GestureFlag_Enum_as_child (decl_Qt_GestureFlag_Enum, "GestureFlag");
static gsi::ClassExt<Qt_Namespace> decl_Qt_GestureFlag_Enums_as_child (decl_Qt_GestureFlag_Enums, "QFlags_GestureFlag");

}


//  Implementation of the enum wrapper class for Qt::GestureState
namespace qt_gsi
{

static gsi::Enum<Qt::GestureState> decl_Qt_GestureState_Enum ("QtCore", "Qt_GestureState",
    gsi::enum_const ("NoGesture", Qt::NoGesture, "@brief Enum constant Qt::NoGesture") +
    gsi::enum_const ("GestureStarted", Qt::GestureStarted, "@brief Enum constant Qt::GestureStarted") +
    gsi::enum_const ("GestureUpdated", Qt::GestureUpdated, "@brief Enum constant Qt::GestureUpdated") +
    gsi::enum_const ("GestureFinished", Qt::GestureFinished, "@brief Enum constant Qt::GestureFinished") +
    gsi::enum_const ("GestureCanceled", Qt::GestureCanceled, "@brief Enum constant Qt::GestureCanceled"),
  "@qt\n@brief This class represents the Qt::GestureState enum");

static gsi::QFlagsClass<Qt::GestureState > decl_Qt_GestureState_Enums ("QtCore", "Qt_QFlags_GestureState",
  "@qt\n@brief This class represents the QFlags<Qt::GestureState> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_GestureState_Enum_in_parent (decl_Qt_GestureState_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_GestureState_Enum_as_child (decl_Qt_GestureState_Enum, "GestureState");
static gsi::ClassExt<Qt_Namespace> decl_Qt_GestureState_Enums_as_child (decl_Qt_GestureState_Enums, "QFlags_GestureState");

}


//  Implementation of the enum wrapper class for Qt::GestureType
namespace qt_gsi
{

static gsi::Enum<Qt::GestureType> decl_Qt_GestureType_Enum ("QtCore", "Qt_GestureType",
    gsi::enum_const ("TapGesture", Qt::TapGesture, "@brief Enum constant Qt::TapGesture") +
    gsi::enum_const ("TapAndHoldGesture", Qt::TapAndHoldGesture, "@brief Enum constant Qt::TapAndHoldGesture") +
    gsi::enum_const ("PanGesture", Qt::PanGesture, "@brief Enum constant Qt::PanGesture") +
    gsi::enum_const ("PinchGesture", Qt::PinchGesture, "@brief Enum constant Qt::PinchGesture") +
    gsi::enum_const ("SwipeGesture", Qt::SwipeGesture, "@brief Enum constant Qt::SwipeGesture") +
    gsi::enum_const ("CustomGesture", Qt::CustomGesture, "@brief Enum constant Qt::CustomGesture") +
    gsi::enum_const ("LastGestureType", Qt::LastGestureType, "@brief Enum constant Qt::LastGestureType"),
  "@qt\n@brief This class represents the Qt::GestureType enum");

static gsi::QFlagsClass<Qt::GestureType > decl_Qt_GestureType_Enums ("QtCore", "Qt_QFlags_GestureType",
  "@qt\n@brief This class represents the QFlags<Qt::GestureType> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_GestureType_Enum_in_parent (decl_Qt_GestureType_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_GestureType_Enum_as_child (decl_Qt_GestureType_Enum, "GestureType");
static gsi::ClassExt<Qt_Namespace> decl_Qt_GestureType_Enums_as_child (decl_Qt_GestureType_Enums, "QFlags_GestureType");

}


//  Implementation of the enum wrapper class for Qt::GlobalColor
namespace qt_gsi
{

static gsi::Enum<Qt::GlobalColor> decl_Qt_GlobalColor_Enum ("QtCore", "Qt_GlobalColor",
    gsi::enum_const ("color0", Qt::color0, "@brief Enum constant Qt::color0") +
    gsi::enum_const ("color1", Qt::color1, "@brief Enum constant Qt::color1") +
    gsi::enum_const ("black", Qt::black, "@brief Enum constant Qt::black") +
    gsi::enum_const ("white", Qt::white, "@brief Enum constant Qt::white") +
    gsi::enum_const ("darkGray", Qt::darkGray, "@brief Enum constant Qt::darkGray") +
    gsi::enum_const ("gray", Qt::gray, "@brief Enum constant Qt::gray") +
    gsi::enum_const ("lightGray", Qt::lightGray, "@brief Enum constant Qt::lightGray") +
    gsi::enum_const ("red", Qt::red, "@brief Enum constant Qt::red") +
    gsi::enum_const ("green", Qt::green, "@brief Enum constant Qt::green") +
    gsi::enum_const ("blue", Qt::blue, "@brief Enum constant Qt::blue") +
    gsi::enum_const ("cyan", Qt::cyan, "@brief Enum constant Qt::cyan") +
    gsi::enum_const ("magenta", Qt::magenta, "@brief Enum constant Qt::magenta") +
    gsi::enum_const ("yellow", Qt::yellow, "@brief Enum constant Qt::yellow") +
    gsi::enum_const ("darkRed", Qt::darkRed, "@brief Enum constant Qt::darkRed") +
    gsi::enum_const ("darkGreen", Qt::darkGreen, "@brief Enum constant Qt::darkGreen") +
    gsi::enum_const ("darkBlue", Qt::darkBlue, "@brief Enum constant Qt::darkBlue") +
    gsi::enum_const ("darkCyan", Qt::darkCyan, "@brief Enum constant Qt::darkCyan") +
    gsi::enum_const ("darkMagenta", Qt::darkMagenta, "@brief Enum constant Qt::darkMagenta") +
    gsi::enum_const ("darkYellow", Qt::darkYellow, "@brief Enum constant Qt::darkYellow") +
    gsi::enum_const ("transparent", Qt::transparent, "@brief Enum constant Qt::transparent"),
  "@qt\n@brief This class represents the Qt::GlobalColor enum");

static gsi::QFlagsClass<Qt::GlobalColor > decl_Qt_GlobalColor_Enums ("QtCore", "Qt_QFlags_GlobalColor",
  "@qt\n@brief This class represents the QFlags<Qt::GlobalColor> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_GlobalColor_Enum_in_parent (decl_Qt_GlobalColor_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_GlobalColor_Enum_as_child (decl_Qt_GlobalColor_Enum, "GlobalColor");
static gsi::ClassExt<Qt_Namespace> decl_Qt_GlobalColor_Enums_as_child (decl_Qt_GlobalColor_Enums, "QFlags_GlobalColor");

}


//  Implementation of the enum wrapper class for Qt::HitTestAccuracy
namespace qt_gsi
{

static gsi::Enum<Qt::HitTestAccuracy> decl_Qt_HitTestAccuracy_Enum ("QtCore", "Qt_HitTestAccuracy",
    gsi::enum_const ("ExactHit", Qt::ExactHit, "@brief Enum constant Qt::ExactHit") +
    gsi::enum_const ("FuzzyHit", Qt::FuzzyHit, "@brief Enum constant Qt::FuzzyHit"),
  "@qt\n@brief This class represents the Qt::HitTestAccuracy enum");

static gsi::QFlagsClass<Qt::HitTestAccuracy > decl_Qt_HitTestAccuracy_Enums ("QtCore", "Qt_QFlags_HitTestAccuracy",
  "@qt\n@brief This class represents the QFlags<Qt::HitTestAccuracy> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_HitTestAccuracy_Enum_in_parent (decl_Qt_HitTestAccuracy_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_HitTestAccuracy_Enum_as_child (decl_Qt_HitTestAccuracy_Enum, "HitTestAccuracy");
static gsi::ClassExt<Qt_Namespace> decl_Qt_HitTestAccuracy_Enums_as_child (decl_Qt_HitTestAccuracy_Enums, "QFlags_HitTestAccuracy");

}


//  Implementation of the enum wrapper class for Qt::ImageConversionFlag
namespace qt_gsi
{

static gsi::Enum<Qt::ImageConversionFlag> decl_Qt_ImageConversionFlag_Enum ("QtCore", "Qt_ImageConversionFlag",
    gsi::enum_const ("ColorMode_Mask", Qt::ColorMode_Mask, "@brief Enum constant Qt::ColorMode_Mask") +
    gsi::enum_const ("AutoColor", Qt::AutoColor, "@brief Enum constant Qt::AutoColor") +
    gsi::enum_const ("ColorOnly", Qt::ColorOnly, "@brief Enum constant Qt::ColorOnly") +
    gsi::enum_const ("MonoOnly", Qt::MonoOnly, "@brief Enum constant Qt::MonoOnly") +
    gsi::enum_const ("AlphaDither_Mask", Qt::AlphaDither_Mask, "@brief Enum constant Qt::AlphaDither_Mask") +
    gsi::enum_const ("ThresholdAlphaDither", Qt::ThresholdAlphaDither, "@brief Enum constant Qt::ThresholdAlphaDither") +
    gsi::enum_const ("OrderedAlphaDither", Qt::OrderedAlphaDither, "@brief Enum constant Qt::OrderedAlphaDither") +
    gsi::enum_const ("DiffuseAlphaDither", Qt::DiffuseAlphaDither, "@brief Enum constant Qt::DiffuseAlphaDither") +
    gsi::enum_const ("NoAlpha", Qt::NoAlpha, "@brief Enum constant Qt::NoAlpha") +
    gsi::enum_const ("Dither_Mask", Qt::Dither_Mask, "@brief Enum constant Qt::Dither_Mask") +
    gsi::enum_const ("DiffuseDither", Qt::DiffuseDither, "@brief Enum constant Qt::DiffuseDither") +
    gsi::enum_const ("OrderedDither", Qt::OrderedDither, "@brief Enum constant Qt::OrderedDither") +
    gsi::enum_const ("ThresholdDither", Qt::ThresholdDither, "@brief Enum constant Qt::ThresholdDither") +
    gsi::enum_const ("DitherMode_Mask", Qt::DitherMode_Mask, "@brief Enum constant Qt::DitherMode_Mask") +
    gsi::enum_const ("AutoDither", Qt::AutoDither, "@brief Enum constant Qt::AutoDither") +
    gsi::enum_const ("PreferDither", Qt::PreferDither, "@brief Enum constant Qt::PreferDither") +
    gsi::enum_const ("AvoidDither", Qt::AvoidDither, "@brief Enum constant Qt::AvoidDither") +
    gsi::enum_const ("NoOpaqueDetection", Qt::NoOpaqueDetection, "@brief Enum constant Qt::NoOpaqueDetection") +
    gsi::enum_const ("NoFormatConversion", Qt::NoFormatConversion, "@brief Enum constant Qt::NoFormatConversion"),
  "@qt\n@brief This class represents the Qt::ImageConversionFlag enum");

static gsi::QFlagsClass<Qt::ImageConversionFlag > decl_Qt_ImageConversionFlag_Enums ("QtCore", "Qt_QFlags_ImageConversionFlag",
  "@qt\n@brief This class represents the QFlags<Qt::ImageConversionFlag> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_ImageConversionFlag_Enum_in_parent (decl_Qt_ImageConversionFlag_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_ImageConversionFlag_Enum_as_child (decl_Qt_ImageConversionFlag_Enum, "ImageConversionFlag");
static gsi::ClassExt<Qt_Namespace> decl_Qt_ImageConversionFlag_Enums_as_child (decl_Qt_ImageConversionFlag_Enums, "QFlags_ImageConversionFlag");

}


//  Implementation of the enum wrapper class for Qt::Initialization
namespace qt_gsi
{

static gsi::Enum<Qt::Initialization> decl_Qt_Initialization_Enum ("QtCore", "Qt_Initialization",
    gsi::enum_const ("Uninitialized", Qt::Uninitialized, "@brief Enum constant Qt::Uninitialized"),
  "@qt\n@brief This class represents the Qt::Initialization enum");

static gsi::QFlagsClass<Qt::Initialization > decl_Qt_Initialization_Enums ("QtCore", "Qt_QFlags_Initialization",
  "@qt\n@brief This class represents the QFlags<Qt::Initialization> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_Initialization_Enum_in_parent (decl_Qt_Initialization_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_Initialization_Enum_as_child (decl_Qt_Initialization_Enum, "Initialization");
static gsi::ClassExt<Qt_Namespace> decl_Qt_Initialization_Enums_as_child (decl_Qt_Initialization_Enums, "QFlags_Initialization");

}


//  Implementation of the enum wrapper class for Qt::InputMethodHint
namespace qt_gsi
{

static gsi::Enum<Qt::InputMethodHint> decl_Qt_InputMethodHint_Enum ("QtCore", "Qt_InputMethodHint",
    gsi::enum_const ("ImhNone", Qt::ImhNone, "@brief Enum constant Qt::ImhNone") +
    gsi::enum_const ("ImhHiddenText", Qt::ImhHiddenText, "@brief Enum constant Qt::ImhHiddenText") +
    gsi::enum_const ("ImhSensitiveData", Qt::ImhSensitiveData, "@brief Enum constant Qt::ImhSensitiveData") +
    gsi::enum_const ("ImhNoAutoUppercase", Qt::ImhNoAutoUppercase, "@brief Enum constant Qt::ImhNoAutoUppercase") +
    gsi::enum_const ("ImhPreferNumbers", Qt::ImhPreferNumbers, "@brief Enum constant Qt::ImhPreferNumbers") +
    gsi::enum_const ("ImhPreferUppercase", Qt::ImhPreferUppercase, "@brief Enum constant Qt::ImhPreferUppercase") +
    gsi::enum_const ("ImhPreferLowercase", Qt::ImhPreferLowercase, "@brief Enum constant Qt::ImhPreferLowercase") +
    gsi::enum_const ("ImhNoPredictiveText", Qt::ImhNoPredictiveText, "@brief Enum constant Qt::ImhNoPredictiveText") +
    gsi::enum_const ("ImhDate", Qt::ImhDate, "@brief Enum constant Qt::ImhDate") +
    gsi::enum_const ("ImhTime", Qt::ImhTime, "@brief Enum constant Qt::ImhTime") +
    gsi::enum_const ("ImhPreferLatin", Qt::ImhPreferLatin, "@brief Enum constant Qt::ImhPreferLatin") +
    gsi::enum_const ("ImhMultiLine", Qt::ImhMultiLine, "@brief Enum constant Qt::ImhMultiLine") +
    gsi::enum_const ("ImhDigitsOnly", Qt::ImhDigitsOnly, "@brief Enum constant Qt::ImhDigitsOnly") +
    gsi::enum_const ("ImhFormattedNumbersOnly", Qt::ImhFormattedNumbersOnly, "@brief Enum constant Qt::ImhFormattedNumbersOnly") +
    gsi::enum_const ("ImhUppercaseOnly", Qt::ImhUppercaseOnly, "@brief Enum constant Qt::ImhUppercaseOnly") +
    gsi::enum_const ("ImhLowercaseOnly", Qt::ImhLowercaseOnly, "@brief Enum constant Qt::ImhLowercaseOnly") +
    gsi::enum_const ("ImhDialableCharactersOnly", Qt::ImhDialableCharactersOnly, "@brief Enum constant Qt::ImhDialableCharactersOnly") +
    gsi::enum_const ("ImhEmailCharactersOnly", Qt::ImhEmailCharactersOnly, "@brief Enum constant Qt::ImhEmailCharactersOnly") +
    gsi::enum_const ("ImhUrlCharactersOnly", Qt::ImhUrlCharactersOnly, "@brief Enum constant Qt::ImhUrlCharactersOnly") +
    gsi::enum_const ("ImhLatinOnly", Qt::ImhLatinOnly, "@brief Enum constant Qt::ImhLatinOnly") +
    gsi::enum_const ("ImhExclusiveInputMask", Qt::ImhExclusiveInputMask, "@brief Enum constant Qt::ImhExclusiveInputMask"),
  "@qt\n@brief This class represents the Qt::InputMethodHint enum");

static gsi::QFlagsClass<Qt::InputMethodHint > decl_Qt_InputMethodHint_Enums ("QtCore", "Qt_QFlags_InputMethodHint",
  "@qt\n@brief This class represents the QFlags<Qt::InputMethodHint> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_InputMethodHint_Enum_in_parent (decl_Qt_InputMethodHint_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_InputMethodHint_Enum_as_child (decl_Qt_InputMethodHint_Enum, "InputMethodHint");
static gsi::ClassExt<Qt_Namespace> decl_Qt_InputMethodHint_Enums_as_child (decl_Qt_InputMethodHint_Enums, "QFlags_InputMethodHint");

}


//  Implementation of the enum wrapper class for Qt::InputMethodQuery
namespace qt_gsi
{

static gsi::Enum<Qt::InputMethodQuery> decl_Qt_InputMethodQuery_Enum ("QtCore", "Qt_InputMethodQuery",
    gsi::enum_const ("ImEnabled", Qt::ImEnabled, "@brief Enum constant Qt::ImEnabled") +
    gsi::enum_const ("ImCursorRectangle", Qt::ImCursorRectangle, "@brief Enum constant Qt::ImCursorRectangle") +
    gsi::enum_const ("ImMicroFocus", Qt::ImMicroFocus, "@brief Enum constant Qt::ImMicroFocus") +
    gsi::enum_const ("ImFont", Qt::ImFont, "@brief Enum constant Qt::ImFont") +
    gsi::enum_const ("ImCursorPosition", Qt::ImCursorPosition, "@brief Enum constant Qt::ImCursorPosition") +
    gsi::enum_const ("ImSurroundingText", Qt::ImSurroundingText, "@brief Enum constant Qt::ImSurroundingText") +
    gsi::enum_const ("ImCurrentSelection", Qt::ImCurrentSelection, "@brief Enum constant Qt::ImCurrentSelection") +
    gsi::enum_const ("ImMaximumTextLength", Qt::ImMaximumTextLength, "@brief Enum constant Qt::ImMaximumTextLength") +
    gsi::enum_const ("ImAnchorPosition", Qt::ImAnchorPosition, "@brief Enum constant Qt::ImAnchorPosition") +
    gsi::enum_const ("ImHints", Qt::ImHints, "@brief Enum constant Qt::ImHints") +
    gsi::enum_const ("ImPreferredLanguage", Qt::ImPreferredLanguage, "@brief Enum constant Qt::ImPreferredLanguage") +
    gsi::enum_const ("ImAbsolutePosition", Qt::ImAbsolutePosition, "@brief Enum constant Qt::ImAbsolutePosition") +
    gsi::enum_const ("ImTextBeforeCursor", Qt::ImTextBeforeCursor, "@brief Enum constant Qt::ImTextBeforeCursor") +
    gsi::enum_const ("ImTextAfterCursor", Qt::ImTextAfterCursor, "@brief Enum constant Qt::ImTextAfterCursor") +
    gsi::enum_const ("ImPlatformData", Qt::ImPlatformData, "@brief Enum constant Qt::ImPlatformData") +
    gsi::enum_const ("ImQueryInput", Qt::ImQueryInput, "@brief Enum constant Qt::ImQueryInput") +
    gsi::enum_const ("ImQueryAll", Qt::ImQueryAll, "@brief Enum constant Qt::ImQueryAll"),
  "@qt\n@brief This class represents the Qt::InputMethodQuery enum");

static gsi::QFlagsClass<Qt::InputMethodQuery > decl_Qt_InputMethodQuery_Enums ("QtCore", "Qt_QFlags_InputMethodQuery",
  "@qt\n@brief This class represents the QFlags<Qt::InputMethodQuery> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_InputMethodQuery_Enum_in_parent (decl_Qt_InputMethodQuery_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_InputMethodQuery_Enum_as_child (decl_Qt_InputMethodQuery_Enum, "InputMethodQuery");
static gsi::ClassExt<Qt_Namespace> decl_Qt_InputMethodQuery_Enums_as_child (decl_Qt_InputMethodQuery_Enums, "QFlags_InputMethodQuery");

}


//  Implementation of the enum wrapper class for Qt::ItemDataRole
namespace qt_gsi
{

static gsi::Enum<Qt::ItemDataRole> decl_Qt_ItemDataRole_Enum ("QtCore", "Qt_ItemDataRole",
    gsi::enum_const ("DisplayRole", Qt::DisplayRole, "@brief Enum constant Qt::DisplayRole") +
    gsi::enum_const ("DecorationRole", Qt::DecorationRole, "@brief Enum constant Qt::DecorationRole") +
    gsi::enum_const ("EditRole", Qt::EditRole, "@brief Enum constant Qt::EditRole") +
    gsi::enum_const ("ToolTipRole", Qt::ToolTipRole, "@brief Enum constant Qt::ToolTipRole") +
    gsi::enum_const ("StatusTipRole", Qt::StatusTipRole, "@brief Enum constant Qt::StatusTipRole") +
    gsi::enum_const ("WhatsThisRole", Qt::WhatsThisRole, "@brief Enum constant Qt::WhatsThisRole") +
    gsi::enum_const ("FontRole", Qt::FontRole, "@brief Enum constant Qt::FontRole") +
    gsi::enum_const ("TextAlignmentRole", Qt::TextAlignmentRole, "@brief Enum constant Qt::TextAlignmentRole") +
    gsi::enum_const ("BackgroundColorRole", Qt::BackgroundColorRole, "@brief Enum constant Qt::BackgroundColorRole") +
    gsi::enum_const ("BackgroundRole", Qt::BackgroundRole, "@brief Enum constant Qt::BackgroundRole") +
    gsi::enum_const ("TextColorRole", Qt::TextColorRole, "@brief Enum constant Qt::TextColorRole") +
    gsi::enum_const ("ForegroundRole", Qt::ForegroundRole, "@brief Enum constant Qt::ForegroundRole") +
    gsi::enum_const ("CheckStateRole", Qt::CheckStateRole, "@brief Enum constant Qt::CheckStateRole") +
    gsi::enum_const ("AccessibleTextRole", Qt::AccessibleTextRole, "@brief Enum constant Qt::AccessibleTextRole") +
    gsi::enum_const ("AccessibleDescriptionRole", Qt::AccessibleDescriptionRole, "@brief Enum constant Qt::AccessibleDescriptionRole") +
    gsi::enum_const ("SizeHintRole", Qt::SizeHintRole, "@brief Enum constant Qt::SizeHintRole") +
    gsi::enum_const ("InitialSortOrderRole", Qt::InitialSortOrderRole, "@brief Enum constant Qt::InitialSortOrderRole") +
    gsi::enum_const ("DisplayPropertyRole", Qt::DisplayPropertyRole, "@brief Enum constant Qt::DisplayPropertyRole") +
    gsi::enum_const ("DecorationPropertyRole", Qt::DecorationPropertyRole, "@brief Enum constant Qt::DecorationPropertyRole") +
    gsi::enum_const ("ToolTipPropertyRole", Qt::ToolTipPropertyRole, "@brief Enum constant Qt::ToolTipPropertyRole") +
    gsi::enum_const ("StatusTipPropertyRole", Qt::StatusTipPropertyRole, "@brief Enum constant Qt::StatusTipPropertyRole") +
    gsi::enum_const ("WhatsThisPropertyRole", Qt::WhatsThisPropertyRole, "@brief Enum constant Qt::WhatsThisPropertyRole") +
    gsi::enum_const ("UserRole", Qt::UserRole, "@brief Enum constant Qt::UserRole"),
  "@qt\n@brief This class represents the Qt::ItemDataRole enum");

static gsi::QFlagsClass<Qt::ItemDataRole > decl_Qt_ItemDataRole_Enums ("QtCore", "Qt_QFlags_ItemDataRole",
  "@qt\n@brief This class represents the QFlags<Qt::ItemDataRole> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_ItemDataRole_Enum_in_parent (decl_Qt_ItemDataRole_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_ItemDataRole_Enum_as_child (decl_Qt_ItemDataRole_Enum, "ItemDataRole");
static gsi::ClassExt<Qt_Namespace> decl_Qt_ItemDataRole_Enums_as_child (decl_Qt_ItemDataRole_Enums, "QFlags_ItemDataRole");

}


//  Implementation of the enum wrapper class for Qt::ItemFlag
namespace qt_gsi
{

static gsi::Enum<Qt::ItemFlag> decl_Qt_ItemFlag_Enum ("QtCore", "Qt_ItemFlag",
    gsi::enum_const ("NoItemFlags", Qt::NoItemFlags, "@brief Enum constant Qt::NoItemFlags") +
    gsi::enum_const ("ItemIsSelectable", Qt::ItemIsSelectable, "@brief Enum constant Qt::ItemIsSelectable") +
    gsi::enum_const ("ItemIsEditable", Qt::ItemIsEditable, "@brief Enum constant Qt::ItemIsEditable") +
    gsi::enum_const ("ItemIsDragEnabled", Qt::ItemIsDragEnabled, "@brief Enum constant Qt::ItemIsDragEnabled") +
    gsi::enum_const ("ItemIsDropEnabled", Qt::ItemIsDropEnabled, "@brief Enum constant Qt::ItemIsDropEnabled") +
    gsi::enum_const ("ItemIsUserCheckable", Qt::ItemIsUserCheckable, "@brief Enum constant Qt::ItemIsUserCheckable") +
    gsi::enum_const ("ItemIsEnabled", Qt::ItemIsEnabled, "@brief Enum constant Qt::ItemIsEnabled") +
    gsi::enum_const ("ItemIsTristate", Qt::ItemIsTristate, "@brief Enum constant Qt::ItemIsTristate") +
    gsi::enum_const ("ItemNeverHasChildren", Qt::ItemNeverHasChildren, "@brief Enum constant Qt::ItemNeverHasChildren") +
    gsi::enum_const ("ItemIsUserTristate", Qt::ItemIsUserTristate, "@brief Enum constant Qt::ItemIsUserTristate"),
  "@qt\n@brief This class represents the Qt::ItemFlag enum");

static gsi::QFlagsClass<Qt::ItemFlag > decl_Qt_ItemFlag_Enums ("QtCore", "Qt_QFlags_ItemFlag",
  "@qt\n@brief This class represents the QFlags<Qt::ItemFlag> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<Qt_Namespace> inject_Qt_ItemFlag_Enum_in_parent (decl_Qt_ItemFlag_Enum.defs ());
static gsi::ClassExt<Qt_Namespace> decl_Qt_ItemFlag_Enum_as_child (decl_Qt_ItemFlag_Enum, "ItemFlag");
static gsi::ClassExt<Qt_Namespace> decl_Qt_ItemFlag_Enums_as_child (decl_Qt_ItemFlag_Enums, "QFlags_ItemFlag");

}

