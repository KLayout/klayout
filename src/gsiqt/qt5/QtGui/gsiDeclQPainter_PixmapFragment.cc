
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2019 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQPainter_PixmapFragment.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QPainter>
#include <QPointF>
#include <QRectF>
#include "gsiQt.h"
#include "gsiQtGuiCommon.h"
#include "gsiDeclQtGuiTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// class QPainter::PixmapFragment

//  Constructor QPainter::PixmapFragment::PixmapFragment()


static void _init_ctor_QPainter_PixmapFragment_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QPainter::PixmapFragment> ();
}

static void _call_ctor_QPainter_PixmapFragment_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QPainter::PixmapFragment *> (new QPainter::PixmapFragment ());
}


// static QPainter::PixmapFragment QPainter::PixmapFragment::create(const QPointF &pos, const QRectF &sourceRect, double scaleX, double scaleY, double rotation, double opacity)


static void _init_f_create_7592 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("pos");
  decl->add_arg<const QPointF & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("sourceRect");
  decl->add_arg<const QRectF & > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("scaleX", true, "1");
  decl->add_arg<double > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("scaleY", true, "1");
  decl->add_arg<double > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("rotation", true, "0");
  decl->add_arg<double > (argspec_4);
  static gsi::ArgSpecBase argspec_5 ("opacity", true, "1");
  decl->add_arg<double > (argspec_5);
  decl->set_return<QPainter::PixmapFragment > ();
}

static void _call_f_create_7592 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QPointF &arg1 = gsi::arg_reader<const QPointF & >() (args, heap);
  const QRectF &arg2 = gsi::arg_reader<const QRectF & >() (args, heap);
  double arg3 = args ? gsi::arg_reader<double >() (args, heap) : gsi::arg_maker<double >() (1, heap);
  double arg4 = args ? gsi::arg_reader<double >() (args, heap) : gsi::arg_maker<double >() (1, heap);
  double arg5 = args ? gsi::arg_reader<double >() (args, heap) : gsi::arg_maker<double >() (0, heap);
  double arg6 = args ? gsi::arg_reader<double >() (args, heap) : gsi::arg_maker<double >() (1, heap);
  ret.write<QPainter::PixmapFragment > ((QPainter::PixmapFragment)QPainter::PixmapFragment::create (arg1, arg2, arg3, arg4, arg5, arg6));
}



namespace gsi
{

static gsi::Methods methods_QPainter_PixmapFragment () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QPainter::PixmapFragment::PixmapFragment()\nThis method creates an object of class QPainter::PixmapFragment.", &_init_ctor_QPainter_PixmapFragment_0, &_call_ctor_QPainter_PixmapFragment_0);
  methods += new qt_gsi::GenericStaticMethod ("qt_create", "@brief Static method QPainter::PixmapFragment QPainter::PixmapFragment::create(const QPointF &pos, const QRectF &sourceRect, double scaleX, double scaleY, double rotation, double opacity)\nThis method is static and can be called without an instance.", &_init_f_create_7592, &_call_f_create_7592);
  return methods;
}

gsi::Class<QPainter::PixmapFragment> decl_QPainter_PixmapFragment ("QtGui", "QPainter_PixmapFragment",
  methods_QPainter_PixmapFragment (),
  "@qt\n@brief Binding of QPainter::PixmapFragment");

gsi::ClassExt<QPainter> decl_QPainter_PixmapFragment_as_child (decl_QPainter_PixmapFragment, "PixmapFragment");

GSI_QTGUI_PUBLIC gsi::Class<QPainter::PixmapFragment> &qtdecl_QPainter_PixmapFragment () { return decl_QPainter_PixmapFragment; }

}

