
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2019 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQNativeGestureEvent.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QNativeGestureEvent>
#include <QEvent>
#include <QPoint>
#include <QPointF>
#include "gsiQt.h"
#include "gsiQtGuiCommon.h"
#include "gsiDeclQtGuiTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// class QNativeGestureEvent

//  Constructor QNativeGestureEvent::QNativeGestureEvent(Qt::NativeGestureType type, const QPointF &localPos, const QPointF &windowPos, const QPointF &screenPos, double value, unsigned long int sequenceId, quint64 intArgument)


static void _init_ctor_QNativeGestureEvent_12349 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("type");
  decl->add_arg<const qt_gsi::Converter<Qt::NativeGestureType>::target_type & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("localPos");
  decl->add_arg<const QPointF & > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("windowPos");
  decl->add_arg<const QPointF & > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("screenPos");
  decl->add_arg<const QPointF & > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("value");
  decl->add_arg<double > (argspec_4);
  static gsi::ArgSpecBase argspec_5 ("sequenceId");
  decl->add_arg<unsigned long int > (argspec_5);
  static gsi::ArgSpecBase argspec_6 ("intArgument");
  decl->add_arg<quint64 > (argspec_6);
  decl->set_return_new<QNativeGestureEvent> ();
}

static void _call_ctor_QNativeGestureEvent_12349 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<Qt::NativeGestureType>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<Qt::NativeGestureType>::target_type & >() (args, heap);
  const QPointF &arg2 = gsi::arg_reader<const QPointF & >() (args, heap);
  const QPointF &arg3 = gsi::arg_reader<const QPointF & >() (args, heap);
  const QPointF &arg4 = gsi::arg_reader<const QPointF & >() (args, heap);
  double arg5 = gsi::arg_reader<double >() (args, heap);
  unsigned long int arg6 = gsi::arg_reader<unsigned long int >() (args, heap);
  quint64 arg7 = gsi::arg_reader<quint64 >() (args, heap);
  ret.write<QNativeGestureEvent *> (new QNativeGestureEvent (qt_gsi::QtToCppAdaptor<Qt::NativeGestureType>(arg1).cref(), arg2, arg3, arg4, arg5, arg6, arg7));
}


// Qt::NativeGestureType QNativeGestureEvent::gestureType()


static void _init_f_gestureType_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<Qt::NativeGestureType>::target_type > ();
}

static void _call_f_gestureType_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qt_gsi::Converter<Qt::NativeGestureType>::target_type > ((qt_gsi::Converter<Qt::NativeGestureType>::target_type)qt_gsi::CppToQtAdaptor<Qt::NativeGestureType>(((QNativeGestureEvent *)cls)->gestureType ()));
}


// const QPoint QNativeGestureEvent::globalPos()


static void _init_f_globalPos_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<const QPoint > ();
}

static void _call_f_globalPos_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<const QPoint > ((const QPoint)((QNativeGestureEvent *)cls)->globalPos ());
}


// const QPointF &QNativeGestureEvent::localPos()


static void _init_f_localPos_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<const QPointF & > ();
}

static void _call_f_localPos_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<const QPointF & > ((const QPointF &)((QNativeGestureEvent *)cls)->localPos ());
}


// const QPoint QNativeGestureEvent::pos()


static void _init_f_pos_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<const QPoint > ();
}

static void _call_f_pos_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<const QPoint > ((const QPoint)((QNativeGestureEvent *)cls)->pos ());
}


// const QPointF &QNativeGestureEvent::screenPos()


static void _init_f_screenPos_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<const QPointF & > ();
}

static void _call_f_screenPos_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<const QPointF & > ((const QPointF &)((QNativeGestureEvent *)cls)->screenPos ());
}


// double QNativeGestureEvent::value()


static void _init_f_value_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<double > ();
}

static void _call_f_value_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<double > ((double)((QNativeGestureEvent *)cls)->value ());
}


// const QPointF &QNativeGestureEvent::windowPos()


static void _init_f_windowPos_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<const QPointF & > ();
}

static void _call_f_windowPos_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<const QPointF & > ((const QPointF &)((QNativeGestureEvent *)cls)->windowPos ());
}



namespace gsi
{

static gsi::Methods methods_QNativeGestureEvent () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QNativeGestureEvent::QNativeGestureEvent(Qt::NativeGestureType type, const QPointF &localPos, const QPointF &windowPos, const QPointF &screenPos, double value, unsigned long int sequenceId, quint64 intArgument)\nThis method creates an object of class QNativeGestureEvent.", &_init_ctor_QNativeGestureEvent_12349, &_call_ctor_QNativeGestureEvent_12349);
  methods += new qt_gsi::GenericMethod ("gestureType", "@brief Method Qt::NativeGestureType QNativeGestureEvent::gestureType()\n", true, &_init_f_gestureType_c0, &_call_f_gestureType_c0);
  methods += new qt_gsi::GenericMethod ("globalPos", "@brief Method const QPoint QNativeGestureEvent::globalPos()\n", true, &_init_f_globalPos_c0, &_call_f_globalPos_c0);
  methods += new qt_gsi::GenericMethod ("localPos", "@brief Method const QPointF &QNativeGestureEvent::localPos()\n", true, &_init_f_localPos_c0, &_call_f_localPos_c0);
  methods += new qt_gsi::GenericMethod ("pos", "@brief Method const QPoint QNativeGestureEvent::pos()\n", true, &_init_f_pos_c0, &_call_f_pos_c0);
  methods += new qt_gsi::GenericMethod ("screenPos", "@brief Method const QPointF &QNativeGestureEvent::screenPos()\n", true, &_init_f_screenPos_c0, &_call_f_screenPos_c0);
  methods += new qt_gsi::GenericMethod ("value", "@brief Method double QNativeGestureEvent::value()\n", true, &_init_f_value_c0, &_call_f_value_c0);
  methods += new qt_gsi::GenericMethod ("windowPos", "@brief Method const QPointF &QNativeGestureEvent::windowPos()\n", true, &_init_f_windowPos_c0, &_call_f_windowPos_c0);
  return methods;
}

gsi::Class<QInputEvent> &qtdecl_QInputEvent ();

gsi::Class<QNativeGestureEvent> decl_QNativeGestureEvent (qtdecl_QInputEvent (), "QtGui", "QNativeGestureEvent",
  methods_QNativeGestureEvent (),
  "@qt\n@brief Binding of QNativeGestureEvent");


GSI_QTGUI_PUBLIC gsi::Class<QNativeGestureEvent> &qtdecl_QNativeGestureEvent () { return decl_QNativeGestureEvent; }

}

