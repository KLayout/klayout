
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2019 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQAccessible_ActivationObserver.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QAccessible>
#include "gsiQt.h"
#include "gsiQtGuiCommon.h"
#include "gsiDeclQtGuiTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// class QAccessible::ActivationObserver

// void QAccessible::ActivationObserver::accessibilityActiveChanged(bool active)


static void _init_f_accessibilityActiveChanged_864 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("active");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_accessibilityActiveChanged_864 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  bool arg1 = gsi::arg_reader<bool >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QAccessible::ActivationObserver *)cls)->accessibilityActiveChanged (arg1);
}


namespace gsi
{

static gsi::Methods methods_QAccessible_ActivationObserver () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericMethod ("accessibilityActiveChanged", "@brief Method void QAccessible::ActivationObserver::accessibilityActiveChanged(bool active)\n", false, &_init_f_accessibilityActiveChanged_864, &_call_f_accessibilityActiveChanged_864);
  return methods;
}

gsi::Class<QAccessible::ActivationObserver> decl_QAccessible_ActivationObserver ("QtGui", "QAccessible_ActivationObserver_Native",
  methods_QAccessible_ActivationObserver (),
  "@hide\n@alias QAccessible_ActivationObserver");

GSI_QTGUI_PUBLIC gsi::Class<QAccessible::ActivationObserver> &qtdecl_QAccessible_ActivationObserver () { return decl_QAccessible_ActivationObserver; }

}


class QAccessible_ActivationObserver_Adaptor : public QAccessible::ActivationObserver, public qt_gsi::QtObjectBase
{
public:

  virtual ~QAccessible_ActivationObserver_Adaptor();

  //  [adaptor ctor] QAccessible::ActivationObserver::ActivationObserver()
  QAccessible_ActivationObserver_Adaptor() : QAccessible::ActivationObserver()
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  [adaptor impl] void QAccessible::ActivationObserver::accessibilityActiveChanged(bool active)
  void cbs_accessibilityActiveChanged_864_0(bool active)
  {
    __SUPPRESS_UNUSED_WARNING (active);
    throw qt_gsi::AbstractMethodCalledException("accessibilityActiveChanged");
  }

  virtual void accessibilityActiveChanged(bool active)
  {
    if (cb_accessibilityActiveChanged_864_0.can_issue()) {
      cb_accessibilityActiveChanged_864_0.issue<QAccessible_ActivationObserver_Adaptor, bool>(&QAccessible_ActivationObserver_Adaptor::cbs_accessibilityActiveChanged_864_0, active);
    } else {
      throw qt_gsi::AbstractMethodCalledException("accessibilityActiveChanged");
    }
  }

  gsi::Callback cb_accessibilityActiveChanged_864_0;
};

QAccessible_ActivationObserver_Adaptor::~QAccessible_ActivationObserver_Adaptor() { }

//  Constructor QAccessible::ActivationObserver::ActivationObserver() (adaptor class)

static void _init_ctor_QAccessible_ActivationObserver_Adaptor_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QAccessible_ActivationObserver_Adaptor> ();
}

static void _call_ctor_QAccessible_ActivationObserver_Adaptor_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QAccessible_ActivationObserver_Adaptor *> (new QAccessible_ActivationObserver_Adaptor ());
}


// void QAccessible::ActivationObserver::accessibilityActiveChanged(bool active)

static void _init_cbs_accessibilityActiveChanged_864_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("active");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_accessibilityActiveChanged_864_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  bool arg1 = args.read<bool > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QAccessible_ActivationObserver_Adaptor *)cls)->cbs_accessibilityActiveChanged_864_0 (arg1);
}

static void _set_callback_cbs_accessibilityActiveChanged_864_0 (void *cls, const gsi::Callback &cb)
{
  ((QAccessible_ActivationObserver_Adaptor *)cls)->cb_accessibilityActiveChanged_864_0 = cb;
}


namespace gsi
{

gsi::Class<QAccessible::ActivationObserver> &qtdecl_QAccessible_ActivationObserver ();

static gsi::Methods methods_QAccessible_ActivationObserver_Adaptor () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QAccessible::ActivationObserver::ActivationObserver()\nThis method creates an object of class QAccessible::ActivationObserver.", &_init_ctor_QAccessible_ActivationObserver_Adaptor_0, &_call_ctor_QAccessible_ActivationObserver_Adaptor_0);
  methods += new qt_gsi::GenericMethod ("accessibilityActiveChanged", "@hide", false, &_init_cbs_accessibilityActiveChanged_864_0, &_call_cbs_accessibilityActiveChanged_864_0);
  methods += new qt_gsi::GenericMethod ("accessibilityActiveChanged", "@brief Virtual method void QAccessible::ActivationObserver::accessibilityActiveChanged(bool active)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_accessibilityActiveChanged_864_0, &_call_cbs_accessibilityActiveChanged_864_0, &_set_callback_cbs_accessibilityActiveChanged_864_0);
  return methods;
}

gsi::Class<QAccessible_ActivationObserver_Adaptor> decl_QAccessible_ActivationObserver_Adaptor (qtdecl_QAccessible_ActivationObserver (), "QtGui", "QAccessible_ActivationObserver",
  methods_QAccessible_ActivationObserver_Adaptor (),
  "@qt\n@brief Binding of QAccessible::ActivationObserver");

gsi::ClassExt<QAccessible> decl_QAccessible_ActivationObserver_as_child (decl_QAccessible_ActivationObserver_Adaptor, "ActivationObserver");
}

