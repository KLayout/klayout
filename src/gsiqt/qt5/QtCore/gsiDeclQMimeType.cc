
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2019 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQMimeType.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QMimeType>
#include "gsiQt.h"
#include "gsiQtCoreCommon.h"
#include "gsiDeclQtCoreTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// class QMimeType

//  Constructor QMimeType::QMimeType()


static void _init_ctor_QMimeType_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QMimeType> ();
}

static void _call_ctor_QMimeType_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QMimeType *> (new QMimeType ());
}


//  Constructor QMimeType::QMimeType(const QMimeType &other)


static void _init_ctor_QMimeType_2204 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QMimeType & > (argspec_0);
  decl->set_return_new<QMimeType> ();
}

static void _call_ctor_QMimeType_2204 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QMimeType &arg1 = gsi::arg_reader<const QMimeType & >() (args, heap);
  ret.write<QMimeType *> (new QMimeType (arg1));
}


// QStringList QMimeType::aliases()


static void _init_f_aliases_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QStringList > ();
}

static void _call_f_aliases_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QStringList > ((QStringList)((QMimeType *)cls)->aliases ());
}


// QStringList QMimeType::allAncestors()


static void _init_f_allAncestors_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QStringList > ();
}

static void _call_f_allAncestors_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QStringList > ((QStringList)((QMimeType *)cls)->allAncestors ());
}


// QString QMimeType::comment()


static void _init_f_comment_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_comment_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QString > ((QString)((QMimeType *)cls)->comment ());
}


// QString QMimeType::filterString()


static void _init_f_filterString_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_filterString_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QString > ((QString)((QMimeType *)cls)->filterString ());
}


// QString QMimeType::genericIconName()


static void _init_f_genericIconName_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_genericIconName_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QString > ((QString)((QMimeType *)cls)->genericIconName ());
}


// QStringList QMimeType::globPatterns()


static void _init_f_globPatterns_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QStringList > ();
}

static void _call_f_globPatterns_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QStringList > ((QStringList)((QMimeType *)cls)->globPatterns ());
}


// QString QMimeType::iconName()


static void _init_f_iconName_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_iconName_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QString > ((QString)((QMimeType *)cls)->iconName ());
}


// bool QMimeType::inherits(const QString &mimeTypeName)


static void _init_f_inherits_c2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("mimeTypeName");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_inherits_c2025 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = gsi::arg_reader<const QString & >() (args, heap);
  ret.write<bool > ((bool)((QMimeType *)cls)->inherits (arg1));
}


// bool QMimeType::isDefault()


static void _init_f_isDefault_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isDefault_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QMimeType *)cls)->isDefault ());
}


// bool QMimeType::isValid()


static void _init_f_isValid_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isValid_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QMimeType *)cls)->isValid ());
}


// QString QMimeType::name()


static void _init_f_name_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_name_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QString > ((QString)((QMimeType *)cls)->name ());
}


// bool QMimeType::operator!=(const QMimeType &other)


static void _init_f_operator_excl__eq__c2204 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QMimeType & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_operator_excl__eq__c2204 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QMimeType &arg1 = gsi::arg_reader<const QMimeType & >() (args, heap);
  ret.write<bool > ((bool)((QMimeType *)cls)->operator!= (arg1));
}


// QMimeType &QMimeType::operator=(const QMimeType &other)


static void _init_f_operator_eq__2204 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QMimeType & > (argspec_0);
  decl->set_return<QMimeType & > ();
}

static void _call_f_operator_eq__2204 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QMimeType &arg1 = gsi::arg_reader<const QMimeType & >() (args, heap);
  ret.write<QMimeType & > ((QMimeType &)((QMimeType *)cls)->operator= (arg1));
}


// bool QMimeType::operator==(const QMimeType &other)


static void _init_f_operator_eq__eq__c2204 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QMimeType & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_operator_eq__eq__c2204 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QMimeType &arg1 = gsi::arg_reader<const QMimeType & >() (args, heap);
  ret.write<bool > ((bool)((QMimeType *)cls)->operator== (arg1));
}


// QStringList QMimeType::parentMimeTypes()


static void _init_f_parentMimeTypes_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QStringList > ();
}

static void _call_f_parentMimeTypes_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QStringList > ((QStringList)((QMimeType *)cls)->parentMimeTypes ());
}


// QString QMimeType::preferredSuffix()


static void _init_f_preferredSuffix_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_preferredSuffix_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QString > ((QString)((QMimeType *)cls)->preferredSuffix ());
}


// QStringList QMimeType::suffixes()


static void _init_f_suffixes_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QStringList > ();
}

static void _call_f_suffixes_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QStringList > ((QStringList)((QMimeType *)cls)->suffixes ());
}


// void QMimeType::swap(QMimeType &other)


static void _init_f_swap_1509 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<QMimeType & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_swap_1509 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QMimeType &arg1 = gsi::arg_reader<QMimeType & >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMimeType *)cls)->swap (arg1);
}



namespace gsi
{

static gsi::Methods methods_QMimeType () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QMimeType::QMimeType()\nThis method creates an object of class QMimeType.", &_init_ctor_QMimeType_0, &_call_ctor_QMimeType_0);
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QMimeType::QMimeType(const QMimeType &other)\nThis method creates an object of class QMimeType.", &_init_ctor_QMimeType_2204, &_call_ctor_QMimeType_2204);
  methods += new qt_gsi::GenericMethod ("aliases", "@brief Method QStringList QMimeType::aliases()\n", true, &_init_f_aliases_c0, &_call_f_aliases_c0);
  methods += new qt_gsi::GenericMethod ("allAncestors", "@brief Method QStringList QMimeType::allAncestors()\n", true, &_init_f_allAncestors_c0, &_call_f_allAncestors_c0);
  methods += new qt_gsi::GenericMethod ("comment", "@brief Method QString QMimeType::comment()\n", true, &_init_f_comment_c0, &_call_f_comment_c0);
  methods += new qt_gsi::GenericMethod ("filterString", "@brief Method QString QMimeType::filterString()\n", true, &_init_f_filterString_c0, &_call_f_filterString_c0);
  methods += new qt_gsi::GenericMethod ("genericIconName", "@brief Method QString QMimeType::genericIconName()\n", true, &_init_f_genericIconName_c0, &_call_f_genericIconName_c0);
  methods += new qt_gsi::GenericMethod ("globPatterns", "@brief Method QStringList QMimeType::globPatterns()\n", true, &_init_f_globPatterns_c0, &_call_f_globPatterns_c0);
  methods += new qt_gsi::GenericMethod ("iconName", "@brief Method QString QMimeType::iconName()\n", true, &_init_f_iconName_c0, &_call_f_iconName_c0);
  methods += new qt_gsi::GenericMethod ("inherits", "@brief Method bool QMimeType::inherits(const QString &mimeTypeName)\n", true, &_init_f_inherits_c2025, &_call_f_inherits_c2025);
  methods += new qt_gsi::GenericMethod ("isDefault?", "@brief Method bool QMimeType::isDefault()\n", true, &_init_f_isDefault_c0, &_call_f_isDefault_c0);
  methods += new qt_gsi::GenericMethod ("isValid?", "@brief Method bool QMimeType::isValid()\n", true, &_init_f_isValid_c0, &_call_f_isValid_c0);
  methods += new qt_gsi::GenericMethod ("name", "@brief Method QString QMimeType::name()\n", true, &_init_f_name_c0, &_call_f_name_c0);
  methods += new qt_gsi::GenericMethod ("!=", "@brief Method bool QMimeType::operator!=(const QMimeType &other)\n", true, &_init_f_operator_excl__eq__c2204, &_call_f_operator_excl__eq__c2204);
  methods += new qt_gsi::GenericMethod ("assign", "@brief Method QMimeType &QMimeType::operator=(const QMimeType &other)\n", false, &_init_f_operator_eq__2204, &_call_f_operator_eq__2204);
  methods += new qt_gsi::GenericMethod ("==", "@brief Method bool QMimeType::operator==(const QMimeType &other)\n", true, &_init_f_operator_eq__eq__c2204, &_call_f_operator_eq__eq__c2204);
  methods += new qt_gsi::GenericMethod ("parentMimeTypes", "@brief Method QStringList QMimeType::parentMimeTypes()\n", true, &_init_f_parentMimeTypes_c0, &_call_f_parentMimeTypes_c0);
  methods += new qt_gsi::GenericMethod ("preferredSuffix", "@brief Method QString QMimeType::preferredSuffix()\n", true, &_init_f_preferredSuffix_c0, &_call_f_preferredSuffix_c0);
  methods += new qt_gsi::GenericMethod ("suffixes", "@brief Method QStringList QMimeType::suffixes()\n", true, &_init_f_suffixes_c0, &_call_f_suffixes_c0);
  methods += new qt_gsi::GenericMethod ("swap", "@brief Method void QMimeType::swap(QMimeType &other)\n", false, &_init_f_swap_1509, &_call_f_swap_1509);
  return methods;
}

gsi::Class<QMimeType> decl_QMimeType ("QtCore", "QMimeType",
  methods_QMimeType (),
  "@qt\n@brief Binding of QMimeType");


GSI_QTCORE_PUBLIC gsi::Class<QMimeType> &qtdecl_QMimeType () { return decl_QMimeType; }

}

