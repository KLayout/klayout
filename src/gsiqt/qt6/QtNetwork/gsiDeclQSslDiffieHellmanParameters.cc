
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2023 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQSslDiffieHellmanParameters.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QSslDiffieHellmanParameters>
#include <QIODevice>
#include "gsiQt.h"
#include "gsiQtNetworkCommon.h"
#include <memory>

// -----------------------------------------------------------------------
// class QSslDiffieHellmanParameters

//  Constructor QSslDiffieHellmanParameters::QSslDiffieHellmanParameters()


static void _init_ctor_QSslDiffieHellmanParameters_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QSslDiffieHellmanParameters> ();
}

static void _call_ctor_QSslDiffieHellmanParameters_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QSslDiffieHellmanParameters *> (new QSslDiffieHellmanParameters ());
}


//  Constructor QSslDiffieHellmanParameters::QSslDiffieHellmanParameters(const QSslDiffieHellmanParameters &other)


static void _init_ctor_QSslDiffieHellmanParameters_4032 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QSslDiffieHellmanParameters & > (argspec_0);
  decl->set_return_new<QSslDiffieHellmanParameters> ();
}

static void _call_ctor_QSslDiffieHellmanParameters_4032 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QSslDiffieHellmanParameters &arg1 = gsi::arg_reader<const QSslDiffieHellmanParameters & >() (args, heap);
  ret.write<QSslDiffieHellmanParameters *> (new QSslDiffieHellmanParameters (arg1));
}


// QSslDiffieHellmanParameters::Error QSslDiffieHellmanParameters::error()


static void _init_f_error_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QSslDiffieHellmanParameters::Error>::target_type > ();
}

static void _call_f_error_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qt_gsi::Converter<QSslDiffieHellmanParameters::Error>::target_type > ((qt_gsi::Converter<QSslDiffieHellmanParameters::Error>::target_type)qt_gsi::CppToQtAdaptor<QSslDiffieHellmanParameters::Error>(((QSslDiffieHellmanParameters *)cls)->error ()));
}


// QString QSslDiffieHellmanParameters::errorString()


static void _init_f_errorString_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_errorString_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QString > ((QString)((QSslDiffieHellmanParameters *)cls)->errorString ());
}


// bool QSslDiffieHellmanParameters::isEmpty()


static void _init_f_isEmpty_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isEmpty_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QSslDiffieHellmanParameters *)cls)->isEmpty ());
}


// bool QSslDiffieHellmanParameters::isValid()


static void _init_f_isValid_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isValid_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QSslDiffieHellmanParameters *)cls)->isValid ());
}


// QSslDiffieHellmanParameters &QSslDiffieHellmanParameters::operator=(const QSslDiffieHellmanParameters &other)


static void _init_f_operator_eq__4032 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QSslDiffieHellmanParameters & > (argspec_0);
  decl->set_return<QSslDiffieHellmanParameters & > ();
}

static void _call_f_operator_eq__4032 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QSslDiffieHellmanParameters &arg1 = gsi::arg_reader<const QSslDiffieHellmanParameters & >() (args, heap);
  ret.write<QSslDiffieHellmanParameters & > ((QSslDiffieHellmanParameters &)((QSslDiffieHellmanParameters *)cls)->operator= (arg1));
}


// void QSslDiffieHellmanParameters::swap(QSslDiffieHellmanParameters &other)


static void _init_f_swap_3337 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<QSslDiffieHellmanParameters & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_swap_3337 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QSslDiffieHellmanParameters &arg1 = gsi::arg_reader<QSslDiffieHellmanParameters & >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QSslDiffieHellmanParameters *)cls)->swap (arg1);
}


// static QSslDiffieHellmanParameters QSslDiffieHellmanParameters::defaultParameters()


static void _init_f_defaultParameters_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return<QSslDiffieHellmanParameters > ();
}

static void _call_f_defaultParameters_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QSslDiffieHellmanParameters > ((QSslDiffieHellmanParameters)QSslDiffieHellmanParameters::defaultParameters ());
}


// static QSslDiffieHellmanParameters QSslDiffieHellmanParameters::fromEncoded(const QByteArray &encoded, QSsl::EncodingFormat format)


static void _init_f_fromEncoded_4564 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("encoded");
  decl->add_arg<const QByteArray & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("format", true, "QSsl::Pem");
  decl->add_arg<const qt_gsi::Converter<QSsl::EncodingFormat>::target_type & > (argspec_1);
  decl->set_return<QSslDiffieHellmanParameters > ();
}

static void _call_f_fromEncoded_4564 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QByteArray &arg1 = gsi::arg_reader<const QByteArray & >() (args, heap);
  const qt_gsi::Converter<QSsl::EncodingFormat>::target_type & arg2 = args ? gsi::arg_reader<const qt_gsi::Converter<QSsl::EncodingFormat>::target_type & >() (args, heap) : gsi::arg_maker<const qt_gsi::Converter<QSsl::EncodingFormat>::target_type & >() (qt_gsi::CppToQtReadAdaptor<QSsl::EncodingFormat>(heap, QSsl::Pem), heap);
  ret.write<QSslDiffieHellmanParameters > ((QSslDiffieHellmanParameters)QSslDiffieHellmanParameters::fromEncoded (arg1, qt_gsi::QtToCppAdaptor<QSsl::EncodingFormat>(arg2).cref()));
}


// static QSslDiffieHellmanParameters QSslDiffieHellmanParameters::fromEncoded(QIODevice *device, QSsl::EncodingFormat format)


static void _init_f_fromEncoded_3702 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<QIODevice * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("format", true, "QSsl::Pem");
  decl->add_arg<const qt_gsi::Converter<QSsl::EncodingFormat>::target_type & > (argspec_1);
  decl->set_return<QSslDiffieHellmanParameters > ();
}

static void _call_f_fromEncoded_3702 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QIODevice *arg1 = gsi::arg_reader<QIODevice * >() (args, heap);
  const qt_gsi::Converter<QSsl::EncodingFormat>::target_type & arg2 = args ? gsi::arg_reader<const qt_gsi::Converter<QSsl::EncodingFormat>::target_type & >() (args, heap) : gsi::arg_maker<const qt_gsi::Converter<QSsl::EncodingFormat>::target_type & >() (qt_gsi::CppToQtReadAdaptor<QSsl::EncodingFormat>(heap, QSsl::Pem), heap);
  ret.write<QSslDiffieHellmanParameters > ((QSslDiffieHellmanParameters)QSslDiffieHellmanParameters::fromEncoded (arg1, qt_gsi::QtToCppAdaptor<QSsl::EncodingFormat>(arg2).cref()));
}



namespace gsi
{

static gsi::Methods methods_QSslDiffieHellmanParameters () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QSslDiffieHellmanParameters::QSslDiffieHellmanParameters()\nThis method creates an object of class QSslDiffieHellmanParameters.", &_init_ctor_QSslDiffieHellmanParameters_0, &_call_ctor_QSslDiffieHellmanParameters_0);
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QSslDiffieHellmanParameters::QSslDiffieHellmanParameters(const QSslDiffieHellmanParameters &other)\nThis method creates an object of class QSslDiffieHellmanParameters.", &_init_ctor_QSslDiffieHellmanParameters_4032, &_call_ctor_QSslDiffieHellmanParameters_4032);
  methods += new qt_gsi::GenericMethod ("error", "@brief Method QSslDiffieHellmanParameters::Error QSslDiffieHellmanParameters::error()\n", true, &_init_f_error_c0, &_call_f_error_c0);
  methods += new qt_gsi::GenericMethod ("errorString", "@brief Method QString QSslDiffieHellmanParameters::errorString()\n", true, &_init_f_errorString_c0, &_call_f_errorString_c0);
  methods += new qt_gsi::GenericMethod ("isEmpty?", "@brief Method bool QSslDiffieHellmanParameters::isEmpty()\n", true, &_init_f_isEmpty_c0, &_call_f_isEmpty_c0);
  methods += new qt_gsi::GenericMethod ("isValid?", "@brief Method bool QSslDiffieHellmanParameters::isValid()\n", true, &_init_f_isValid_c0, &_call_f_isValid_c0);
  methods += new qt_gsi::GenericMethod ("assign", "@brief Method QSslDiffieHellmanParameters &QSslDiffieHellmanParameters::operator=(const QSslDiffieHellmanParameters &other)\n", false, &_init_f_operator_eq__4032, &_call_f_operator_eq__4032);
  methods += new qt_gsi::GenericMethod ("swap", "@brief Method void QSslDiffieHellmanParameters::swap(QSslDiffieHellmanParameters &other)\n", false, &_init_f_swap_3337, &_call_f_swap_3337);
  methods += new qt_gsi::GenericStaticMethod ("defaultParameters", "@brief Static method QSslDiffieHellmanParameters QSslDiffieHellmanParameters::defaultParameters()\nThis method is static and can be called without an instance.", &_init_f_defaultParameters_0, &_call_f_defaultParameters_0);
  methods += new qt_gsi::GenericStaticMethod ("fromEncoded", "@brief Static method QSslDiffieHellmanParameters QSslDiffieHellmanParameters::fromEncoded(const QByteArray &encoded, QSsl::EncodingFormat format)\nThis method is static and can be called without an instance.", &_init_f_fromEncoded_4564, &_call_f_fromEncoded_4564);
  methods += new qt_gsi::GenericStaticMethod ("fromEncoded", "@brief Static method QSslDiffieHellmanParameters QSslDiffieHellmanParameters::fromEncoded(QIODevice *device, QSsl::EncodingFormat format)\nThis method is static and can be called without an instance.", &_init_f_fromEncoded_3702, &_call_f_fromEncoded_3702);
  return methods;
}

gsi::Class<QSslDiffieHellmanParameters> decl_QSslDiffieHellmanParameters ("QtNetwork", "QSslDiffieHellmanParameters",
  methods_QSslDiffieHellmanParameters (),
  "@qt\n@brief Binding of QSslDiffieHellmanParameters");


GSI_QTNETWORK_PUBLIC gsi::Class<QSslDiffieHellmanParameters> &qtdecl_QSslDiffieHellmanParameters () { return decl_QSslDiffieHellmanParameters; }

}


//  Implementation of the enum wrapper class for QSslDiffieHellmanParameters::Error
namespace qt_gsi
{

static gsi::Enum<QSslDiffieHellmanParameters::Error> decl_QSslDiffieHellmanParameters_Error_Enum ("QtNetwork", "QSslDiffieHellmanParameters_Error",
    gsi::enum_const ("NoError", QSslDiffieHellmanParameters::NoError, "@brief Enum constant QSslDiffieHellmanParameters::NoError") +
    gsi::enum_const ("InvalidInputDataError", QSslDiffieHellmanParameters::InvalidInputDataError, "@brief Enum constant QSslDiffieHellmanParameters::InvalidInputDataError") +
    gsi::enum_const ("UnsafeParametersError", QSslDiffieHellmanParameters::UnsafeParametersError, "@brief Enum constant QSslDiffieHellmanParameters::UnsafeParametersError"),
  "@qt\n@brief This class represents the QSslDiffieHellmanParameters::Error enum");

static gsi::QFlagsClass<QSslDiffieHellmanParameters::Error > decl_QSslDiffieHellmanParameters_Error_Enums ("QtNetwork", "QSslDiffieHellmanParameters_QFlags_Error",
  "@qt\n@brief This class represents the QFlags<QSslDiffieHellmanParameters::Error> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<QSslDiffieHellmanParameters> inject_QSslDiffieHellmanParameters_Error_Enum_in_parent (decl_QSslDiffieHellmanParameters_Error_Enum.defs ());
static gsi::ClassExt<QSslDiffieHellmanParameters> decl_QSslDiffieHellmanParameters_Error_Enum_as_child (decl_QSslDiffieHellmanParameters_Error_Enum, "Error");
static gsi::ClassExt<QSslDiffieHellmanParameters> decl_QSslDiffieHellmanParameters_Error_Enums_as_child (decl_QSslDiffieHellmanParameters_Error_Enums, "QFlags_Error");

}

