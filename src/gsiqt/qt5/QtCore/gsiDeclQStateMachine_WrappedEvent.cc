
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2019 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQStateMachine_WrappedEvent.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QStateMachine>
#include <QEvent>
#include <QObject>
#include "gsiQt.h"
#include "gsiQtCoreCommon.h"
#include "gsiDeclQtCoreTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// class QStateMachine::WrappedEvent

// QEvent *QStateMachine::WrappedEvent::event()


static void _init_f_event_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QEvent * > ();
}

static void _call_f_event_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QEvent * > ((QEvent *)((QStateMachine::WrappedEvent *)cls)->event ());
}


// QObject *QStateMachine::WrappedEvent::object()


static void _init_f_object_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QObject * > ();
}

static void _call_f_object_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QObject * > ((QObject *)((QStateMachine::WrappedEvent *)cls)->object ());
}


namespace gsi
{

static gsi::Methods methods_QStateMachine_WrappedEvent () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericMethod ("event", "@brief Method QEvent *QStateMachine::WrappedEvent::event()\n", true, &_init_f_event_c0, &_call_f_event_c0);
  methods += new qt_gsi::GenericMethod ("object", "@brief Method QObject *QStateMachine::WrappedEvent::object()\n", true, &_init_f_object_c0, &_call_f_object_c0);
  return methods;
}

gsi::Class<QEvent> &qtdecl_QEvent ();

gsi::Class<QStateMachine::WrappedEvent> decl_QStateMachine_WrappedEvent (qtdecl_QEvent (), "QtCore", "QStateMachine_WrappedEvent_Native",
  methods_QStateMachine_WrappedEvent (),
  "@hide\n@alias QStateMachine_WrappedEvent");

GSI_QTCORE_PUBLIC gsi::Class<QStateMachine::WrappedEvent> &qtdecl_QStateMachine_WrappedEvent () { return decl_QStateMachine_WrappedEvent; }

}


class QStateMachine_WrappedEvent_Adaptor : public QStateMachine::WrappedEvent, public qt_gsi::QtObjectBase
{
public:

  virtual ~QStateMachine_WrappedEvent_Adaptor();

  //  [adaptor ctor] QStateMachine::WrappedEvent::WrappedEvent(QObject *object, QEvent *event)
  QStateMachine_WrappedEvent_Adaptor(QObject *object, QEvent *event) : QStateMachine::WrappedEvent(object, event)
  {
    qt_gsi::QtObjectBase::init (this);
  }

  
};

QStateMachine_WrappedEvent_Adaptor::~QStateMachine_WrappedEvent_Adaptor() { }

//  Constructor QStateMachine::WrappedEvent::WrappedEvent(QObject *object, QEvent *event) (adaptor class)

static void _init_ctor_QStateMachine_WrappedEvent_Adaptor_2411 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("object");
  decl->add_arg<QObject * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("event");
  decl->add_arg<QEvent * > (argspec_1);
  decl->set_return_new<QStateMachine_WrappedEvent_Adaptor> ();
}

static void _call_ctor_QStateMachine_WrappedEvent_Adaptor_2411 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QObject *arg1 = gsi::arg_reader<QObject * >() (args, heap);
  QEvent *arg2 = gsi::arg_reader<QEvent * >() (args, heap);
  ret.write<QStateMachine_WrappedEvent_Adaptor *> (new QStateMachine_WrappedEvent_Adaptor (arg1, arg2));
}


namespace gsi
{

gsi::Class<QStateMachine::WrappedEvent> &qtdecl_QStateMachine_WrappedEvent ();

static gsi::Methods methods_QStateMachine_WrappedEvent_Adaptor () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QStateMachine::WrappedEvent::WrappedEvent(QObject *object, QEvent *event)\nThis method creates an object of class QStateMachine::WrappedEvent.", &_init_ctor_QStateMachine_WrappedEvent_Adaptor_2411, &_call_ctor_QStateMachine_WrappedEvent_Adaptor_2411);
  return methods;
}

gsi::Class<QStateMachine_WrappedEvent_Adaptor> decl_QStateMachine_WrappedEvent_Adaptor (qtdecl_QStateMachine_WrappedEvent (), "QtCore", "QStateMachine_WrappedEvent",
  methods_QStateMachine_WrappedEvent_Adaptor (),
  "@qt\n@brief Binding of QStateMachine::WrappedEvent");

gsi::ClassExt<QStateMachine> decl_QStateMachine_WrappedEvent_as_child (decl_QStateMachine_WrappedEvent_Adaptor, "WrappedEvent");
}

