
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2019 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQXmlDefaultHandler.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QXmlDefaultHandler>
#include <QXmlAttributes>
#include <QXmlLocator>
#include <QXmlParseException>
#include "gsiQt.h"
#include "gsiQtXmlCommon.h"
#include "gsiDeclQtXmlTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// class QXmlDefaultHandler

// bool QXmlDefaultHandler::attributeDecl(const QString &eName, const QString &aName, const QString &type, const QString &valueDefault, const QString &value)


static void _init_f_attributeDecl_9693 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("eName");
  decl->add_arg<const QString & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("aName");
  decl->add_arg<const QString & > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("type");
  decl->add_arg<const QString & > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("valueDefault");
  decl->add_arg<const QString & > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("value");
  decl->add_arg<const QString & > (argspec_4);
  decl->set_return<bool > ();
}

static void _call_f_attributeDecl_9693 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = gsi::arg_reader<const QString & >() (args, heap);
  const QString &arg2 = gsi::arg_reader<const QString & >() (args, heap);
  const QString &arg3 = gsi::arg_reader<const QString & >() (args, heap);
  const QString &arg4 = gsi::arg_reader<const QString & >() (args, heap);
  const QString &arg5 = gsi::arg_reader<const QString & >() (args, heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler *)cls)->attributeDecl (arg1, arg2, arg3, arg4, arg5));
}


// bool QXmlDefaultHandler::characters(const QString &ch)


static void _init_f_characters_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("ch");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_characters_2025 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = gsi::arg_reader<const QString & >() (args, heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler *)cls)->characters (arg1));
}


// bool QXmlDefaultHandler::comment(const QString &ch)


static void _init_f_comment_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("ch");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_comment_2025 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = gsi::arg_reader<const QString & >() (args, heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler *)cls)->comment (arg1));
}


// bool QXmlDefaultHandler::endCDATA()


static void _init_f_endCDATA_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_endCDATA_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QXmlDefaultHandler *)cls)->endCDATA ());
}


// bool QXmlDefaultHandler::endDTD()


static void _init_f_endDTD_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_endDTD_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QXmlDefaultHandler *)cls)->endDTD ());
}


// bool QXmlDefaultHandler::endDocument()


static void _init_f_endDocument_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_endDocument_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QXmlDefaultHandler *)cls)->endDocument ());
}


// bool QXmlDefaultHandler::endElement(const QString &namespaceURI, const QString &localName, const QString &qName)


static void _init_f_endElement_5859 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("namespaceURI");
  decl->add_arg<const QString & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("localName");
  decl->add_arg<const QString & > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("qName");
  decl->add_arg<const QString & > (argspec_2);
  decl->set_return<bool > ();
}

static void _call_f_endElement_5859 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = gsi::arg_reader<const QString & >() (args, heap);
  const QString &arg2 = gsi::arg_reader<const QString & >() (args, heap);
  const QString &arg3 = gsi::arg_reader<const QString & >() (args, heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler *)cls)->endElement (arg1, arg2, arg3));
}


// bool QXmlDefaultHandler::endEntity(const QString &name)


static void _init_f_endEntity_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("name");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_endEntity_2025 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = gsi::arg_reader<const QString & >() (args, heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler *)cls)->endEntity (arg1));
}


// bool QXmlDefaultHandler::endPrefixMapping(const QString &prefix)


static void _init_f_endPrefixMapping_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("prefix");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_endPrefixMapping_2025 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = gsi::arg_reader<const QString & >() (args, heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler *)cls)->endPrefixMapping (arg1));
}


// bool QXmlDefaultHandler::error(const QXmlParseException &exception)


static void _init_f_error_3149 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("exception");
  decl->add_arg<const QXmlParseException & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_error_3149 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QXmlParseException &arg1 = gsi::arg_reader<const QXmlParseException & >() (args, heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler *)cls)->error (arg1));
}


// QString QXmlDefaultHandler::errorString()


static void _init_f_errorString_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_errorString_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QString > ((QString)((QXmlDefaultHandler *)cls)->errorString ());
}


// bool QXmlDefaultHandler::externalEntityDecl(const QString &name, const QString &publicId, const QString &systemId)


static void _init_f_externalEntityDecl_5859 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("name");
  decl->add_arg<const QString & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("publicId");
  decl->add_arg<const QString & > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("systemId");
  decl->add_arg<const QString & > (argspec_2);
  decl->set_return<bool > ();
}

static void _call_f_externalEntityDecl_5859 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = gsi::arg_reader<const QString & >() (args, heap);
  const QString &arg2 = gsi::arg_reader<const QString & >() (args, heap);
  const QString &arg3 = gsi::arg_reader<const QString & >() (args, heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler *)cls)->externalEntityDecl (arg1, arg2, arg3));
}


// bool QXmlDefaultHandler::fatalError(const QXmlParseException &exception)


static void _init_f_fatalError_3149 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("exception");
  decl->add_arg<const QXmlParseException & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_fatalError_3149 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QXmlParseException &arg1 = gsi::arg_reader<const QXmlParseException & >() (args, heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler *)cls)->fatalError (arg1));
}


// bool QXmlDefaultHandler::ignorableWhitespace(const QString &ch)


static void _init_f_ignorableWhitespace_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("ch");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_ignorableWhitespace_2025 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = gsi::arg_reader<const QString & >() (args, heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler *)cls)->ignorableWhitespace (arg1));
}


// bool QXmlDefaultHandler::internalEntityDecl(const QString &name, const QString &value)


static void _init_f_internalEntityDecl_3942 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("name");
  decl->add_arg<const QString & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("value");
  decl->add_arg<const QString & > (argspec_1);
  decl->set_return<bool > ();
}

static void _call_f_internalEntityDecl_3942 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = gsi::arg_reader<const QString & >() (args, heap);
  const QString &arg2 = gsi::arg_reader<const QString & >() (args, heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler *)cls)->internalEntityDecl (arg1, arg2));
}


// bool QXmlDefaultHandler::notationDecl(const QString &name, const QString &publicId, const QString &systemId)


static void _init_f_notationDecl_5859 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("name");
  decl->add_arg<const QString & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("publicId");
  decl->add_arg<const QString & > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("systemId");
  decl->add_arg<const QString & > (argspec_2);
  decl->set_return<bool > ();
}

static void _call_f_notationDecl_5859 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = gsi::arg_reader<const QString & >() (args, heap);
  const QString &arg2 = gsi::arg_reader<const QString & >() (args, heap);
  const QString &arg3 = gsi::arg_reader<const QString & >() (args, heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler *)cls)->notationDecl (arg1, arg2, arg3));
}


// bool QXmlDefaultHandler::processingInstruction(const QString &target, const QString &data)


static void _init_f_processingInstruction_3942 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("target");
  decl->add_arg<const QString & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("data");
  decl->add_arg<const QString & > (argspec_1);
  decl->set_return<bool > ();
}

static void _call_f_processingInstruction_3942 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = gsi::arg_reader<const QString & >() (args, heap);
  const QString &arg2 = gsi::arg_reader<const QString & >() (args, heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler *)cls)->processingInstruction (arg1, arg2));
}


// void QXmlDefaultHandler::setDocumentLocator(QXmlLocator *locator)


static void _init_f_setDocumentLocator_1732 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("locator");
  decl->add_arg<QXmlLocator * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setDocumentLocator_1732 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QXmlLocator *arg1 = gsi::arg_reader<QXmlLocator * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QXmlDefaultHandler *)cls)->setDocumentLocator (arg1);
}


// bool QXmlDefaultHandler::skippedEntity(const QString &name)


static void _init_f_skippedEntity_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("name");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_skippedEntity_2025 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = gsi::arg_reader<const QString & >() (args, heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler *)cls)->skippedEntity (arg1));
}


// bool QXmlDefaultHandler::startCDATA()


static void _init_f_startCDATA_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_startCDATA_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QXmlDefaultHandler *)cls)->startCDATA ());
}


// bool QXmlDefaultHandler::startDTD(const QString &name, const QString &publicId, const QString &systemId)


static void _init_f_startDTD_5859 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("name");
  decl->add_arg<const QString & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("publicId");
  decl->add_arg<const QString & > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("systemId");
  decl->add_arg<const QString & > (argspec_2);
  decl->set_return<bool > ();
}

static void _call_f_startDTD_5859 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = gsi::arg_reader<const QString & >() (args, heap);
  const QString &arg2 = gsi::arg_reader<const QString & >() (args, heap);
  const QString &arg3 = gsi::arg_reader<const QString & >() (args, heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler *)cls)->startDTD (arg1, arg2, arg3));
}


// bool QXmlDefaultHandler::startDocument()


static void _init_f_startDocument_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_startDocument_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QXmlDefaultHandler *)cls)->startDocument ());
}


// bool QXmlDefaultHandler::startElement(const QString &namespaceURI, const QString &localName, const QString &qName, const QXmlAttributes &atts)


static void _init_f_startElement_8513 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("namespaceURI");
  decl->add_arg<const QString & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("localName");
  decl->add_arg<const QString & > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("qName");
  decl->add_arg<const QString & > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("atts");
  decl->add_arg<const QXmlAttributes & > (argspec_3);
  decl->set_return<bool > ();
}

static void _call_f_startElement_8513 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = gsi::arg_reader<const QString & >() (args, heap);
  const QString &arg2 = gsi::arg_reader<const QString & >() (args, heap);
  const QString &arg3 = gsi::arg_reader<const QString & >() (args, heap);
  const QXmlAttributes &arg4 = gsi::arg_reader<const QXmlAttributes & >() (args, heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler *)cls)->startElement (arg1, arg2, arg3, arg4));
}


// bool QXmlDefaultHandler::startEntity(const QString &name)


static void _init_f_startEntity_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("name");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_startEntity_2025 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = gsi::arg_reader<const QString & >() (args, heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler *)cls)->startEntity (arg1));
}


// bool QXmlDefaultHandler::startPrefixMapping(const QString &prefix, const QString &uri)


static void _init_f_startPrefixMapping_3942 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("prefix");
  decl->add_arg<const QString & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("uri");
  decl->add_arg<const QString & > (argspec_1);
  decl->set_return<bool > ();
}

static void _call_f_startPrefixMapping_3942 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = gsi::arg_reader<const QString & >() (args, heap);
  const QString &arg2 = gsi::arg_reader<const QString & >() (args, heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler *)cls)->startPrefixMapping (arg1, arg2));
}


// bool QXmlDefaultHandler::unparsedEntityDecl(const QString &name, const QString &publicId, const QString &systemId, const QString &notationName)


static void _init_f_unparsedEntityDecl_7776 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("name");
  decl->add_arg<const QString & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("publicId");
  decl->add_arg<const QString & > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("systemId");
  decl->add_arg<const QString & > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("notationName");
  decl->add_arg<const QString & > (argspec_3);
  decl->set_return<bool > ();
}

static void _call_f_unparsedEntityDecl_7776 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = gsi::arg_reader<const QString & >() (args, heap);
  const QString &arg2 = gsi::arg_reader<const QString & >() (args, heap);
  const QString &arg3 = gsi::arg_reader<const QString & >() (args, heap);
  const QString &arg4 = gsi::arg_reader<const QString & >() (args, heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler *)cls)->unparsedEntityDecl (arg1, arg2, arg3, arg4));
}


// bool QXmlDefaultHandler::warning(const QXmlParseException &exception)


static void _init_f_warning_3149 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("exception");
  decl->add_arg<const QXmlParseException & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_warning_3149 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QXmlParseException &arg1 = gsi::arg_reader<const QXmlParseException & >() (args, heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler *)cls)->warning (arg1));
}


//  base class cast for QXmlContentHandler

static void _init_f_QXmlDefaultHandler_as_QXmlContentHandler (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QXmlContentHandler *> ();
}

static void _call_f_QXmlDefaultHandler_as_QXmlContentHandler (const qt_gsi::GenericMethod *, void *cls, gsi::SerialArgs &, gsi::SerialArgs &ret) 
{
  ret.write<QXmlContentHandler *> ((QXmlContentHandler *)(QXmlDefaultHandler *)cls);
}

static void _init_f_QXmlDefaultHandler_as_const_QXmlContentHandler (qt_gsi::GenericMethod *decl)
{
  decl->set_return<const QXmlContentHandler *> ();
}

static void _call_f_QXmlDefaultHandler_as_const_QXmlContentHandler (const qt_gsi::GenericMethod *, void *cls, gsi::SerialArgs &, gsi::SerialArgs &ret) 
{
  ret.write<const QXmlContentHandler *> ((const QXmlContentHandler *)(const QXmlDefaultHandler *)cls);
}

//  base class cast for QXmlErrorHandler

static void _init_f_QXmlDefaultHandler_as_QXmlErrorHandler (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QXmlErrorHandler *> ();
}

static void _call_f_QXmlDefaultHandler_as_QXmlErrorHandler (const qt_gsi::GenericMethod *, void *cls, gsi::SerialArgs &, gsi::SerialArgs &ret) 
{
  ret.write<QXmlErrorHandler *> ((QXmlErrorHandler *)(QXmlDefaultHandler *)cls);
}

static void _init_f_QXmlDefaultHandler_as_const_QXmlErrorHandler (qt_gsi::GenericMethod *decl)
{
  decl->set_return<const QXmlErrorHandler *> ();
}

static void _call_f_QXmlDefaultHandler_as_const_QXmlErrorHandler (const qt_gsi::GenericMethod *, void *cls, gsi::SerialArgs &, gsi::SerialArgs &ret) 
{
  ret.write<const QXmlErrorHandler *> ((const QXmlErrorHandler *)(const QXmlDefaultHandler *)cls);
}

//  base class cast for QXmlDTDHandler

static void _init_f_QXmlDefaultHandler_as_QXmlDTDHandler (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QXmlDTDHandler *> ();
}

static void _call_f_QXmlDefaultHandler_as_QXmlDTDHandler (const qt_gsi::GenericMethod *, void *cls, gsi::SerialArgs &, gsi::SerialArgs &ret) 
{
  ret.write<QXmlDTDHandler *> ((QXmlDTDHandler *)(QXmlDefaultHandler *)cls);
}

static void _init_f_QXmlDefaultHandler_as_const_QXmlDTDHandler (qt_gsi::GenericMethod *decl)
{
  decl->set_return<const QXmlDTDHandler *> ();
}

static void _call_f_QXmlDefaultHandler_as_const_QXmlDTDHandler (const qt_gsi::GenericMethod *, void *cls, gsi::SerialArgs &, gsi::SerialArgs &ret) 
{
  ret.write<const QXmlDTDHandler *> ((const QXmlDTDHandler *)(const QXmlDefaultHandler *)cls);
}

//  base class cast for QXmlEntityResolver

static void _init_f_QXmlDefaultHandler_as_QXmlEntityResolver (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QXmlEntityResolver *> ();
}

static void _call_f_QXmlDefaultHandler_as_QXmlEntityResolver (const qt_gsi::GenericMethod *, void *cls, gsi::SerialArgs &, gsi::SerialArgs &ret) 
{
  ret.write<QXmlEntityResolver *> ((QXmlEntityResolver *)(QXmlDefaultHandler *)cls);
}

static void _init_f_QXmlDefaultHandler_as_const_QXmlEntityResolver (qt_gsi::GenericMethod *decl)
{
  decl->set_return<const QXmlEntityResolver *> ();
}

static void _call_f_QXmlDefaultHandler_as_const_QXmlEntityResolver (const qt_gsi::GenericMethod *, void *cls, gsi::SerialArgs &, gsi::SerialArgs &ret) 
{
  ret.write<const QXmlEntityResolver *> ((const QXmlEntityResolver *)(const QXmlDefaultHandler *)cls);
}

//  base class cast for QXmlLexicalHandler

static void _init_f_QXmlDefaultHandler_as_QXmlLexicalHandler (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QXmlLexicalHandler *> ();
}

static void _call_f_QXmlDefaultHandler_as_QXmlLexicalHandler (const qt_gsi::GenericMethod *, void *cls, gsi::SerialArgs &, gsi::SerialArgs &ret) 
{
  ret.write<QXmlLexicalHandler *> ((QXmlLexicalHandler *)(QXmlDefaultHandler *)cls);
}

static void _init_f_QXmlDefaultHandler_as_const_QXmlLexicalHandler (qt_gsi::GenericMethod *decl)
{
  decl->set_return<const QXmlLexicalHandler *> ();
}

static void _call_f_QXmlDefaultHandler_as_const_QXmlLexicalHandler (const qt_gsi::GenericMethod *, void *cls, gsi::SerialArgs &, gsi::SerialArgs &ret) 
{
  ret.write<const QXmlLexicalHandler *> ((const QXmlLexicalHandler *)(const QXmlDefaultHandler *)cls);
}

//  base class cast for QXmlDeclHandler

static void _init_f_QXmlDefaultHandler_as_QXmlDeclHandler (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QXmlDeclHandler *> ();
}

static void _call_f_QXmlDefaultHandler_as_QXmlDeclHandler (const qt_gsi::GenericMethod *, void *cls, gsi::SerialArgs &, gsi::SerialArgs &ret) 
{
  ret.write<QXmlDeclHandler *> ((QXmlDeclHandler *)(QXmlDefaultHandler *)cls);
}

static void _init_f_QXmlDefaultHandler_as_const_QXmlDeclHandler (qt_gsi::GenericMethod *decl)
{
  decl->set_return<const QXmlDeclHandler *> ();
}

static void _call_f_QXmlDefaultHandler_as_const_QXmlDeclHandler (const qt_gsi::GenericMethod *, void *cls, gsi::SerialArgs &, gsi::SerialArgs &ret) 
{
  ret.write<const QXmlDeclHandler *> ((const QXmlDeclHandler *)(const QXmlDefaultHandler *)cls);
}


namespace gsi
{

static gsi::Methods methods_QXmlDefaultHandler () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericMethod ("attributeDecl", "@brief Method bool QXmlDefaultHandler::attributeDecl(const QString &eName, const QString &aName, const QString &type, const QString &valueDefault, const QString &value)\nThis is a reimplementation of QXmlDeclHandler::attributeDecl", false, &_init_f_attributeDecl_9693, &_call_f_attributeDecl_9693);
  methods += new qt_gsi::GenericMethod ("characters", "@brief Method bool QXmlDefaultHandler::characters(const QString &ch)\nThis is a reimplementation of QXmlContentHandler::characters", false, &_init_f_characters_2025, &_call_f_characters_2025);
  methods += new qt_gsi::GenericMethod ("comment", "@brief Method bool QXmlDefaultHandler::comment(const QString &ch)\nThis is a reimplementation of QXmlLexicalHandler::comment", false, &_init_f_comment_2025, &_call_f_comment_2025);
  methods += new qt_gsi::GenericMethod ("endCDATA", "@brief Method bool QXmlDefaultHandler::endCDATA()\nThis is a reimplementation of QXmlLexicalHandler::endCDATA", false, &_init_f_endCDATA_0, &_call_f_endCDATA_0);
  methods += new qt_gsi::GenericMethod ("endDTD", "@brief Method bool QXmlDefaultHandler::endDTD()\nThis is a reimplementation of QXmlLexicalHandler::endDTD", false, &_init_f_endDTD_0, &_call_f_endDTD_0);
  methods += new qt_gsi::GenericMethod ("endDocument", "@brief Method bool QXmlDefaultHandler::endDocument()\nThis is a reimplementation of QXmlContentHandler::endDocument", false, &_init_f_endDocument_0, &_call_f_endDocument_0);
  methods += new qt_gsi::GenericMethod ("endElement", "@brief Method bool QXmlDefaultHandler::endElement(const QString &namespaceURI, const QString &localName, const QString &qName)\nThis is a reimplementation of QXmlContentHandler::endElement", false, &_init_f_endElement_5859, &_call_f_endElement_5859);
  methods += new qt_gsi::GenericMethod ("endEntity", "@brief Method bool QXmlDefaultHandler::endEntity(const QString &name)\nThis is a reimplementation of QXmlLexicalHandler::endEntity", false, &_init_f_endEntity_2025, &_call_f_endEntity_2025);
  methods += new qt_gsi::GenericMethod ("endPrefixMapping", "@brief Method bool QXmlDefaultHandler::endPrefixMapping(const QString &prefix)\nThis is a reimplementation of QXmlContentHandler::endPrefixMapping", false, &_init_f_endPrefixMapping_2025, &_call_f_endPrefixMapping_2025);
  methods += new qt_gsi::GenericMethod ("error", "@brief Method bool QXmlDefaultHandler::error(const QXmlParseException &exception)\nThis is a reimplementation of QXmlErrorHandler::error", false, &_init_f_error_3149, &_call_f_error_3149);
  methods += new qt_gsi::GenericMethod ("errorString", "@brief Method QString QXmlDefaultHandler::errorString()\nThis is a reimplementation of QXmlContentHandler::errorString", true, &_init_f_errorString_c0, &_call_f_errorString_c0);
  methods += new qt_gsi::GenericMethod ("externalEntityDecl", "@brief Method bool QXmlDefaultHandler::externalEntityDecl(const QString &name, const QString &publicId, const QString &systemId)\nThis is a reimplementation of QXmlDeclHandler::externalEntityDecl", false, &_init_f_externalEntityDecl_5859, &_call_f_externalEntityDecl_5859);
  methods += new qt_gsi::GenericMethod ("fatalError", "@brief Method bool QXmlDefaultHandler::fatalError(const QXmlParseException &exception)\nThis is a reimplementation of QXmlErrorHandler::fatalError", false, &_init_f_fatalError_3149, &_call_f_fatalError_3149);
  methods += new qt_gsi::GenericMethod ("ignorableWhitespace", "@brief Method bool QXmlDefaultHandler::ignorableWhitespace(const QString &ch)\nThis is a reimplementation of QXmlContentHandler::ignorableWhitespace", false, &_init_f_ignorableWhitespace_2025, &_call_f_ignorableWhitespace_2025);
  methods += new qt_gsi::GenericMethod ("internalEntityDecl", "@brief Method bool QXmlDefaultHandler::internalEntityDecl(const QString &name, const QString &value)\nThis is a reimplementation of QXmlDeclHandler::internalEntityDecl", false, &_init_f_internalEntityDecl_3942, &_call_f_internalEntityDecl_3942);
  methods += new qt_gsi::GenericMethod ("notationDecl", "@brief Method bool QXmlDefaultHandler::notationDecl(const QString &name, const QString &publicId, const QString &systemId)\nThis is a reimplementation of QXmlDTDHandler::notationDecl", false, &_init_f_notationDecl_5859, &_call_f_notationDecl_5859);
  methods += new qt_gsi::GenericMethod ("processingInstruction", "@brief Method bool QXmlDefaultHandler::processingInstruction(const QString &target, const QString &data)\nThis is a reimplementation of QXmlContentHandler::processingInstruction", false, &_init_f_processingInstruction_3942, &_call_f_processingInstruction_3942);
  methods += new qt_gsi::GenericMethod ("setDocumentLocator", "@brief Method void QXmlDefaultHandler::setDocumentLocator(QXmlLocator *locator)\nThis is a reimplementation of QXmlContentHandler::setDocumentLocator", false, &_init_f_setDocumentLocator_1732, &_call_f_setDocumentLocator_1732);
  methods += new qt_gsi::GenericMethod ("skippedEntity", "@brief Method bool QXmlDefaultHandler::skippedEntity(const QString &name)\nThis is a reimplementation of QXmlContentHandler::skippedEntity", false, &_init_f_skippedEntity_2025, &_call_f_skippedEntity_2025);
  methods += new qt_gsi::GenericMethod ("startCDATA", "@brief Method bool QXmlDefaultHandler::startCDATA()\nThis is a reimplementation of QXmlLexicalHandler::startCDATA", false, &_init_f_startCDATA_0, &_call_f_startCDATA_0);
  methods += new qt_gsi::GenericMethod ("startDTD", "@brief Method bool QXmlDefaultHandler::startDTD(const QString &name, const QString &publicId, const QString &systemId)\nThis is a reimplementation of QXmlLexicalHandler::startDTD", false, &_init_f_startDTD_5859, &_call_f_startDTD_5859);
  methods += new qt_gsi::GenericMethod ("startDocument", "@brief Method bool QXmlDefaultHandler::startDocument()\nThis is a reimplementation of QXmlContentHandler::startDocument", false, &_init_f_startDocument_0, &_call_f_startDocument_0);
  methods += new qt_gsi::GenericMethod ("startElement", "@brief Method bool QXmlDefaultHandler::startElement(const QString &namespaceURI, const QString &localName, const QString &qName, const QXmlAttributes &atts)\nThis is a reimplementation of QXmlContentHandler::startElement", false, &_init_f_startElement_8513, &_call_f_startElement_8513);
  methods += new qt_gsi::GenericMethod ("startEntity", "@brief Method bool QXmlDefaultHandler::startEntity(const QString &name)\nThis is a reimplementation of QXmlLexicalHandler::startEntity", false, &_init_f_startEntity_2025, &_call_f_startEntity_2025);
  methods += new qt_gsi::GenericMethod ("startPrefixMapping", "@brief Method bool QXmlDefaultHandler::startPrefixMapping(const QString &prefix, const QString &uri)\nThis is a reimplementation of QXmlContentHandler::startPrefixMapping", false, &_init_f_startPrefixMapping_3942, &_call_f_startPrefixMapping_3942);
  methods += new qt_gsi::GenericMethod ("unparsedEntityDecl", "@brief Method bool QXmlDefaultHandler::unparsedEntityDecl(const QString &name, const QString &publicId, const QString &systemId, const QString &notationName)\nThis is a reimplementation of QXmlDTDHandler::unparsedEntityDecl", false, &_init_f_unparsedEntityDecl_7776, &_call_f_unparsedEntityDecl_7776);
  methods += new qt_gsi::GenericMethod ("warning", "@brief Method bool QXmlDefaultHandler::warning(const QXmlParseException &exception)\nThis is a reimplementation of QXmlErrorHandler::warning", false, &_init_f_warning_3149, &_call_f_warning_3149);
  methods += new qt_gsi::GenericMethod ("asQXmlContentHandler", "@brief Delivers the base class interface QXmlContentHandler of QXmlDefaultHandler\nClass QXmlDefaultHandler is derived from multiple base classes. This method delivers the QXmlContentHandler base class aspect.", false, &_init_f_QXmlDefaultHandler_as_QXmlContentHandler, &_call_f_QXmlDefaultHandler_as_QXmlContentHandler);
  methods += new qt_gsi::GenericMethod ("asConstQXmlContentHandler", "@brief Delivers the base class interface QXmlContentHandler of QXmlDefaultHandler\nClass QXmlDefaultHandler is derived from multiple base classes. This method delivers the QXmlContentHandler base class aspect.\n\nUse this version if you have a const reference.", true, &_init_f_QXmlDefaultHandler_as_const_QXmlContentHandler, &_call_f_QXmlDefaultHandler_as_const_QXmlContentHandler);
  methods += new qt_gsi::GenericMethod ("asQXmlErrorHandler", "@brief Delivers the base class interface QXmlErrorHandler of QXmlDefaultHandler\nClass QXmlDefaultHandler is derived from multiple base classes. This method delivers the QXmlErrorHandler base class aspect.", false, &_init_f_QXmlDefaultHandler_as_QXmlErrorHandler, &_call_f_QXmlDefaultHandler_as_QXmlErrorHandler);
  methods += new qt_gsi::GenericMethod ("asConstQXmlErrorHandler", "@brief Delivers the base class interface QXmlErrorHandler of QXmlDefaultHandler\nClass QXmlDefaultHandler is derived from multiple base classes. This method delivers the QXmlErrorHandler base class aspect.\n\nUse this version if you have a const reference.", true, &_init_f_QXmlDefaultHandler_as_const_QXmlErrorHandler, &_call_f_QXmlDefaultHandler_as_const_QXmlErrorHandler);
  methods += new qt_gsi::GenericMethod ("asQXmlDTDHandler", "@brief Delivers the base class interface QXmlDTDHandler of QXmlDefaultHandler\nClass QXmlDefaultHandler is derived from multiple base classes. This method delivers the QXmlDTDHandler base class aspect.", false, &_init_f_QXmlDefaultHandler_as_QXmlDTDHandler, &_call_f_QXmlDefaultHandler_as_QXmlDTDHandler);
  methods += new qt_gsi::GenericMethod ("asConstQXmlDTDHandler", "@brief Delivers the base class interface QXmlDTDHandler of QXmlDefaultHandler\nClass QXmlDefaultHandler is derived from multiple base classes. This method delivers the QXmlDTDHandler base class aspect.\n\nUse this version if you have a const reference.", true, &_init_f_QXmlDefaultHandler_as_const_QXmlDTDHandler, &_call_f_QXmlDefaultHandler_as_const_QXmlDTDHandler);
  methods += new qt_gsi::GenericMethod ("asQXmlEntityResolver", "@brief Delivers the base class interface QXmlEntityResolver of QXmlDefaultHandler\nClass QXmlDefaultHandler is derived from multiple base classes. This method delivers the QXmlEntityResolver base class aspect.", false, &_init_f_QXmlDefaultHandler_as_QXmlEntityResolver, &_call_f_QXmlDefaultHandler_as_QXmlEntityResolver);
  methods += new qt_gsi::GenericMethod ("asConstQXmlEntityResolver", "@brief Delivers the base class interface QXmlEntityResolver of QXmlDefaultHandler\nClass QXmlDefaultHandler is derived from multiple base classes. This method delivers the QXmlEntityResolver base class aspect.\n\nUse this version if you have a const reference.", true, &_init_f_QXmlDefaultHandler_as_const_QXmlEntityResolver, &_call_f_QXmlDefaultHandler_as_const_QXmlEntityResolver);
  methods += new qt_gsi::GenericMethod ("asQXmlLexicalHandler", "@brief Delivers the base class interface QXmlLexicalHandler of QXmlDefaultHandler\nClass QXmlDefaultHandler is derived from multiple base classes. This method delivers the QXmlLexicalHandler base class aspect.", false, &_init_f_QXmlDefaultHandler_as_QXmlLexicalHandler, &_call_f_QXmlDefaultHandler_as_QXmlLexicalHandler);
  methods += new qt_gsi::GenericMethod ("asConstQXmlLexicalHandler", "@brief Delivers the base class interface QXmlLexicalHandler of QXmlDefaultHandler\nClass QXmlDefaultHandler is derived from multiple base classes. This method delivers the QXmlLexicalHandler base class aspect.\n\nUse this version if you have a const reference.", true, &_init_f_QXmlDefaultHandler_as_const_QXmlLexicalHandler, &_call_f_QXmlDefaultHandler_as_const_QXmlLexicalHandler);
  methods += new qt_gsi::GenericMethod ("asQXmlDeclHandler", "@brief Delivers the base class interface QXmlDeclHandler of QXmlDefaultHandler\nClass QXmlDefaultHandler is derived from multiple base classes. This method delivers the QXmlDeclHandler base class aspect.", false, &_init_f_QXmlDefaultHandler_as_QXmlDeclHandler, &_call_f_QXmlDefaultHandler_as_QXmlDeclHandler);
  methods += new qt_gsi::GenericMethod ("asConstQXmlDeclHandler", "@brief Delivers the base class interface QXmlDeclHandler of QXmlDefaultHandler\nClass QXmlDefaultHandler is derived from multiple base classes. This method delivers the QXmlDeclHandler base class aspect.\n\nUse this version if you have a const reference.", true, &_init_f_QXmlDefaultHandler_as_const_QXmlDeclHandler, &_call_f_QXmlDefaultHandler_as_const_QXmlDeclHandler);
  return methods;
}

gsi::Class<QXmlContentHandler> &qtdecl_QXmlContentHandler ();

gsi::Class<QXmlDefaultHandler> decl_QXmlDefaultHandler (qtdecl_QXmlContentHandler (), "QtXml", "QXmlDefaultHandler_Native",
  methods_QXmlDefaultHandler (),
  "@hide\n@alias QXmlDefaultHandler");

GSI_QTXML_PUBLIC gsi::Class<QXmlDefaultHandler> &qtdecl_QXmlDefaultHandler () { return decl_QXmlDefaultHandler; }

}


class QXmlDefaultHandler_Adaptor : public QXmlDefaultHandler, public qt_gsi::QtObjectBase
{
public:

  virtual ~QXmlDefaultHandler_Adaptor();

  //  [adaptor ctor] QXmlDefaultHandler::QXmlDefaultHandler()
  QXmlDefaultHandler_Adaptor() : QXmlDefaultHandler()
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  [adaptor impl] bool QXmlDefaultHandler::attributeDecl(const QString &eName, const QString &aName, const QString &type, const QString &valueDefault, const QString &value)
  bool cbs_attributeDecl_9693_0(const QString &eName, const QString &aName, const QString &type, const QString &valueDefault, const QString &value)
  {
    return QXmlDefaultHandler::attributeDecl(eName, aName, type, valueDefault, value);
  }

  virtual bool attributeDecl(const QString &eName, const QString &aName, const QString &type, const QString &valueDefault, const QString &value)
  {
    if (cb_attributeDecl_9693_0.can_issue()) {
      return cb_attributeDecl_9693_0.issue<QXmlDefaultHandler_Adaptor, bool, const QString &, const QString &, const QString &, const QString &, const QString &>(&QXmlDefaultHandler_Adaptor::cbs_attributeDecl_9693_0, eName, aName, type, valueDefault, value);
    } else {
      return QXmlDefaultHandler::attributeDecl(eName, aName, type, valueDefault, value);
    }
  }

  //  [adaptor impl] bool QXmlDefaultHandler::characters(const QString &ch)
  bool cbs_characters_2025_0(const QString &ch)
  {
    return QXmlDefaultHandler::characters(ch);
  }

  virtual bool characters(const QString &ch)
  {
    if (cb_characters_2025_0.can_issue()) {
      return cb_characters_2025_0.issue<QXmlDefaultHandler_Adaptor, bool, const QString &>(&QXmlDefaultHandler_Adaptor::cbs_characters_2025_0, ch);
    } else {
      return QXmlDefaultHandler::characters(ch);
    }
  }

  //  [adaptor impl] bool QXmlDefaultHandler::comment(const QString &ch)
  bool cbs_comment_2025_0(const QString &ch)
  {
    return QXmlDefaultHandler::comment(ch);
  }

  virtual bool comment(const QString &ch)
  {
    if (cb_comment_2025_0.can_issue()) {
      return cb_comment_2025_0.issue<QXmlDefaultHandler_Adaptor, bool, const QString &>(&QXmlDefaultHandler_Adaptor::cbs_comment_2025_0, ch);
    } else {
      return QXmlDefaultHandler::comment(ch);
    }
  }

  //  [adaptor impl] bool QXmlDefaultHandler::endCDATA()
  bool cbs_endCDATA_0_0()
  {
    return QXmlDefaultHandler::endCDATA();
  }

  virtual bool endCDATA()
  {
    if (cb_endCDATA_0_0.can_issue()) {
      return cb_endCDATA_0_0.issue<QXmlDefaultHandler_Adaptor, bool>(&QXmlDefaultHandler_Adaptor::cbs_endCDATA_0_0);
    } else {
      return QXmlDefaultHandler::endCDATA();
    }
  }

  //  [adaptor impl] bool QXmlDefaultHandler::endDTD()
  bool cbs_endDTD_0_0()
  {
    return QXmlDefaultHandler::endDTD();
  }

  virtual bool endDTD()
  {
    if (cb_endDTD_0_0.can_issue()) {
      return cb_endDTD_0_0.issue<QXmlDefaultHandler_Adaptor, bool>(&QXmlDefaultHandler_Adaptor::cbs_endDTD_0_0);
    } else {
      return QXmlDefaultHandler::endDTD();
    }
  }

  //  [adaptor impl] bool QXmlDefaultHandler::endDocument()
  bool cbs_endDocument_0_0()
  {
    return QXmlDefaultHandler::endDocument();
  }

  virtual bool endDocument()
  {
    if (cb_endDocument_0_0.can_issue()) {
      return cb_endDocument_0_0.issue<QXmlDefaultHandler_Adaptor, bool>(&QXmlDefaultHandler_Adaptor::cbs_endDocument_0_0);
    } else {
      return QXmlDefaultHandler::endDocument();
    }
  }

  //  [adaptor impl] bool QXmlDefaultHandler::endElement(const QString &namespaceURI, const QString &localName, const QString &qName)
  bool cbs_endElement_5859_0(const QString &namespaceURI, const QString &localName, const QString &qName)
  {
    return QXmlDefaultHandler::endElement(namespaceURI, localName, qName);
  }

  virtual bool endElement(const QString &namespaceURI, const QString &localName, const QString &qName)
  {
    if (cb_endElement_5859_0.can_issue()) {
      return cb_endElement_5859_0.issue<QXmlDefaultHandler_Adaptor, bool, const QString &, const QString &, const QString &>(&QXmlDefaultHandler_Adaptor::cbs_endElement_5859_0, namespaceURI, localName, qName);
    } else {
      return QXmlDefaultHandler::endElement(namespaceURI, localName, qName);
    }
  }

  //  [adaptor impl] bool QXmlDefaultHandler::endEntity(const QString &name)
  bool cbs_endEntity_2025_0(const QString &name)
  {
    return QXmlDefaultHandler::endEntity(name);
  }

  virtual bool endEntity(const QString &name)
  {
    if (cb_endEntity_2025_0.can_issue()) {
      return cb_endEntity_2025_0.issue<QXmlDefaultHandler_Adaptor, bool, const QString &>(&QXmlDefaultHandler_Adaptor::cbs_endEntity_2025_0, name);
    } else {
      return QXmlDefaultHandler::endEntity(name);
    }
  }

  //  [adaptor impl] bool QXmlDefaultHandler::endPrefixMapping(const QString &prefix)
  bool cbs_endPrefixMapping_2025_0(const QString &prefix)
  {
    return QXmlDefaultHandler::endPrefixMapping(prefix);
  }

  virtual bool endPrefixMapping(const QString &prefix)
  {
    if (cb_endPrefixMapping_2025_0.can_issue()) {
      return cb_endPrefixMapping_2025_0.issue<QXmlDefaultHandler_Adaptor, bool, const QString &>(&QXmlDefaultHandler_Adaptor::cbs_endPrefixMapping_2025_0, prefix);
    } else {
      return QXmlDefaultHandler::endPrefixMapping(prefix);
    }
  }

  //  [adaptor impl] bool QXmlDefaultHandler::error(const QXmlParseException &exception)
  bool cbs_error_3149_0(const QXmlParseException &exception)
  {
    return QXmlDefaultHandler::error(exception);
  }

  virtual bool error(const QXmlParseException &exception)
  {
    if (cb_error_3149_0.can_issue()) {
      return cb_error_3149_0.issue<QXmlDefaultHandler_Adaptor, bool, const QXmlParseException &>(&QXmlDefaultHandler_Adaptor::cbs_error_3149_0, exception);
    } else {
      return QXmlDefaultHandler::error(exception);
    }
  }

  //  [adaptor impl] QString QXmlDefaultHandler::errorString()
  QString cbs_errorString_c0_0() const
  {
    return QXmlDefaultHandler::errorString();
  }

  virtual QString errorString() const
  {
    if (cb_errorString_c0_0.can_issue()) {
      return cb_errorString_c0_0.issue<QXmlDefaultHandler_Adaptor, QString>(&QXmlDefaultHandler_Adaptor::cbs_errorString_c0_0);
    } else {
      return QXmlDefaultHandler::errorString();
    }
  }

  //  [adaptor impl] bool QXmlDefaultHandler::externalEntityDecl(const QString &name, const QString &publicId, const QString &systemId)
  bool cbs_externalEntityDecl_5859_0(const QString &name, const QString &publicId, const QString &systemId)
  {
    return QXmlDefaultHandler::externalEntityDecl(name, publicId, systemId);
  }

  virtual bool externalEntityDecl(const QString &name, const QString &publicId, const QString &systemId)
  {
    if (cb_externalEntityDecl_5859_0.can_issue()) {
      return cb_externalEntityDecl_5859_0.issue<QXmlDefaultHandler_Adaptor, bool, const QString &, const QString &, const QString &>(&QXmlDefaultHandler_Adaptor::cbs_externalEntityDecl_5859_0, name, publicId, systemId);
    } else {
      return QXmlDefaultHandler::externalEntityDecl(name, publicId, systemId);
    }
  }

  //  [adaptor impl] bool QXmlDefaultHandler::fatalError(const QXmlParseException &exception)
  bool cbs_fatalError_3149_0(const QXmlParseException &exception)
  {
    return QXmlDefaultHandler::fatalError(exception);
  }

  virtual bool fatalError(const QXmlParseException &exception)
  {
    if (cb_fatalError_3149_0.can_issue()) {
      return cb_fatalError_3149_0.issue<QXmlDefaultHandler_Adaptor, bool, const QXmlParseException &>(&QXmlDefaultHandler_Adaptor::cbs_fatalError_3149_0, exception);
    } else {
      return QXmlDefaultHandler::fatalError(exception);
    }
  }

  //  [adaptor impl] bool QXmlDefaultHandler::ignorableWhitespace(const QString &ch)
  bool cbs_ignorableWhitespace_2025_0(const QString &ch)
  {
    return QXmlDefaultHandler::ignorableWhitespace(ch);
  }

  virtual bool ignorableWhitespace(const QString &ch)
  {
    if (cb_ignorableWhitespace_2025_0.can_issue()) {
      return cb_ignorableWhitespace_2025_0.issue<QXmlDefaultHandler_Adaptor, bool, const QString &>(&QXmlDefaultHandler_Adaptor::cbs_ignorableWhitespace_2025_0, ch);
    } else {
      return QXmlDefaultHandler::ignorableWhitespace(ch);
    }
  }

  //  [adaptor impl] bool QXmlDefaultHandler::internalEntityDecl(const QString &name, const QString &value)
  bool cbs_internalEntityDecl_3942_0(const QString &name, const QString &value)
  {
    return QXmlDefaultHandler::internalEntityDecl(name, value);
  }

  virtual bool internalEntityDecl(const QString &name, const QString &value)
  {
    if (cb_internalEntityDecl_3942_0.can_issue()) {
      return cb_internalEntityDecl_3942_0.issue<QXmlDefaultHandler_Adaptor, bool, const QString &, const QString &>(&QXmlDefaultHandler_Adaptor::cbs_internalEntityDecl_3942_0, name, value);
    } else {
      return QXmlDefaultHandler::internalEntityDecl(name, value);
    }
  }

  //  [adaptor impl] bool QXmlDefaultHandler::notationDecl(const QString &name, const QString &publicId, const QString &systemId)
  bool cbs_notationDecl_5859_0(const QString &name, const QString &publicId, const QString &systemId)
  {
    return QXmlDefaultHandler::notationDecl(name, publicId, systemId);
  }

  virtual bool notationDecl(const QString &name, const QString &publicId, const QString &systemId)
  {
    if (cb_notationDecl_5859_0.can_issue()) {
      return cb_notationDecl_5859_0.issue<QXmlDefaultHandler_Adaptor, bool, const QString &, const QString &, const QString &>(&QXmlDefaultHandler_Adaptor::cbs_notationDecl_5859_0, name, publicId, systemId);
    } else {
      return QXmlDefaultHandler::notationDecl(name, publicId, systemId);
    }
  }

  //  [adaptor impl] bool QXmlDefaultHandler::processingInstruction(const QString &target, const QString &data)
  bool cbs_processingInstruction_3942_0(const QString &target, const QString &data)
  {
    return QXmlDefaultHandler::processingInstruction(target, data);
  }

  virtual bool processingInstruction(const QString &target, const QString &data)
  {
    if (cb_processingInstruction_3942_0.can_issue()) {
      return cb_processingInstruction_3942_0.issue<QXmlDefaultHandler_Adaptor, bool, const QString &, const QString &>(&QXmlDefaultHandler_Adaptor::cbs_processingInstruction_3942_0, target, data);
    } else {
      return QXmlDefaultHandler::processingInstruction(target, data);
    }
  }

  //  [adaptor impl] void QXmlDefaultHandler::setDocumentLocator(QXmlLocator *locator)
  void cbs_setDocumentLocator_1732_0(QXmlLocator *locator)
  {
    QXmlDefaultHandler::setDocumentLocator(locator);
  }

  virtual void setDocumentLocator(QXmlLocator *locator)
  {
    if (cb_setDocumentLocator_1732_0.can_issue()) {
      cb_setDocumentLocator_1732_0.issue<QXmlDefaultHandler_Adaptor, QXmlLocator *>(&QXmlDefaultHandler_Adaptor::cbs_setDocumentLocator_1732_0, locator);
    } else {
      QXmlDefaultHandler::setDocumentLocator(locator);
    }
  }

  //  [adaptor impl] bool QXmlDefaultHandler::skippedEntity(const QString &name)
  bool cbs_skippedEntity_2025_0(const QString &name)
  {
    return QXmlDefaultHandler::skippedEntity(name);
  }

  virtual bool skippedEntity(const QString &name)
  {
    if (cb_skippedEntity_2025_0.can_issue()) {
      return cb_skippedEntity_2025_0.issue<QXmlDefaultHandler_Adaptor, bool, const QString &>(&QXmlDefaultHandler_Adaptor::cbs_skippedEntity_2025_0, name);
    } else {
      return QXmlDefaultHandler::skippedEntity(name);
    }
  }

  //  [adaptor impl] bool QXmlDefaultHandler::startCDATA()
  bool cbs_startCDATA_0_0()
  {
    return QXmlDefaultHandler::startCDATA();
  }

  virtual bool startCDATA()
  {
    if (cb_startCDATA_0_0.can_issue()) {
      return cb_startCDATA_0_0.issue<QXmlDefaultHandler_Adaptor, bool>(&QXmlDefaultHandler_Adaptor::cbs_startCDATA_0_0);
    } else {
      return QXmlDefaultHandler::startCDATA();
    }
  }

  //  [adaptor impl] bool QXmlDefaultHandler::startDTD(const QString &name, const QString &publicId, const QString &systemId)
  bool cbs_startDTD_5859_0(const QString &name, const QString &publicId, const QString &systemId)
  {
    return QXmlDefaultHandler::startDTD(name, publicId, systemId);
  }

  virtual bool startDTD(const QString &name, const QString &publicId, const QString &systemId)
  {
    if (cb_startDTD_5859_0.can_issue()) {
      return cb_startDTD_5859_0.issue<QXmlDefaultHandler_Adaptor, bool, const QString &, const QString &, const QString &>(&QXmlDefaultHandler_Adaptor::cbs_startDTD_5859_0, name, publicId, systemId);
    } else {
      return QXmlDefaultHandler::startDTD(name, publicId, systemId);
    }
  }

  //  [adaptor impl] bool QXmlDefaultHandler::startDocument()
  bool cbs_startDocument_0_0()
  {
    return QXmlDefaultHandler::startDocument();
  }

  virtual bool startDocument()
  {
    if (cb_startDocument_0_0.can_issue()) {
      return cb_startDocument_0_0.issue<QXmlDefaultHandler_Adaptor, bool>(&QXmlDefaultHandler_Adaptor::cbs_startDocument_0_0);
    } else {
      return QXmlDefaultHandler::startDocument();
    }
  }

  //  [adaptor impl] bool QXmlDefaultHandler::startElement(const QString &namespaceURI, const QString &localName, const QString &qName, const QXmlAttributes &atts)
  bool cbs_startElement_8513_0(const QString &namespaceURI, const QString &localName, const QString &qName, const QXmlAttributes &atts)
  {
    return QXmlDefaultHandler::startElement(namespaceURI, localName, qName, atts);
  }

  virtual bool startElement(const QString &namespaceURI, const QString &localName, const QString &qName, const QXmlAttributes &atts)
  {
    if (cb_startElement_8513_0.can_issue()) {
      return cb_startElement_8513_0.issue<QXmlDefaultHandler_Adaptor, bool, const QString &, const QString &, const QString &, const QXmlAttributes &>(&QXmlDefaultHandler_Adaptor::cbs_startElement_8513_0, namespaceURI, localName, qName, atts);
    } else {
      return QXmlDefaultHandler::startElement(namespaceURI, localName, qName, atts);
    }
  }

  //  [adaptor impl] bool QXmlDefaultHandler::startEntity(const QString &name)
  bool cbs_startEntity_2025_0(const QString &name)
  {
    return QXmlDefaultHandler::startEntity(name);
  }

  virtual bool startEntity(const QString &name)
  {
    if (cb_startEntity_2025_0.can_issue()) {
      return cb_startEntity_2025_0.issue<QXmlDefaultHandler_Adaptor, bool, const QString &>(&QXmlDefaultHandler_Adaptor::cbs_startEntity_2025_0, name);
    } else {
      return QXmlDefaultHandler::startEntity(name);
    }
  }

  //  [adaptor impl] bool QXmlDefaultHandler::startPrefixMapping(const QString &prefix, const QString &uri)
  bool cbs_startPrefixMapping_3942_0(const QString &prefix, const QString &uri)
  {
    return QXmlDefaultHandler::startPrefixMapping(prefix, uri);
  }

  virtual bool startPrefixMapping(const QString &prefix, const QString &uri)
  {
    if (cb_startPrefixMapping_3942_0.can_issue()) {
      return cb_startPrefixMapping_3942_0.issue<QXmlDefaultHandler_Adaptor, bool, const QString &, const QString &>(&QXmlDefaultHandler_Adaptor::cbs_startPrefixMapping_3942_0, prefix, uri);
    } else {
      return QXmlDefaultHandler::startPrefixMapping(prefix, uri);
    }
  }

  //  [adaptor impl] bool QXmlDefaultHandler::unparsedEntityDecl(const QString &name, const QString &publicId, const QString &systemId, const QString &notationName)
  bool cbs_unparsedEntityDecl_7776_0(const QString &name, const QString &publicId, const QString &systemId, const QString &notationName)
  {
    return QXmlDefaultHandler::unparsedEntityDecl(name, publicId, systemId, notationName);
  }

  virtual bool unparsedEntityDecl(const QString &name, const QString &publicId, const QString &systemId, const QString &notationName)
  {
    if (cb_unparsedEntityDecl_7776_0.can_issue()) {
      return cb_unparsedEntityDecl_7776_0.issue<QXmlDefaultHandler_Adaptor, bool, const QString &, const QString &, const QString &, const QString &>(&QXmlDefaultHandler_Adaptor::cbs_unparsedEntityDecl_7776_0, name, publicId, systemId, notationName);
    } else {
      return QXmlDefaultHandler::unparsedEntityDecl(name, publicId, systemId, notationName);
    }
  }

  //  [adaptor impl] bool QXmlDefaultHandler::warning(const QXmlParseException &exception)
  bool cbs_warning_3149_0(const QXmlParseException &exception)
  {
    return QXmlDefaultHandler::warning(exception);
  }

  virtual bool warning(const QXmlParseException &exception)
  {
    if (cb_warning_3149_0.can_issue()) {
      return cb_warning_3149_0.issue<QXmlDefaultHandler_Adaptor, bool, const QXmlParseException &>(&QXmlDefaultHandler_Adaptor::cbs_warning_3149_0, exception);
    } else {
      return QXmlDefaultHandler::warning(exception);
    }
  }

  gsi::Callback cb_attributeDecl_9693_0;
  gsi::Callback cb_characters_2025_0;
  gsi::Callback cb_comment_2025_0;
  gsi::Callback cb_endCDATA_0_0;
  gsi::Callback cb_endDTD_0_0;
  gsi::Callback cb_endDocument_0_0;
  gsi::Callback cb_endElement_5859_0;
  gsi::Callback cb_endEntity_2025_0;
  gsi::Callback cb_endPrefixMapping_2025_0;
  gsi::Callback cb_error_3149_0;
  gsi::Callback cb_errorString_c0_0;
  gsi::Callback cb_externalEntityDecl_5859_0;
  gsi::Callback cb_fatalError_3149_0;
  gsi::Callback cb_ignorableWhitespace_2025_0;
  gsi::Callback cb_internalEntityDecl_3942_0;
  gsi::Callback cb_notationDecl_5859_0;
  gsi::Callback cb_processingInstruction_3942_0;
  gsi::Callback cb_setDocumentLocator_1732_0;
  gsi::Callback cb_skippedEntity_2025_0;
  gsi::Callback cb_startCDATA_0_0;
  gsi::Callback cb_startDTD_5859_0;
  gsi::Callback cb_startDocument_0_0;
  gsi::Callback cb_startElement_8513_0;
  gsi::Callback cb_startEntity_2025_0;
  gsi::Callback cb_startPrefixMapping_3942_0;
  gsi::Callback cb_unparsedEntityDecl_7776_0;
  gsi::Callback cb_warning_3149_0;
};

QXmlDefaultHandler_Adaptor::~QXmlDefaultHandler_Adaptor() { }

//  Constructor QXmlDefaultHandler::QXmlDefaultHandler() (adaptor class)

static void _init_ctor_QXmlDefaultHandler_Adaptor_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QXmlDefaultHandler_Adaptor> ();
}

static void _call_ctor_QXmlDefaultHandler_Adaptor_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QXmlDefaultHandler_Adaptor *> (new QXmlDefaultHandler_Adaptor ());
}


// bool QXmlDefaultHandler::attributeDecl(const QString &eName, const QString &aName, const QString &type, const QString &valueDefault, const QString &value)

static void _init_cbs_attributeDecl_9693_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("eName");
  decl->add_arg<const QString & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("aName");
  decl->add_arg<const QString & > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("type");
  decl->add_arg<const QString & > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("valueDefault");
  decl->add_arg<const QString & > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("value");
  decl->add_arg<const QString & > (argspec_4);
  decl->set_return<bool > ();
}

static void _call_cbs_attributeDecl_9693_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = args.read<const QString & > (heap);
  const QString &arg2 = args.read<const QString & > (heap);
  const QString &arg3 = args.read<const QString & > (heap);
  const QString &arg4 = args.read<const QString & > (heap);
  const QString &arg5 = args.read<const QString & > (heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler_Adaptor *)cls)->cbs_attributeDecl_9693_0 (arg1, arg2, arg3, arg4, arg5));
}

static void _set_callback_cbs_attributeDecl_9693_0 (void *cls, const gsi::Callback &cb)
{
  ((QXmlDefaultHandler_Adaptor *)cls)->cb_attributeDecl_9693_0 = cb;
}


// bool QXmlDefaultHandler::characters(const QString &ch)

static void _init_cbs_characters_2025_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("ch");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_cbs_characters_2025_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = args.read<const QString & > (heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler_Adaptor *)cls)->cbs_characters_2025_0 (arg1));
}

static void _set_callback_cbs_characters_2025_0 (void *cls, const gsi::Callback &cb)
{
  ((QXmlDefaultHandler_Adaptor *)cls)->cb_characters_2025_0 = cb;
}


// bool QXmlDefaultHandler::comment(const QString &ch)

static void _init_cbs_comment_2025_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("ch");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_cbs_comment_2025_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = args.read<const QString & > (heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler_Adaptor *)cls)->cbs_comment_2025_0 (arg1));
}

static void _set_callback_cbs_comment_2025_0 (void *cls, const gsi::Callback &cb)
{
  ((QXmlDefaultHandler_Adaptor *)cls)->cb_comment_2025_0 = cb;
}


// bool QXmlDefaultHandler::endCDATA()

static void _init_cbs_endCDATA_0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_cbs_endCDATA_0_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QXmlDefaultHandler_Adaptor *)cls)->cbs_endCDATA_0_0 ());
}

static void _set_callback_cbs_endCDATA_0_0 (void *cls, const gsi::Callback &cb)
{
  ((QXmlDefaultHandler_Adaptor *)cls)->cb_endCDATA_0_0 = cb;
}


// bool QXmlDefaultHandler::endDTD()

static void _init_cbs_endDTD_0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_cbs_endDTD_0_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QXmlDefaultHandler_Adaptor *)cls)->cbs_endDTD_0_0 ());
}

static void _set_callback_cbs_endDTD_0_0 (void *cls, const gsi::Callback &cb)
{
  ((QXmlDefaultHandler_Adaptor *)cls)->cb_endDTD_0_0 = cb;
}


// bool QXmlDefaultHandler::endDocument()

static void _init_cbs_endDocument_0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_cbs_endDocument_0_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QXmlDefaultHandler_Adaptor *)cls)->cbs_endDocument_0_0 ());
}

static void _set_callback_cbs_endDocument_0_0 (void *cls, const gsi::Callback &cb)
{
  ((QXmlDefaultHandler_Adaptor *)cls)->cb_endDocument_0_0 = cb;
}


// bool QXmlDefaultHandler::endElement(const QString &namespaceURI, const QString &localName, const QString &qName)

static void _init_cbs_endElement_5859_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("namespaceURI");
  decl->add_arg<const QString & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("localName");
  decl->add_arg<const QString & > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("qName");
  decl->add_arg<const QString & > (argspec_2);
  decl->set_return<bool > ();
}

static void _call_cbs_endElement_5859_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = args.read<const QString & > (heap);
  const QString &arg2 = args.read<const QString & > (heap);
  const QString &arg3 = args.read<const QString & > (heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler_Adaptor *)cls)->cbs_endElement_5859_0 (arg1, arg2, arg3));
}

static void _set_callback_cbs_endElement_5859_0 (void *cls, const gsi::Callback &cb)
{
  ((QXmlDefaultHandler_Adaptor *)cls)->cb_endElement_5859_0 = cb;
}


// bool QXmlDefaultHandler::endEntity(const QString &name)

static void _init_cbs_endEntity_2025_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("name");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_cbs_endEntity_2025_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = args.read<const QString & > (heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler_Adaptor *)cls)->cbs_endEntity_2025_0 (arg1));
}

static void _set_callback_cbs_endEntity_2025_0 (void *cls, const gsi::Callback &cb)
{
  ((QXmlDefaultHandler_Adaptor *)cls)->cb_endEntity_2025_0 = cb;
}


// bool QXmlDefaultHandler::endPrefixMapping(const QString &prefix)

static void _init_cbs_endPrefixMapping_2025_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("prefix");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_cbs_endPrefixMapping_2025_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = args.read<const QString & > (heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler_Adaptor *)cls)->cbs_endPrefixMapping_2025_0 (arg1));
}

static void _set_callback_cbs_endPrefixMapping_2025_0 (void *cls, const gsi::Callback &cb)
{
  ((QXmlDefaultHandler_Adaptor *)cls)->cb_endPrefixMapping_2025_0 = cb;
}


// bool QXmlDefaultHandler::error(const QXmlParseException &exception)

static void _init_cbs_error_3149_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("exception");
  decl->add_arg<const QXmlParseException & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_cbs_error_3149_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QXmlParseException &arg1 = args.read<const QXmlParseException & > (heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler_Adaptor *)cls)->cbs_error_3149_0 (arg1));
}

static void _set_callback_cbs_error_3149_0 (void *cls, const gsi::Callback &cb)
{
  ((QXmlDefaultHandler_Adaptor *)cls)->cb_error_3149_0 = cb;
}


// QString QXmlDefaultHandler::errorString()

static void _init_cbs_errorString_c0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_cbs_errorString_c0_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QString > ((QString)((QXmlDefaultHandler_Adaptor *)cls)->cbs_errorString_c0_0 ());
}

static void _set_callback_cbs_errorString_c0_0 (void *cls, const gsi::Callback &cb)
{
  ((QXmlDefaultHandler_Adaptor *)cls)->cb_errorString_c0_0 = cb;
}


// bool QXmlDefaultHandler::externalEntityDecl(const QString &name, const QString &publicId, const QString &systemId)

static void _init_cbs_externalEntityDecl_5859_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("name");
  decl->add_arg<const QString & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("publicId");
  decl->add_arg<const QString & > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("systemId");
  decl->add_arg<const QString & > (argspec_2);
  decl->set_return<bool > ();
}

static void _call_cbs_externalEntityDecl_5859_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = args.read<const QString & > (heap);
  const QString &arg2 = args.read<const QString & > (heap);
  const QString &arg3 = args.read<const QString & > (heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler_Adaptor *)cls)->cbs_externalEntityDecl_5859_0 (arg1, arg2, arg3));
}

static void _set_callback_cbs_externalEntityDecl_5859_0 (void *cls, const gsi::Callback &cb)
{
  ((QXmlDefaultHandler_Adaptor *)cls)->cb_externalEntityDecl_5859_0 = cb;
}


// bool QXmlDefaultHandler::fatalError(const QXmlParseException &exception)

static void _init_cbs_fatalError_3149_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("exception");
  decl->add_arg<const QXmlParseException & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_cbs_fatalError_3149_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QXmlParseException &arg1 = args.read<const QXmlParseException & > (heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler_Adaptor *)cls)->cbs_fatalError_3149_0 (arg1));
}

static void _set_callback_cbs_fatalError_3149_0 (void *cls, const gsi::Callback &cb)
{
  ((QXmlDefaultHandler_Adaptor *)cls)->cb_fatalError_3149_0 = cb;
}


// bool QXmlDefaultHandler::ignorableWhitespace(const QString &ch)

static void _init_cbs_ignorableWhitespace_2025_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("ch");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_cbs_ignorableWhitespace_2025_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = args.read<const QString & > (heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler_Adaptor *)cls)->cbs_ignorableWhitespace_2025_0 (arg1));
}

static void _set_callback_cbs_ignorableWhitespace_2025_0 (void *cls, const gsi::Callback &cb)
{
  ((QXmlDefaultHandler_Adaptor *)cls)->cb_ignorableWhitespace_2025_0 = cb;
}


// bool QXmlDefaultHandler::internalEntityDecl(const QString &name, const QString &value)

static void _init_cbs_internalEntityDecl_3942_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("name");
  decl->add_arg<const QString & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("value");
  decl->add_arg<const QString & > (argspec_1);
  decl->set_return<bool > ();
}

static void _call_cbs_internalEntityDecl_3942_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = args.read<const QString & > (heap);
  const QString &arg2 = args.read<const QString & > (heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler_Adaptor *)cls)->cbs_internalEntityDecl_3942_0 (arg1, arg2));
}

static void _set_callback_cbs_internalEntityDecl_3942_0 (void *cls, const gsi::Callback &cb)
{
  ((QXmlDefaultHandler_Adaptor *)cls)->cb_internalEntityDecl_3942_0 = cb;
}


// bool QXmlDefaultHandler::notationDecl(const QString &name, const QString &publicId, const QString &systemId)

static void _init_cbs_notationDecl_5859_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("name");
  decl->add_arg<const QString & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("publicId");
  decl->add_arg<const QString & > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("systemId");
  decl->add_arg<const QString & > (argspec_2);
  decl->set_return<bool > ();
}

static void _call_cbs_notationDecl_5859_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = args.read<const QString & > (heap);
  const QString &arg2 = args.read<const QString & > (heap);
  const QString &arg3 = args.read<const QString & > (heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler_Adaptor *)cls)->cbs_notationDecl_5859_0 (arg1, arg2, arg3));
}

static void _set_callback_cbs_notationDecl_5859_0 (void *cls, const gsi::Callback &cb)
{
  ((QXmlDefaultHandler_Adaptor *)cls)->cb_notationDecl_5859_0 = cb;
}


// bool QXmlDefaultHandler::processingInstruction(const QString &target, const QString &data)

static void _init_cbs_processingInstruction_3942_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("target");
  decl->add_arg<const QString & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("data");
  decl->add_arg<const QString & > (argspec_1);
  decl->set_return<bool > ();
}

static void _call_cbs_processingInstruction_3942_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = args.read<const QString & > (heap);
  const QString &arg2 = args.read<const QString & > (heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler_Adaptor *)cls)->cbs_processingInstruction_3942_0 (arg1, arg2));
}

static void _set_callback_cbs_processingInstruction_3942_0 (void *cls, const gsi::Callback &cb)
{
  ((QXmlDefaultHandler_Adaptor *)cls)->cb_processingInstruction_3942_0 = cb;
}


// void QXmlDefaultHandler::setDocumentLocator(QXmlLocator *locator)

static void _init_cbs_setDocumentLocator_1732_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("locator");
  decl->add_arg<QXmlLocator * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_setDocumentLocator_1732_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QXmlLocator *arg1 = args.read<QXmlLocator * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QXmlDefaultHandler_Adaptor *)cls)->cbs_setDocumentLocator_1732_0 (arg1);
}

static void _set_callback_cbs_setDocumentLocator_1732_0 (void *cls, const gsi::Callback &cb)
{
  ((QXmlDefaultHandler_Adaptor *)cls)->cb_setDocumentLocator_1732_0 = cb;
}


// bool QXmlDefaultHandler::skippedEntity(const QString &name)

static void _init_cbs_skippedEntity_2025_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("name");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_cbs_skippedEntity_2025_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = args.read<const QString & > (heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler_Adaptor *)cls)->cbs_skippedEntity_2025_0 (arg1));
}

static void _set_callback_cbs_skippedEntity_2025_0 (void *cls, const gsi::Callback &cb)
{
  ((QXmlDefaultHandler_Adaptor *)cls)->cb_skippedEntity_2025_0 = cb;
}


// bool QXmlDefaultHandler::startCDATA()

static void _init_cbs_startCDATA_0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_cbs_startCDATA_0_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QXmlDefaultHandler_Adaptor *)cls)->cbs_startCDATA_0_0 ());
}

static void _set_callback_cbs_startCDATA_0_0 (void *cls, const gsi::Callback &cb)
{
  ((QXmlDefaultHandler_Adaptor *)cls)->cb_startCDATA_0_0 = cb;
}


// bool QXmlDefaultHandler::startDTD(const QString &name, const QString &publicId, const QString &systemId)

static void _init_cbs_startDTD_5859_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("name");
  decl->add_arg<const QString & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("publicId");
  decl->add_arg<const QString & > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("systemId");
  decl->add_arg<const QString & > (argspec_2);
  decl->set_return<bool > ();
}

static void _call_cbs_startDTD_5859_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = args.read<const QString & > (heap);
  const QString &arg2 = args.read<const QString & > (heap);
  const QString &arg3 = args.read<const QString & > (heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler_Adaptor *)cls)->cbs_startDTD_5859_0 (arg1, arg2, arg3));
}

static void _set_callback_cbs_startDTD_5859_0 (void *cls, const gsi::Callback &cb)
{
  ((QXmlDefaultHandler_Adaptor *)cls)->cb_startDTD_5859_0 = cb;
}


// bool QXmlDefaultHandler::startDocument()

static void _init_cbs_startDocument_0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_cbs_startDocument_0_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QXmlDefaultHandler_Adaptor *)cls)->cbs_startDocument_0_0 ());
}

static void _set_callback_cbs_startDocument_0_0 (void *cls, const gsi::Callback &cb)
{
  ((QXmlDefaultHandler_Adaptor *)cls)->cb_startDocument_0_0 = cb;
}


// bool QXmlDefaultHandler::startElement(const QString &namespaceURI, const QString &localName, const QString &qName, const QXmlAttributes &atts)

static void _init_cbs_startElement_8513_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("namespaceURI");
  decl->add_arg<const QString & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("localName");
  decl->add_arg<const QString & > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("qName");
  decl->add_arg<const QString & > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("atts");
  decl->add_arg<const QXmlAttributes & > (argspec_3);
  decl->set_return<bool > ();
}

static void _call_cbs_startElement_8513_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = args.read<const QString & > (heap);
  const QString &arg2 = args.read<const QString & > (heap);
  const QString &arg3 = args.read<const QString & > (heap);
  const QXmlAttributes &arg4 = args.read<const QXmlAttributes & > (heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler_Adaptor *)cls)->cbs_startElement_8513_0 (arg1, arg2, arg3, arg4));
}

static void _set_callback_cbs_startElement_8513_0 (void *cls, const gsi::Callback &cb)
{
  ((QXmlDefaultHandler_Adaptor *)cls)->cb_startElement_8513_0 = cb;
}


// bool QXmlDefaultHandler::startEntity(const QString &name)

static void _init_cbs_startEntity_2025_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("name");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_cbs_startEntity_2025_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = args.read<const QString & > (heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler_Adaptor *)cls)->cbs_startEntity_2025_0 (arg1));
}

static void _set_callback_cbs_startEntity_2025_0 (void *cls, const gsi::Callback &cb)
{
  ((QXmlDefaultHandler_Adaptor *)cls)->cb_startEntity_2025_0 = cb;
}


// bool QXmlDefaultHandler::startPrefixMapping(const QString &prefix, const QString &uri)

static void _init_cbs_startPrefixMapping_3942_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("prefix");
  decl->add_arg<const QString & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("uri");
  decl->add_arg<const QString & > (argspec_1);
  decl->set_return<bool > ();
}

static void _call_cbs_startPrefixMapping_3942_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = args.read<const QString & > (heap);
  const QString &arg2 = args.read<const QString & > (heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler_Adaptor *)cls)->cbs_startPrefixMapping_3942_0 (arg1, arg2));
}

static void _set_callback_cbs_startPrefixMapping_3942_0 (void *cls, const gsi::Callback &cb)
{
  ((QXmlDefaultHandler_Adaptor *)cls)->cb_startPrefixMapping_3942_0 = cb;
}


// bool QXmlDefaultHandler::unparsedEntityDecl(const QString &name, const QString &publicId, const QString &systemId, const QString &notationName)

static void _init_cbs_unparsedEntityDecl_7776_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("name");
  decl->add_arg<const QString & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("publicId");
  decl->add_arg<const QString & > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("systemId");
  decl->add_arg<const QString & > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("notationName");
  decl->add_arg<const QString & > (argspec_3);
  decl->set_return<bool > ();
}

static void _call_cbs_unparsedEntityDecl_7776_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = args.read<const QString & > (heap);
  const QString &arg2 = args.read<const QString & > (heap);
  const QString &arg3 = args.read<const QString & > (heap);
  const QString &arg4 = args.read<const QString & > (heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler_Adaptor *)cls)->cbs_unparsedEntityDecl_7776_0 (arg1, arg2, arg3, arg4));
}

static void _set_callback_cbs_unparsedEntityDecl_7776_0 (void *cls, const gsi::Callback &cb)
{
  ((QXmlDefaultHandler_Adaptor *)cls)->cb_unparsedEntityDecl_7776_0 = cb;
}


// bool QXmlDefaultHandler::warning(const QXmlParseException &exception)

static void _init_cbs_warning_3149_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("exception");
  decl->add_arg<const QXmlParseException & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_cbs_warning_3149_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QXmlParseException &arg1 = args.read<const QXmlParseException & > (heap);
  ret.write<bool > ((bool)((QXmlDefaultHandler_Adaptor *)cls)->cbs_warning_3149_0 (arg1));
}

static void _set_callback_cbs_warning_3149_0 (void *cls, const gsi::Callback &cb)
{
  ((QXmlDefaultHandler_Adaptor *)cls)->cb_warning_3149_0 = cb;
}


namespace gsi
{

gsi::Class<QXmlDefaultHandler> &qtdecl_QXmlDefaultHandler ();

static gsi::Methods methods_QXmlDefaultHandler_Adaptor () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QXmlDefaultHandler::QXmlDefaultHandler()\nThis method creates an object of class QXmlDefaultHandler.", &_init_ctor_QXmlDefaultHandler_Adaptor_0, &_call_ctor_QXmlDefaultHandler_Adaptor_0);
  methods += new qt_gsi::GenericMethod ("attributeDecl", "@hide", false, &_init_cbs_attributeDecl_9693_0, &_call_cbs_attributeDecl_9693_0);
  methods += new qt_gsi::GenericMethod ("attributeDecl", "@brief Virtual method bool QXmlDefaultHandler::attributeDecl(const QString &eName, const QString &aName, const QString &type, const QString &valueDefault, const QString &value)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_attributeDecl_9693_0, &_call_cbs_attributeDecl_9693_0, &_set_callback_cbs_attributeDecl_9693_0);
  methods += new qt_gsi::GenericMethod ("characters", "@hide", false, &_init_cbs_characters_2025_0, &_call_cbs_characters_2025_0);
  methods += new qt_gsi::GenericMethod ("characters", "@brief Virtual method bool QXmlDefaultHandler::characters(const QString &ch)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_characters_2025_0, &_call_cbs_characters_2025_0, &_set_callback_cbs_characters_2025_0);
  methods += new qt_gsi::GenericMethod ("comment", "@hide", false, &_init_cbs_comment_2025_0, &_call_cbs_comment_2025_0);
  methods += new qt_gsi::GenericMethod ("comment", "@brief Virtual method bool QXmlDefaultHandler::comment(const QString &ch)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_comment_2025_0, &_call_cbs_comment_2025_0, &_set_callback_cbs_comment_2025_0);
  methods += new qt_gsi::GenericMethod ("endCDATA", "@hide", false, &_init_cbs_endCDATA_0_0, &_call_cbs_endCDATA_0_0);
  methods += new qt_gsi::GenericMethod ("endCDATA", "@brief Virtual method bool QXmlDefaultHandler::endCDATA()\nThis method can be reimplemented in a derived class.", false, &_init_cbs_endCDATA_0_0, &_call_cbs_endCDATA_0_0, &_set_callback_cbs_endCDATA_0_0);
  methods += new qt_gsi::GenericMethod ("endDTD", "@hide", false, &_init_cbs_endDTD_0_0, &_call_cbs_endDTD_0_0);
  methods += new qt_gsi::GenericMethod ("endDTD", "@brief Virtual method bool QXmlDefaultHandler::endDTD()\nThis method can be reimplemented in a derived class.", false, &_init_cbs_endDTD_0_0, &_call_cbs_endDTD_0_0, &_set_callback_cbs_endDTD_0_0);
  methods += new qt_gsi::GenericMethod ("endDocument", "@hide", false, &_init_cbs_endDocument_0_0, &_call_cbs_endDocument_0_0);
  methods += new qt_gsi::GenericMethod ("endDocument", "@brief Virtual method bool QXmlDefaultHandler::endDocument()\nThis method can be reimplemented in a derived class.", false, &_init_cbs_endDocument_0_0, &_call_cbs_endDocument_0_0, &_set_callback_cbs_endDocument_0_0);
  methods += new qt_gsi::GenericMethod ("endElement", "@hide", false, &_init_cbs_endElement_5859_0, &_call_cbs_endElement_5859_0);
  methods += new qt_gsi::GenericMethod ("endElement", "@brief Virtual method bool QXmlDefaultHandler::endElement(const QString &namespaceURI, const QString &localName, const QString &qName)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_endElement_5859_0, &_call_cbs_endElement_5859_0, &_set_callback_cbs_endElement_5859_0);
  methods += new qt_gsi::GenericMethod ("endEntity", "@hide", false, &_init_cbs_endEntity_2025_0, &_call_cbs_endEntity_2025_0);
  methods += new qt_gsi::GenericMethod ("endEntity", "@brief Virtual method bool QXmlDefaultHandler::endEntity(const QString &name)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_endEntity_2025_0, &_call_cbs_endEntity_2025_0, &_set_callback_cbs_endEntity_2025_0);
  methods += new qt_gsi::GenericMethod ("endPrefixMapping", "@hide", false, &_init_cbs_endPrefixMapping_2025_0, &_call_cbs_endPrefixMapping_2025_0);
  methods += new qt_gsi::GenericMethod ("endPrefixMapping", "@brief Virtual method bool QXmlDefaultHandler::endPrefixMapping(const QString &prefix)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_endPrefixMapping_2025_0, &_call_cbs_endPrefixMapping_2025_0, &_set_callback_cbs_endPrefixMapping_2025_0);
  methods += new qt_gsi::GenericMethod ("error", "@hide", false, &_init_cbs_error_3149_0, &_call_cbs_error_3149_0);
  methods += new qt_gsi::GenericMethod ("error", "@brief Virtual method bool QXmlDefaultHandler::error(const QXmlParseException &exception)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_error_3149_0, &_call_cbs_error_3149_0, &_set_callback_cbs_error_3149_0);
  methods += new qt_gsi::GenericMethod ("errorString", "@hide", true, &_init_cbs_errorString_c0_0, &_call_cbs_errorString_c0_0);
  methods += new qt_gsi::GenericMethod ("errorString", "@brief Virtual method QString QXmlDefaultHandler::errorString()\nThis method can be reimplemented in a derived class.", true, &_init_cbs_errorString_c0_0, &_call_cbs_errorString_c0_0, &_set_callback_cbs_errorString_c0_0);
  methods += new qt_gsi::GenericMethod ("externalEntityDecl", "@hide", false, &_init_cbs_externalEntityDecl_5859_0, &_call_cbs_externalEntityDecl_5859_0);
  methods += new qt_gsi::GenericMethod ("externalEntityDecl", "@brief Virtual method bool QXmlDefaultHandler::externalEntityDecl(const QString &name, const QString &publicId, const QString &systemId)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_externalEntityDecl_5859_0, &_call_cbs_externalEntityDecl_5859_0, &_set_callback_cbs_externalEntityDecl_5859_0);
  methods += new qt_gsi::GenericMethod ("fatalError", "@hide", false, &_init_cbs_fatalError_3149_0, &_call_cbs_fatalError_3149_0);
  methods += new qt_gsi::GenericMethod ("fatalError", "@brief Virtual method bool QXmlDefaultHandler::fatalError(const QXmlParseException &exception)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_fatalError_3149_0, &_call_cbs_fatalError_3149_0, &_set_callback_cbs_fatalError_3149_0);
  methods += new qt_gsi::GenericMethod ("ignorableWhitespace", "@hide", false, &_init_cbs_ignorableWhitespace_2025_0, &_call_cbs_ignorableWhitespace_2025_0);
  methods += new qt_gsi::GenericMethod ("ignorableWhitespace", "@brief Virtual method bool QXmlDefaultHandler::ignorableWhitespace(const QString &ch)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_ignorableWhitespace_2025_0, &_call_cbs_ignorableWhitespace_2025_0, &_set_callback_cbs_ignorableWhitespace_2025_0);
  methods += new qt_gsi::GenericMethod ("internalEntityDecl", "@hide", false, &_init_cbs_internalEntityDecl_3942_0, &_call_cbs_internalEntityDecl_3942_0);
  methods += new qt_gsi::GenericMethod ("internalEntityDecl", "@brief Virtual method bool QXmlDefaultHandler::internalEntityDecl(const QString &name, const QString &value)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_internalEntityDecl_3942_0, &_call_cbs_internalEntityDecl_3942_0, &_set_callback_cbs_internalEntityDecl_3942_0);
  methods += new qt_gsi::GenericMethod ("notationDecl", "@hide", false, &_init_cbs_notationDecl_5859_0, &_call_cbs_notationDecl_5859_0);
  methods += new qt_gsi::GenericMethod ("notationDecl", "@brief Virtual method bool QXmlDefaultHandler::notationDecl(const QString &name, const QString &publicId, const QString &systemId)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_notationDecl_5859_0, &_call_cbs_notationDecl_5859_0, &_set_callback_cbs_notationDecl_5859_0);
  methods += new qt_gsi::GenericMethod ("processingInstruction", "@hide", false, &_init_cbs_processingInstruction_3942_0, &_call_cbs_processingInstruction_3942_0);
  methods += new qt_gsi::GenericMethod ("processingInstruction", "@brief Virtual method bool QXmlDefaultHandler::processingInstruction(const QString &target, const QString &data)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_processingInstruction_3942_0, &_call_cbs_processingInstruction_3942_0, &_set_callback_cbs_processingInstruction_3942_0);
  methods += new qt_gsi::GenericMethod ("setDocumentLocator", "@hide", false, &_init_cbs_setDocumentLocator_1732_0, &_call_cbs_setDocumentLocator_1732_0);
  methods += new qt_gsi::GenericMethod ("setDocumentLocator", "@brief Virtual method void QXmlDefaultHandler::setDocumentLocator(QXmlLocator *locator)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_setDocumentLocator_1732_0, &_call_cbs_setDocumentLocator_1732_0, &_set_callback_cbs_setDocumentLocator_1732_0);
  methods += new qt_gsi::GenericMethod ("skippedEntity", "@hide", false, &_init_cbs_skippedEntity_2025_0, &_call_cbs_skippedEntity_2025_0);
  methods += new qt_gsi::GenericMethod ("skippedEntity", "@brief Virtual method bool QXmlDefaultHandler::skippedEntity(const QString &name)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_skippedEntity_2025_0, &_call_cbs_skippedEntity_2025_0, &_set_callback_cbs_skippedEntity_2025_0);
  methods += new qt_gsi::GenericMethod ("startCDATA", "@hide", false, &_init_cbs_startCDATA_0_0, &_call_cbs_startCDATA_0_0);
  methods += new qt_gsi::GenericMethod ("startCDATA", "@brief Virtual method bool QXmlDefaultHandler::startCDATA()\nThis method can be reimplemented in a derived class.", false, &_init_cbs_startCDATA_0_0, &_call_cbs_startCDATA_0_0, &_set_callback_cbs_startCDATA_0_0);
  methods += new qt_gsi::GenericMethod ("startDTD", "@hide", false, &_init_cbs_startDTD_5859_0, &_call_cbs_startDTD_5859_0);
  methods += new qt_gsi::GenericMethod ("startDTD", "@brief Virtual method bool QXmlDefaultHandler::startDTD(const QString &name, const QString &publicId, const QString &systemId)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_startDTD_5859_0, &_call_cbs_startDTD_5859_0, &_set_callback_cbs_startDTD_5859_0);
  methods += new qt_gsi::GenericMethod ("startDocument", "@hide", false, &_init_cbs_startDocument_0_0, &_call_cbs_startDocument_0_0);
  methods += new qt_gsi::GenericMethod ("startDocument", "@brief Virtual method bool QXmlDefaultHandler::startDocument()\nThis method can be reimplemented in a derived class.", false, &_init_cbs_startDocument_0_0, &_call_cbs_startDocument_0_0, &_set_callback_cbs_startDocument_0_0);
  methods += new qt_gsi::GenericMethod ("startElement", "@hide", false, &_init_cbs_startElement_8513_0, &_call_cbs_startElement_8513_0);
  methods += new qt_gsi::GenericMethod ("startElement", "@brief Virtual method bool QXmlDefaultHandler::startElement(const QString &namespaceURI, const QString &localName, const QString &qName, const QXmlAttributes &atts)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_startElement_8513_0, &_call_cbs_startElement_8513_0, &_set_callback_cbs_startElement_8513_0);
  methods += new qt_gsi::GenericMethod ("startEntity", "@hide", false, &_init_cbs_startEntity_2025_0, &_call_cbs_startEntity_2025_0);
  methods += new qt_gsi::GenericMethod ("startEntity", "@brief Virtual method bool QXmlDefaultHandler::startEntity(const QString &name)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_startEntity_2025_0, &_call_cbs_startEntity_2025_0, &_set_callback_cbs_startEntity_2025_0);
  methods += new qt_gsi::GenericMethod ("startPrefixMapping", "@hide", false, &_init_cbs_startPrefixMapping_3942_0, &_call_cbs_startPrefixMapping_3942_0);
  methods += new qt_gsi::GenericMethod ("startPrefixMapping", "@brief Virtual method bool QXmlDefaultHandler::startPrefixMapping(const QString &prefix, const QString &uri)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_startPrefixMapping_3942_0, &_call_cbs_startPrefixMapping_3942_0, &_set_callback_cbs_startPrefixMapping_3942_0);
  methods += new qt_gsi::GenericMethod ("unparsedEntityDecl", "@hide", false, &_init_cbs_unparsedEntityDecl_7776_0, &_call_cbs_unparsedEntityDecl_7776_0);
  methods += new qt_gsi::GenericMethod ("unparsedEntityDecl", "@brief Virtual method bool QXmlDefaultHandler::unparsedEntityDecl(const QString &name, const QString &publicId, const QString &systemId, const QString &notationName)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_unparsedEntityDecl_7776_0, &_call_cbs_unparsedEntityDecl_7776_0, &_set_callback_cbs_unparsedEntityDecl_7776_0);
  methods += new qt_gsi::GenericMethod ("warning", "@hide", false, &_init_cbs_warning_3149_0, &_call_cbs_warning_3149_0);
  methods += new qt_gsi::GenericMethod ("warning", "@brief Virtual method bool QXmlDefaultHandler::warning(const QXmlParseException &exception)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_warning_3149_0, &_call_cbs_warning_3149_0, &_set_callback_cbs_warning_3149_0);
  return methods;
}

gsi::Class<QXmlDefaultHandler_Adaptor> decl_QXmlDefaultHandler_Adaptor (qtdecl_QXmlDefaultHandler (), "QtXml", "QXmlDefaultHandler",
  methods_QXmlDefaultHandler_Adaptor (),
  "@qt\n@brief Binding of QXmlDefaultHandler");

}

