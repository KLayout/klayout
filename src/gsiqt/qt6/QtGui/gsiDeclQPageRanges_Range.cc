
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2023 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQPageRanges_Range.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QPageRanges>
#include "gsiQt.h"
#include "gsiQtGuiCommon.h"
#include <memory>

// -----------------------------------------------------------------------
// struct QPageRanges::Range

//  Constructor QPageRanges::Range::Range()


static void _init_ctor_QPageRanges_Range_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QPageRanges::Range> ();
}

static void _call_ctor_QPageRanges_Range_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QPageRanges::Range *> (new QPageRanges::Range ());
}


// bool QPageRanges::Range::contains(int pageNumber)


static void _init_f_contains_c767 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("pageNumber");
  decl->add_arg<int > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_contains_c767 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  int arg1 = gsi::arg_reader<int >() (args, heap);
  ret.write<bool > ((bool)((QPageRanges::Range *)cls)->contains (arg1));
}



namespace gsi
{

static gsi::Methods methods_QPageRanges_Range () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QPageRanges::Range::Range()\nThis method creates an object of class QPageRanges::Range.", &_init_ctor_QPageRanges_Range_0, &_call_ctor_QPageRanges_Range_0);
  methods += new qt_gsi::GenericMethod ("contains", "@brief Method bool QPageRanges::Range::contains(int pageNumber)\n", true, &_init_f_contains_c767, &_call_f_contains_c767);
  return methods;
}

gsi::Class<QPageRanges::Range> decl_QPageRanges_Range ("QtGui", "QPageRanges_Range",
  methods_QPageRanges_Range (),
  "@qt\n@brief Binding of QPageRanges::Range");

gsi::ClassExt<QPageRanges> decl_QPageRanges_Range_as_child (decl_QPageRanges_Range, "Range");

GSI_QTGUI_PUBLIC gsi::Class<QPageRanges::Range> &qtdecl_QPageRanges_Range () { return decl_QPageRanges_Range; }

}

