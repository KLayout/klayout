
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2023 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQRandomGenerator64.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QRandomGenerator64>
#include <QRandomGenerator>
#include "gsiQt.h"
#include "gsiQtCoreCommon.h"
#include <memory>

// -----------------------------------------------------------------------
// class QRandomGenerator64

//  Constructor QRandomGenerator64::QRandomGenerator64(quint32 seedValue)


static void _init_ctor_QRandomGenerator64_1098 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("seedValue", true, "1");
  decl->add_arg<quint32 > (argspec_0);
  decl->set_return_new<QRandomGenerator64> ();
}

static void _call_ctor_QRandomGenerator64_1098 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  quint32 arg1 = args ? gsi::arg_reader<quint32 >() (args, heap) : gsi::arg_maker<quint32 >() (1, heap);
  ret.write<QRandomGenerator64 *> (new QRandomGenerator64 (arg1));
}


//  Constructor QRandomGenerator64::QRandomGenerator64(const QRandomGenerator &other)


static void _init_ctor_QRandomGenerator64_2938 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QRandomGenerator & > (argspec_0);
  decl->set_return_new<QRandomGenerator64> ();
}

static void _call_ctor_QRandomGenerator64_2938 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QRandomGenerator &arg1 = gsi::arg_reader<const QRandomGenerator & >() (args, heap);
  ret.write<QRandomGenerator64 *> (new QRandomGenerator64 (arg1));
}


// void QRandomGenerator64::discard(unsigned long long int z)


static void _init_f_discard_2924 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("z");
  decl->add_arg<unsigned long long int > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_discard_2924 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  unsigned long long int arg1 = gsi::arg_reader<unsigned long long int >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QRandomGenerator64 *)cls)->discard (arg1);
}


// void QRandomGenerator64::generate(quint32 *begin, quint32 *end)


static void _init_f_generate_2460 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("begin");
  decl->add_arg<quint32 * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("end");
  decl->add_arg<quint32 * > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_generate_2460 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  quint32 *arg1 = gsi::arg_reader<quint32 * >() (args, heap);
  quint32 *arg2 = gsi::arg_reader<quint32 * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QRandomGenerator64 *)cls)->generate (arg1, arg2);
}


// quint64 QRandomGenerator64::generate()


static void _init_f_generate_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<quint64 > ();
}

static void _call_f_generate_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<quint64 > ((quint64)((QRandomGenerator64 *)cls)->generate ());
}


// quint32 QRandomGenerator64::operator()()


static void _init_f_operator_func__0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<quint32 > ();
}

static void _call_f_operator_func__0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<quint32 > ((quint32)((QRandomGenerator64 *)cls)->operator() ());
}


// static QRandomGenerator64 *QRandomGenerator64::global()


static void _init_f_global_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return<QRandomGenerator64 * > ();
}

static void _call_f_global_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QRandomGenerator64 * > ((QRandomGenerator64 *)QRandomGenerator64::global ());
}


// static quint32 QRandomGenerator64::max()


static void _init_f_max_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return<quint32 > ();
}

static void _call_f_max_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<quint32 > ((quint32)QRandomGenerator64::max ());
}


// static quint32 QRandomGenerator64::min()


static void _init_f_min_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return<quint32 > ();
}

static void _call_f_min_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<quint32 > ((quint32)QRandomGenerator64::min ());
}


// static QRandomGenerator64 QRandomGenerator64::securelySeeded()


static void _init_f_securelySeeded_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return<QRandomGenerator64 > ();
}

static void _call_f_securelySeeded_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QRandomGenerator64 > ((QRandomGenerator64)QRandomGenerator64::securelySeeded ());
}


// static QRandomGenerator64 *QRandomGenerator64::system()


static void _init_f_system_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return<QRandomGenerator64 * > ();
}

static void _call_f_system_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QRandomGenerator64 * > ((QRandomGenerator64 *)QRandomGenerator64::system ());
}



namespace gsi
{

static gsi::Methods methods_QRandomGenerator64 () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QRandomGenerator64::QRandomGenerator64(quint32 seedValue)\nThis method creates an object of class QRandomGenerator64.", &_init_ctor_QRandomGenerator64_1098, &_call_ctor_QRandomGenerator64_1098);
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QRandomGenerator64::QRandomGenerator64(const QRandomGenerator &other)\nThis method creates an object of class QRandomGenerator64.", &_init_ctor_QRandomGenerator64_2938, &_call_ctor_QRandomGenerator64_2938);
  methods += new qt_gsi::GenericMethod ("discard", "@brief Method void QRandomGenerator64::discard(unsigned long long int z)\n", false, &_init_f_discard_2924, &_call_f_discard_2924);
  methods += new qt_gsi::GenericMethod ("generate", "@brief Method void QRandomGenerator64::generate(quint32 *begin, quint32 *end)\n", false, &_init_f_generate_2460, &_call_f_generate_2460);
  methods += new qt_gsi::GenericMethod ("generate", "@brief Method quint64 QRandomGenerator64::generate()\n", false, &_init_f_generate_0, &_call_f_generate_0);
  methods += new qt_gsi::GenericMethod ("()", "@brief Method quint32 QRandomGenerator64::operator()()\n", false, &_init_f_operator_func__0, &_call_f_operator_func__0);
  methods += new qt_gsi::GenericStaticMethod ("global", "@brief Static method QRandomGenerator64 *QRandomGenerator64::global()\nThis method is static and can be called without an instance.", &_init_f_global_0, &_call_f_global_0);
  methods += new qt_gsi::GenericStaticMethod ("max", "@brief Static method quint32 QRandomGenerator64::max()\nThis method is static and can be called without an instance.", &_init_f_max_0, &_call_f_max_0);
  methods += new qt_gsi::GenericStaticMethod ("min", "@brief Static method quint32 QRandomGenerator64::min()\nThis method is static and can be called without an instance.", &_init_f_min_0, &_call_f_min_0);
  methods += new qt_gsi::GenericStaticMethod ("securelySeeded", "@brief Static method QRandomGenerator64 QRandomGenerator64::securelySeeded()\nThis method is static and can be called without an instance.", &_init_f_securelySeeded_0, &_call_f_securelySeeded_0);
  methods += new qt_gsi::GenericStaticMethod ("system", "@brief Static method QRandomGenerator64 *QRandomGenerator64::system()\nThis method is static and can be called without an instance.", &_init_f_system_0, &_call_f_system_0);
  return methods;
}

gsi::Class<QRandomGenerator> &qtdecl_QRandomGenerator ();

gsi::Class<QRandomGenerator64> decl_QRandomGenerator64 (qtdecl_QRandomGenerator (), "QtCore", "QRandomGenerator64",
  methods_QRandomGenerator64 (),
  "@qt\n@brief Binding of QRandomGenerator64");


GSI_QTCORE_PUBLIC gsi::Class<QRandomGenerator64> &qtdecl_QRandomGenerator64 () { return decl_QRandomGenerator64; }

}

