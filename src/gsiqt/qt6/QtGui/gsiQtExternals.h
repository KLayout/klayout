
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2022 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/*
  External declarations for for Qt bindings

  DO NOT EDIT THIS FILE. 
  This file has been created automatically
*/

#if !defined(HDR_gsiQtGuiExternals)
#define HDR_gsiQtGuiExternals

#include "gsiClass.h"
#include "gsiQtGuiCommon.h"

class QAbstractFileIconProvider;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QAbstractFileIconProvider> &qtdecl_QAbstractFileIconProvider (); }

class QAbstractTextDocumentLayout;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QAbstractTextDocumentLayout> &qtdecl_QAbstractTextDocumentLayout (); }

class QAbstractUndoItem;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QAbstractUndoItem> &qtdecl_QAbstractUndoItem (); }

class QAccessible;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QAccessible> &qtdecl_QAccessible (); }

class QAccessibleActionInterface;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QAccessibleActionInterface> &qtdecl_QAccessibleActionInterface (); }

class QAccessibleEditableTextInterface;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QAccessibleEditableTextInterface> &qtdecl_QAccessibleEditableTextInterface (); }

class QAccessibleEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QAccessibleEvent> &qtdecl_QAccessibleEvent (); }

class QAccessibleHyperlinkInterface;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QAccessibleHyperlinkInterface> &qtdecl_QAccessibleHyperlinkInterface (); }

class QAccessibleImageInterface;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QAccessibleImageInterface> &qtdecl_QAccessibleImageInterface (); }

class QAccessibleInterface;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QAccessibleInterface> &qtdecl_QAccessibleInterface (); }

class QAccessibleObject;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QAccessibleObject> &qtdecl_QAccessibleObject (); }

class QAccessibleStateChangeEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QAccessibleStateChangeEvent> &qtdecl_QAccessibleStateChangeEvent (); }

class QAccessibleTableCellInterface;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QAccessibleTableCellInterface> &qtdecl_QAccessibleTableCellInterface (); }

class QAccessibleTableInterface;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QAccessibleTableInterface> &qtdecl_QAccessibleTableInterface (); }

class QAccessibleTableModelChangeEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QAccessibleTableModelChangeEvent> &qtdecl_QAccessibleTableModelChangeEvent (); }

class QAccessibleTextCursorEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QAccessibleTextCursorEvent> &qtdecl_QAccessibleTextCursorEvent (); }

class QAccessibleTextInsertEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QAccessibleTextInsertEvent> &qtdecl_QAccessibleTextInsertEvent (); }

class QAccessibleTextInterface;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QAccessibleTextInterface> &qtdecl_QAccessibleTextInterface (); }

class QAccessibleTextRemoveEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QAccessibleTextRemoveEvent> &qtdecl_QAccessibleTextRemoveEvent (); }

class QAccessibleTextSelectionEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QAccessibleTextSelectionEvent> &qtdecl_QAccessibleTextSelectionEvent (); }

class QAccessibleTextUpdateEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QAccessibleTextUpdateEvent> &qtdecl_QAccessibleTextUpdateEvent (); }

class QAccessibleValueChangeEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QAccessibleValueChangeEvent> &qtdecl_QAccessibleValueChangeEvent (); }

class QAccessibleValueInterface;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QAccessibleValueInterface> &qtdecl_QAccessibleValueInterface (); }

class QAction;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QAction> &qtdecl_QAction (); }

class QActionEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QActionEvent> &qtdecl_QActionEvent (); }

class QActionGroup;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QActionGroup> &qtdecl_QActionGroup (); }

class QApplicationStateChangeEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QApplicationStateChangeEvent> &qtdecl_QApplicationStateChangeEvent (); }

class QBackingStore;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QBackingStore> &qtdecl_QBackingStore (); }

class QBitmap;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QBitmap> &qtdecl_QBitmap (); }

class QBrush;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QBrush> &qtdecl_QBrush (); }

class QClipboard;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QClipboard> &qtdecl_QClipboard (); }

class QCloseEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QCloseEvent> &qtdecl_QCloseEvent (); }

class QColor;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QColor> &qtdecl_QColor (); }

class QColorSpace;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QColorSpace> &qtdecl_QColorSpace (); }

class QColorTransform;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QColorTransform> &qtdecl_QColorTransform (); }

class QConicalGradient;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QConicalGradient> &qtdecl_QConicalGradient (); }

class QContextMenuEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QContextMenuEvent> &qtdecl_QContextMenuEvent (); }

class QCursor;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QCursor> &qtdecl_QCursor (); }

class QDesktopServices;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QDesktopServices> &qtdecl_QDesktopServices (); }

class QDoubleValidator;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QDoubleValidator> &qtdecl_QDoubleValidator (); }

class QDrag;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QDrag> &qtdecl_QDrag (); }

class QDragEnterEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QDragEnterEvent> &qtdecl_QDragEnterEvent (); }

class QDragLeaveEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QDragLeaveEvent> &qtdecl_QDragLeaveEvent (); }

class QDragMoveEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QDragMoveEvent> &qtdecl_QDragMoveEvent (); }

class QDropEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QDropEvent> &qtdecl_QDropEvent (); }

class QEnterEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QEnterEvent> &qtdecl_QEnterEvent (); }

class QEventPoint;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QEventPoint> &qtdecl_QEventPoint (); }

class QExposeEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QExposeEvent> &qtdecl_QExposeEvent (); }

class QFileOpenEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QFileOpenEvent> &qtdecl_QFileOpenEvent (); }

class QFileSystemModel;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QFileSystemModel> &qtdecl_QFileSystemModel (); }

class QFocusEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QFocusEvent> &qtdecl_QFocusEvent (); }

class QFont;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QFont> &qtdecl_QFont (); }

class QFontDatabase;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QFontDatabase> &qtdecl_QFontDatabase (); }

class QFontInfo;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QFontInfo> &qtdecl_QFontInfo (); }

class QFontMetrics;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QFontMetrics> &qtdecl_QFontMetrics (); }

class QFontMetricsF;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QFontMetricsF> &qtdecl_QFontMetricsF (); }

class QGenericPlugin;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QGenericPlugin> &qtdecl_QGenericPlugin (); }

class QGenericPluginFactory;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QGenericPluginFactory> &qtdecl_QGenericPluginFactory (); }

class QGlyphRun;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QGlyphRun> &qtdecl_QGlyphRun (); }

class QGradient;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QGradient> &qtdecl_QGradient (); }

class QGuiApplication;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QGuiApplication> &qtdecl_QGuiApplication (); }

class QHelpEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QHelpEvent> &qtdecl_QHelpEvent (); }

class QHideEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QHideEvent> &qtdecl_QHideEvent (); }

class QHoverEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QHoverEvent> &qtdecl_QHoverEvent (); }

class QIcon;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QIcon> &qtdecl_QIcon (); }

class QIconDragEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QIconDragEvent> &qtdecl_QIconDragEvent (); }

class QIconEngine;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QIconEngine> &qtdecl_QIconEngine (); }

class QIconEnginePlugin;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QIconEnginePlugin> &qtdecl_QIconEnginePlugin (); }

class QImage;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QImage> &qtdecl_QImage (); }

class QImageIOHandler;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QImageIOHandler> &qtdecl_QImageIOHandler (); }

class QImageIOPlugin;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QImageIOPlugin> &qtdecl_QImageIOPlugin (); }

class QImageReader;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QImageReader> &qtdecl_QImageReader (); }

class QImageWriter;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QImageWriter> &qtdecl_QImageWriter (); }

class QInputDevice;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QInputDevice> &qtdecl_QInputDevice (); }

class QInputEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QInputEvent> &qtdecl_QInputEvent (); }

class QInputMethod;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QInputMethod> &qtdecl_QInputMethod (); }

class QInputMethodEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QInputMethodEvent> &qtdecl_QInputMethodEvent (); }

class QInputMethodQueryEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QInputMethodQueryEvent> &qtdecl_QInputMethodQueryEvent (); }

class QIntValidator;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QIntValidator> &qtdecl_QIntValidator (); }

class QKeyEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QKeyEvent> &qtdecl_QKeyEvent (); }

class QKeySequence;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QKeySequence> &qtdecl_QKeySequence (); }

class QLinearGradient;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QLinearGradient> &qtdecl_QLinearGradient (); }

class QMatrix4x4;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QMatrix4x4> &qtdecl_QMatrix4x4 (); }

class QMouseEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QMouseEvent> &qtdecl_QMouseEvent (); }

class QMoveEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QMoveEvent> &qtdecl_QMoveEvent (); }

class QMovie;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QMovie> &qtdecl_QMovie (); }

class QNativeGestureEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QNativeGestureEvent> &qtdecl_QNativeGestureEvent (); }

class QOffscreenSurface;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QOffscreenSurface> &qtdecl_QOffscreenSurface (); }

class QPageLayout;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QPageLayout> &qtdecl_QPageLayout (); }

class QPageRanges;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QPageRanges> &qtdecl_QPageRanges (); }

class QPageSize;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QPageSize> &qtdecl_QPageSize (); }

class QPagedPaintDevice;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QPagedPaintDevice> &qtdecl_QPagedPaintDevice (); }

class QPaintDevice;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QPaintDevice> &qtdecl_QPaintDevice (); }

class QPaintDeviceWindow;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QPaintDeviceWindow> &qtdecl_QPaintDeviceWindow (); }

class QPaintEngine;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QPaintEngine> &qtdecl_QPaintEngine (); }

class QPaintEngineState;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QPaintEngineState> &qtdecl_QPaintEngineState (); }

class QPaintEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QPaintEvent> &qtdecl_QPaintEvent (); }

class QPainter;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QPainter> &qtdecl_QPainter (); }

class QPainterPath;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QPainterPath> &qtdecl_QPainterPath (); }

class QPainterPathStroker;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QPainterPathStroker> &qtdecl_QPainterPathStroker (); }

class QPalette;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QPalette> &qtdecl_QPalette (); }

class QPdfWriter;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QPdfWriter> &qtdecl_QPdfWriter (); }

class QPen;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QPen> &qtdecl_QPen (); }

class QPicture;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QPicture> &qtdecl_QPicture (); }

class QPixelFormat;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QPixelFormat> &qtdecl_QPixelFormat (); }

class QPixmap;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QPixmap> &qtdecl_QPixmap (); }

class QPixmapCache;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QPixmapCache> &qtdecl_QPixmapCache (); }

class QPlatformSurfaceEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QPlatformSurfaceEvent> &qtdecl_QPlatformSurfaceEvent (); }

class QPointerEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QPointerEvent> &qtdecl_QPointerEvent (); }

class QPointingDevice;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QPointingDevice> &qtdecl_QPointingDevice (); }

class QPointingDeviceUniqueId;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QPointingDeviceUniqueId> &qtdecl_QPointingDeviceUniqueId (); }

class QPolygon;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QPolygon> &qtdecl_QPolygon (); }

class QPolygonF;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QPolygonF> &qtdecl_QPolygonF (); }

class QQuaternion;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QQuaternion> &qtdecl_QQuaternion (); }

class QRadialGradient;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QRadialGradient> &qtdecl_QRadialGradient (); }

class QRasterWindow;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QRasterWindow> &qtdecl_QRasterWindow (); }

class QRawFont;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QRawFont> &qtdecl_QRawFont (); }

class QRegion;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QRegion> &qtdecl_QRegion (); }

class QRegularExpressionValidator;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QRegularExpressionValidator> &qtdecl_QRegularExpressionValidator (); }

class QResizeEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QResizeEvent> &qtdecl_QResizeEvent (); }

class QRgba64;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QRgba64> &qtdecl_QRgba64 (); }

class QScreen;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QScreen> &qtdecl_QScreen (); }

class QScreenOrientationChangeEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QScreenOrientationChangeEvent> &qtdecl_QScreenOrientationChangeEvent (); }

class QScrollEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QScrollEvent> &qtdecl_QScrollEvent (); }

class QScrollPrepareEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QScrollPrepareEvent> &qtdecl_QScrollPrepareEvent (); }

class QSessionManager;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QSessionManager> &qtdecl_QSessionManager (); }

class QShortcut;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QShortcut> &qtdecl_QShortcut (); }

class QShortcutEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QShortcutEvent> &qtdecl_QShortcutEvent (); }

class QShowEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QShowEvent> &qtdecl_QShowEvent (); }

class QSinglePointEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QSinglePointEvent> &qtdecl_QSinglePointEvent (); }

class QStandardItem;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QStandardItem> &qtdecl_QStandardItem (); }

class QStandardItemModel;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QStandardItemModel> &qtdecl_QStandardItemModel (); }

class QStaticText;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QStaticText> &qtdecl_QStaticText (); }

class QStatusTipEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QStatusTipEvent> &qtdecl_QStatusTipEvent (); }

class QStyleHints;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QStyleHints> &qtdecl_QStyleHints (); }

class QSurface;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QSurface> &qtdecl_QSurface (); }

class QSurfaceFormat;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QSurfaceFormat> &qtdecl_QSurfaceFormat (); }

class QSyntaxHighlighter;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QSyntaxHighlighter> &qtdecl_QSyntaxHighlighter (); }

class QTabletEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTabletEvent> &qtdecl_QTabletEvent (); }

class QTextBlock;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTextBlock> &qtdecl_QTextBlock (); }

class QTextBlockFormat;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTextBlockFormat> &qtdecl_QTextBlockFormat (); }

class QTextBlockGroup;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTextBlockGroup> &qtdecl_QTextBlockGroup (); }

class QTextBlockUserData;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTextBlockUserData> &qtdecl_QTextBlockUserData (); }

class QTextCharFormat;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTextCharFormat> &qtdecl_QTextCharFormat (); }

class QTextCursor;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTextCursor> &qtdecl_QTextCursor (); }

class QTextDocument;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTextDocument> &qtdecl_QTextDocument (); }

class QTextDocumentFragment;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTextDocumentFragment> &qtdecl_QTextDocumentFragment (); }

class QTextDocumentWriter;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTextDocumentWriter> &qtdecl_QTextDocumentWriter (); }

class QTextFormat;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTextFormat> &qtdecl_QTextFormat (); }

class QTextFragment;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTextFragment> &qtdecl_QTextFragment (); }

class QTextFrame;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTextFrame> &qtdecl_QTextFrame (); }

class QTextFrameFormat;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTextFrameFormat> &qtdecl_QTextFrameFormat (); }

class QTextImageFormat;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTextImageFormat> &qtdecl_QTextImageFormat (); }

class QTextInlineObject;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTextInlineObject> &qtdecl_QTextInlineObject (); }

class QTextItem;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTextItem> &qtdecl_QTextItem (); }

class QTextLayout;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTextLayout> &qtdecl_QTextLayout (); }

class QTextLength;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTextLength> &qtdecl_QTextLength (); }

class QTextLine;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTextLine> &qtdecl_QTextLine (); }

class QTextList;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTextList> &qtdecl_QTextList (); }

class QTextListFormat;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTextListFormat> &qtdecl_QTextListFormat (); }

class QTextObject;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTextObject> &qtdecl_QTextObject (); }

class QTextObjectInterface;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTextObjectInterface> &qtdecl_QTextObjectInterface (); }

class QTextOption;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTextOption> &qtdecl_QTextOption (); }

class QTextTable;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTextTable> &qtdecl_QTextTable (); }

class QTextTableCell;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTextTableCell> &qtdecl_QTextTableCell (); }

class QTextTableCellFormat;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTextTableCellFormat> &qtdecl_QTextTableCellFormat (); }

class QTextTableFormat;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTextTableFormat> &qtdecl_QTextTableFormat (); }

class QToolBarChangeEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QToolBarChangeEvent> &qtdecl_QToolBarChangeEvent (); }

class QTouchEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTouchEvent> &qtdecl_QTouchEvent (); }

class QTransform;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QTransform> &qtdecl_QTransform (); }

class QUndoCommand;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QUndoCommand> &qtdecl_QUndoCommand (); }

class QUndoGroup;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QUndoGroup> &qtdecl_QUndoGroup (); }

class QUndoStack;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QUndoStack> &qtdecl_QUndoStack (); }

class QValidator;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QValidator> &qtdecl_QValidator (); }

class QVector2D;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QVector2D> &qtdecl_QVector2D (); }

class QVector3D;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QVector3D> &qtdecl_QVector3D (); }

class QVector4D;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QVector4D> &qtdecl_QVector4D (); }

class QWhatsThisClickedEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QWhatsThisClickedEvent> &qtdecl_QWhatsThisClickedEvent (); }

class QWheelEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QWheelEvent> &qtdecl_QWheelEvent (); }

class QWindow;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QWindow> &qtdecl_QWindow (); }

class QWindowStateChangeEvent;

namespace gsi { GSI_QTGUI_PUBLIC gsi::Class<QWindowStateChangeEvent> &qtdecl_QWindowStateChangeEvent (); }


#define QT_EXTERNAL_BASE(X) gsi::qtdecl_##X(),

#endif

