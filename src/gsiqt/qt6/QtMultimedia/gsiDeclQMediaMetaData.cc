
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2022 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQMediaMetaData.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QMediaMetaData>
#include "gsiQt.h"
#include "gsiQtMultimediaCommon.h"
#include <memory>

// -----------------------------------------------------------------------
// class QMediaMetaData

//  Constructor QMediaMetaData::QMediaMetaData()


static void _init_ctor_QMediaMetaData_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QMediaMetaData> ();
}

static void _call_ctor_QMediaMetaData_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QMediaMetaData *> (new QMediaMetaData ());
}


// void QMediaMetaData::clear()


static void _init_f_clear_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_f_clear_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMediaMetaData *)cls)->clear ();
}


// void QMediaMetaData::insert(QMediaMetaData::Key k, const QVariant &value)


static void _init_f_insert_4190 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("k");
  decl->add_arg<const qt_gsi::Converter<QMediaMetaData::Key>::target_type & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("value");
  decl->add_arg<const QVariant & > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_insert_4190 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<QMediaMetaData::Key>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<QMediaMetaData::Key>::target_type & >() (args, heap);
  const QVariant &arg2 = gsi::arg_reader<const QVariant & >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMediaMetaData *)cls)->insert (qt_gsi::QtToCppAdaptor<QMediaMetaData::Key>(arg1).cref(), arg2);
}


// bool QMediaMetaData::isEmpty()


static void _init_f_isEmpty_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isEmpty_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QMediaMetaData *)cls)->isEmpty ());
}


// QList<QMediaMetaData::Key> QMediaMetaData::keys()


static void _init_f_keys_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QList<QMediaMetaData::Key> > ();
}

static void _call_f_keys_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QList<QMediaMetaData::Key> > ((QList<QMediaMetaData::Key>)((QMediaMetaData *)cls)->keys ());
}


// QVariant &QMediaMetaData::operator[](QMediaMetaData::Key k)


static void _init_f_operator_index__2179 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("k");
  decl->add_arg<const qt_gsi::Converter<QMediaMetaData::Key>::target_type & > (argspec_0);
  decl->set_return<QVariant & > ();
}

static void _call_f_operator_index__2179 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<QMediaMetaData::Key>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<QMediaMetaData::Key>::target_type & >() (args, heap);
  ret.write<QVariant & > ((QVariant &)((QMediaMetaData *)cls)->operator[] (qt_gsi::QtToCppAdaptor<QMediaMetaData::Key>(arg1).cref()));
}


// void QMediaMetaData::remove(QMediaMetaData::Key k)


static void _init_f_remove_2179 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("k");
  decl->add_arg<const qt_gsi::Converter<QMediaMetaData::Key>::target_type & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_remove_2179 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<QMediaMetaData::Key>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<QMediaMetaData::Key>::target_type & >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMediaMetaData *)cls)->remove (qt_gsi::QtToCppAdaptor<QMediaMetaData::Key>(arg1).cref());
}


// QString QMediaMetaData::stringValue(QMediaMetaData::Key k)


static void _init_f_stringValue_c2179 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("k");
  decl->add_arg<const qt_gsi::Converter<QMediaMetaData::Key>::target_type & > (argspec_0);
  decl->set_return<QString > ();
}

static void _call_f_stringValue_c2179 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<QMediaMetaData::Key>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<QMediaMetaData::Key>::target_type & >() (args, heap);
  ret.write<QString > ((QString)((QMediaMetaData *)cls)->stringValue (qt_gsi::QtToCppAdaptor<QMediaMetaData::Key>(arg1).cref()));
}


// QVariant QMediaMetaData::value(QMediaMetaData::Key k)


static void _init_f_value_c2179 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("k");
  decl->add_arg<const qt_gsi::Converter<QMediaMetaData::Key>::target_type & > (argspec_0);
  decl->set_return<QVariant > ();
}

static void _call_f_value_c2179 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<QMediaMetaData::Key>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<QMediaMetaData::Key>::target_type & >() (args, heap);
  ret.write<QVariant > ((QVariant)((QMediaMetaData *)cls)->value (qt_gsi::QtToCppAdaptor<QMediaMetaData::Key>(arg1).cref()));
}


// static QString QMediaMetaData::metaDataKeyToString(QMediaMetaData::Key k)


static void _init_f_metaDataKeyToString_2179 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("k");
  decl->add_arg<const qt_gsi::Converter<QMediaMetaData::Key>::target_type & > (argspec_0);
  decl->set_return<QString > ();
}

static void _call_f_metaDataKeyToString_2179 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<QMediaMetaData::Key>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<QMediaMetaData::Key>::target_type & >() (args, heap);
  ret.write<QString > ((QString)QMediaMetaData::metaDataKeyToString (qt_gsi::QtToCppAdaptor<QMediaMetaData::Key>(arg1).cref()));
}



namespace gsi
{

static gsi::Methods methods_QMediaMetaData () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QMediaMetaData::QMediaMetaData()\nThis method creates an object of class QMediaMetaData.", &_init_ctor_QMediaMetaData_0, &_call_ctor_QMediaMetaData_0);
  methods += new qt_gsi::GenericMethod ("clear", "@brief Method void QMediaMetaData::clear()\n", false, &_init_f_clear_0, &_call_f_clear_0);
  methods += new qt_gsi::GenericMethod ("insert", "@brief Method void QMediaMetaData::insert(QMediaMetaData::Key k, const QVariant &value)\n", false, &_init_f_insert_4190, &_call_f_insert_4190);
  methods += new qt_gsi::GenericMethod ("isEmpty?", "@brief Method bool QMediaMetaData::isEmpty()\n", true, &_init_f_isEmpty_c0, &_call_f_isEmpty_c0);
  methods += new qt_gsi::GenericMethod ("keys", "@brief Method QList<QMediaMetaData::Key> QMediaMetaData::keys()\n", true, &_init_f_keys_c0, &_call_f_keys_c0);
  methods += new qt_gsi::GenericMethod ("[]", "@brief Method QVariant &QMediaMetaData::operator[](QMediaMetaData::Key k)\n", false, &_init_f_operator_index__2179, &_call_f_operator_index__2179);
  methods += new qt_gsi::GenericMethod ("remove", "@brief Method void QMediaMetaData::remove(QMediaMetaData::Key k)\n", false, &_init_f_remove_2179, &_call_f_remove_2179);
  methods += new qt_gsi::GenericMethod ("stringValue", "@brief Method QString QMediaMetaData::stringValue(QMediaMetaData::Key k)\n", true, &_init_f_stringValue_c2179, &_call_f_stringValue_c2179);
  methods += new qt_gsi::GenericMethod ("value", "@brief Method QVariant QMediaMetaData::value(QMediaMetaData::Key k)\n", true, &_init_f_value_c2179, &_call_f_value_c2179);
  methods += new qt_gsi::GenericStaticMethod ("metaDataKeyToString", "@brief Static method QString QMediaMetaData::metaDataKeyToString(QMediaMetaData::Key k)\nThis method is static and can be called without an instance.", &_init_f_metaDataKeyToString_2179, &_call_f_metaDataKeyToString_2179);
  return methods;
}

gsi::Class<QMediaMetaData> decl_QMediaMetaData ("QtMultimedia", "QMediaMetaData",
  methods_QMediaMetaData (),
  "@qt\n@brief Binding of QMediaMetaData");


GSI_QTMULTIMEDIA_PUBLIC gsi::Class<QMediaMetaData> &qtdecl_QMediaMetaData () { return decl_QMediaMetaData; }

}


//  Implementation of the enum wrapper class for QMediaMetaData::Key
namespace qt_gsi
{

static gsi::Enum<QMediaMetaData::Key> decl_QMediaMetaData_Key_Enum ("QtMultimedia", "QMediaMetaData_Key",
    gsi::enum_const ("Title", QMediaMetaData::Title, "@brief Enum constant QMediaMetaData::Title") +
    gsi::enum_const ("Author", QMediaMetaData::Author, "@brief Enum constant QMediaMetaData::Author") +
    gsi::enum_const ("Comment", QMediaMetaData::Comment, "@brief Enum constant QMediaMetaData::Comment") +
    gsi::enum_const ("Description", QMediaMetaData::Description, "@brief Enum constant QMediaMetaData::Description") +
    gsi::enum_const ("Genre", QMediaMetaData::Genre, "@brief Enum constant QMediaMetaData::Genre") +
    gsi::enum_const ("Date", QMediaMetaData::Date, "@brief Enum constant QMediaMetaData::Date") +
    gsi::enum_const ("Language", QMediaMetaData::Language, "@brief Enum constant QMediaMetaData::Language") +
    gsi::enum_const ("Publisher", QMediaMetaData::Publisher, "@brief Enum constant QMediaMetaData::Publisher") +
    gsi::enum_const ("Copyright", QMediaMetaData::Copyright, "@brief Enum constant QMediaMetaData::Copyright") +
    gsi::enum_const ("Url", QMediaMetaData::Url, "@brief Enum constant QMediaMetaData::Url") +
    gsi::enum_const ("Duration", QMediaMetaData::Duration, "@brief Enum constant QMediaMetaData::Duration") +
    gsi::enum_const ("MediaType", QMediaMetaData::MediaType, "@brief Enum constant QMediaMetaData::MediaType") +
    gsi::enum_const ("FileFormat", QMediaMetaData::FileFormat, "@brief Enum constant QMediaMetaData::FileFormat") +
    gsi::enum_const ("AudioBitRate", QMediaMetaData::AudioBitRate, "@brief Enum constant QMediaMetaData::AudioBitRate") +
    gsi::enum_const ("AudioCodec", QMediaMetaData::AudioCodec, "@brief Enum constant QMediaMetaData::AudioCodec") +
    gsi::enum_const ("VideoBitRate", QMediaMetaData::VideoBitRate, "@brief Enum constant QMediaMetaData::VideoBitRate") +
    gsi::enum_const ("VideoCodec", QMediaMetaData::VideoCodec, "@brief Enum constant QMediaMetaData::VideoCodec") +
    gsi::enum_const ("VideoFrameRate", QMediaMetaData::VideoFrameRate, "@brief Enum constant QMediaMetaData::VideoFrameRate") +
    gsi::enum_const ("AlbumTitle", QMediaMetaData::AlbumTitle, "@brief Enum constant QMediaMetaData::AlbumTitle") +
    gsi::enum_const ("AlbumArtist", QMediaMetaData::AlbumArtist, "@brief Enum constant QMediaMetaData::AlbumArtist") +
    gsi::enum_const ("ContributingArtist", QMediaMetaData::ContributingArtist, "@brief Enum constant QMediaMetaData::ContributingArtist") +
    gsi::enum_const ("TrackNumber", QMediaMetaData::TrackNumber, "@brief Enum constant QMediaMetaData::TrackNumber") +
    gsi::enum_const ("Composer", QMediaMetaData::Composer, "@brief Enum constant QMediaMetaData::Composer") +
    gsi::enum_const ("LeadPerformer", QMediaMetaData::LeadPerformer, "@brief Enum constant QMediaMetaData::LeadPerformer") +
    gsi::enum_const ("ThumbnailImage", QMediaMetaData::ThumbnailImage, "@brief Enum constant QMediaMetaData::ThumbnailImage") +
    gsi::enum_const ("CoverArtImage", QMediaMetaData::CoverArtImage, "@brief Enum constant QMediaMetaData::CoverArtImage") +
    gsi::enum_const ("Orientation", QMediaMetaData::Orientation, "@brief Enum constant QMediaMetaData::Orientation") +
    gsi::enum_const ("Resolution", QMediaMetaData::Resolution, "@brief Enum constant QMediaMetaData::Resolution"),
  "@qt\n@brief This class represents the QMediaMetaData::Key enum");

static gsi::QFlagsClass<QMediaMetaData::Key > decl_QMediaMetaData_Key_Enums ("QtMultimedia", "QMediaMetaData_QFlags_Key",
  "@qt\n@brief This class represents the QFlags<QMediaMetaData::Key> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<QMediaMetaData> inject_QMediaMetaData_Key_Enum_in_parent (decl_QMediaMetaData_Key_Enum.defs ());
static gsi::ClassExt<QMediaMetaData> decl_QMediaMetaData_Key_Enum_as_child (decl_QMediaMetaData_Key_Enum, "Key");
static gsi::ClassExt<QMediaMetaData> decl_QMediaMetaData_Key_Enums_as_child (decl_QMediaMetaData_Key_Enums, "QFlags_Key");

}

