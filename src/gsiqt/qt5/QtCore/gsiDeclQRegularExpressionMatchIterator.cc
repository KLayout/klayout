
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2019 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQRegularExpressionMatchIterator.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QRegularExpressionMatchIterator>
#include <QRegularExpression>
#include <QRegularExpressionMatch>
#include "gsiQt.h"
#include "gsiQtCoreCommon.h"
#include "gsiDeclQtCoreTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// class QRegularExpressionMatchIterator

//  Constructor QRegularExpressionMatchIterator::QRegularExpressionMatchIterator()


static void _init_ctor_QRegularExpressionMatchIterator_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QRegularExpressionMatchIterator> ();
}

static void _call_ctor_QRegularExpressionMatchIterator_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QRegularExpressionMatchIterator *> (new QRegularExpressionMatchIterator ());
}


//  Constructor QRegularExpressionMatchIterator::QRegularExpressionMatchIterator(const QRegularExpressionMatchIterator &iterator)


static void _init_ctor_QRegularExpressionMatchIterator_4523 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("iterator");
  decl->add_arg<const QRegularExpressionMatchIterator & > (argspec_0);
  decl->set_return_new<QRegularExpressionMatchIterator> ();
}

static void _call_ctor_QRegularExpressionMatchIterator_4523 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QRegularExpressionMatchIterator &arg1 = gsi::arg_reader<const QRegularExpressionMatchIterator & >() (args, heap);
  ret.write<QRegularExpressionMatchIterator *> (new QRegularExpressionMatchIterator (arg1));
}


// bool QRegularExpressionMatchIterator::hasNext()


static void _init_f_hasNext_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_hasNext_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QRegularExpressionMatchIterator *)cls)->hasNext ());
}


// bool QRegularExpressionMatchIterator::isValid()


static void _init_f_isValid_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isValid_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QRegularExpressionMatchIterator *)cls)->isValid ());
}


// QFlags<QRegularExpression::MatchOption> QRegularExpressionMatchIterator::matchOptions()


static void _init_f_matchOptions_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QFlags<QRegularExpression::MatchOption> > ();
}

static void _call_f_matchOptions_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QFlags<QRegularExpression::MatchOption> > ((QFlags<QRegularExpression::MatchOption>)((QRegularExpressionMatchIterator *)cls)->matchOptions ());
}


// QRegularExpression::MatchType QRegularExpressionMatchIterator::matchType()


static void _init_f_matchType_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QRegularExpression::MatchType>::target_type > ();
}

static void _call_f_matchType_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qt_gsi::Converter<QRegularExpression::MatchType>::target_type > ((qt_gsi::Converter<QRegularExpression::MatchType>::target_type)qt_gsi::CppToQtAdaptor<QRegularExpression::MatchType>(((QRegularExpressionMatchIterator *)cls)->matchType ()));
}


// QRegularExpressionMatch QRegularExpressionMatchIterator::next()


static void _init_f_next_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QRegularExpressionMatch > ();
}

static void _call_f_next_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QRegularExpressionMatch > ((QRegularExpressionMatch)((QRegularExpressionMatchIterator *)cls)->next ());
}


// QRegularExpressionMatchIterator &QRegularExpressionMatchIterator::operator=(const QRegularExpressionMatchIterator &iterator)


static void _init_f_operator_eq__4523 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("iterator");
  decl->add_arg<const QRegularExpressionMatchIterator & > (argspec_0);
  decl->set_return<QRegularExpressionMatchIterator & > ();
}

static void _call_f_operator_eq__4523 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QRegularExpressionMatchIterator &arg1 = gsi::arg_reader<const QRegularExpressionMatchIterator & >() (args, heap);
  ret.write<QRegularExpressionMatchIterator & > ((QRegularExpressionMatchIterator &)((QRegularExpressionMatchIterator *)cls)->operator= (arg1));
}


// QRegularExpressionMatch QRegularExpressionMatchIterator::peekNext()


static void _init_f_peekNext_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QRegularExpressionMatch > ();
}

static void _call_f_peekNext_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QRegularExpressionMatch > ((QRegularExpressionMatch)((QRegularExpressionMatchIterator *)cls)->peekNext ());
}


// QRegularExpression QRegularExpressionMatchIterator::regularExpression()


static void _init_f_regularExpression_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QRegularExpression > ();
}

static void _call_f_regularExpression_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QRegularExpression > ((QRegularExpression)((QRegularExpressionMatchIterator *)cls)->regularExpression ());
}


// void QRegularExpressionMatchIterator::swap(QRegularExpressionMatchIterator &other)


static void _init_f_swap_3828 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<QRegularExpressionMatchIterator & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_swap_3828 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QRegularExpressionMatchIterator &arg1 = gsi::arg_reader<QRegularExpressionMatchIterator & >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QRegularExpressionMatchIterator *)cls)->swap (arg1);
}



namespace gsi
{

static gsi::Methods methods_QRegularExpressionMatchIterator () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QRegularExpressionMatchIterator::QRegularExpressionMatchIterator()\nThis method creates an object of class QRegularExpressionMatchIterator.", &_init_ctor_QRegularExpressionMatchIterator_0, &_call_ctor_QRegularExpressionMatchIterator_0);
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QRegularExpressionMatchIterator::QRegularExpressionMatchIterator(const QRegularExpressionMatchIterator &iterator)\nThis method creates an object of class QRegularExpressionMatchIterator.", &_init_ctor_QRegularExpressionMatchIterator_4523, &_call_ctor_QRegularExpressionMatchIterator_4523);
  methods += new qt_gsi::GenericMethod ("hasNext", "@brief Method bool QRegularExpressionMatchIterator::hasNext()\n", true, &_init_f_hasNext_c0, &_call_f_hasNext_c0);
  methods += new qt_gsi::GenericMethod ("isValid?", "@brief Method bool QRegularExpressionMatchIterator::isValid()\n", true, &_init_f_isValid_c0, &_call_f_isValid_c0);
  methods += new qt_gsi::GenericMethod ("matchOptions", "@brief Method QFlags<QRegularExpression::MatchOption> QRegularExpressionMatchIterator::matchOptions()\n", true, &_init_f_matchOptions_c0, &_call_f_matchOptions_c0);
  methods += new qt_gsi::GenericMethod ("matchType", "@brief Method QRegularExpression::MatchType QRegularExpressionMatchIterator::matchType()\n", true, &_init_f_matchType_c0, &_call_f_matchType_c0);
  methods += new qt_gsi::GenericMethod ("next", "@brief Method QRegularExpressionMatch QRegularExpressionMatchIterator::next()\n", false, &_init_f_next_0, &_call_f_next_0);
  methods += new qt_gsi::GenericMethod ("assign", "@brief Method QRegularExpressionMatchIterator &QRegularExpressionMatchIterator::operator=(const QRegularExpressionMatchIterator &iterator)\n", false, &_init_f_operator_eq__4523, &_call_f_operator_eq__4523);
  methods += new qt_gsi::GenericMethod ("peekNext", "@brief Method QRegularExpressionMatch QRegularExpressionMatchIterator::peekNext()\n", true, &_init_f_peekNext_c0, &_call_f_peekNext_c0);
  methods += new qt_gsi::GenericMethod ("regularExpression", "@brief Method QRegularExpression QRegularExpressionMatchIterator::regularExpression()\n", true, &_init_f_regularExpression_c0, &_call_f_regularExpression_c0);
  methods += new qt_gsi::GenericMethod ("swap", "@brief Method void QRegularExpressionMatchIterator::swap(QRegularExpressionMatchIterator &other)\n", false, &_init_f_swap_3828, &_call_f_swap_3828);
  return methods;
}

gsi::Class<QRegularExpressionMatchIterator> decl_QRegularExpressionMatchIterator ("QtCore", "QRegularExpressionMatchIterator",
  methods_QRegularExpressionMatchIterator (),
  "@qt\n@brief Binding of QRegularExpressionMatchIterator");


GSI_QTCORE_PUBLIC gsi::Class<QRegularExpressionMatchIterator> &qtdecl_QRegularExpressionMatchIterator () { return decl_QRegularExpressionMatchIterator; }

}

