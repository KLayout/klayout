
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2023 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQMetaSequence.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QMetaSequence>
#include <QMetaType>
#include "gsiQt.h"
#include "gsiQtCoreCommon.h"
#include <memory>

// -----------------------------------------------------------------------
// class QMetaSequence

//  Constructor QMetaSequence::QMetaSequence()


static void _init_ctor_QMetaSequence_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QMetaSequence> ();
}

static void _call_ctor_QMetaSequence_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QMetaSequence *> (new QMetaSequence ());
}


// void QMetaSequence::addValue(void *container, const void *value)


static void _init_f_addValue_c2699 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("container");
  decl->add_arg<void * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("value");
  decl->add_arg<const void * > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_addValue_c2699 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  void *arg1 = gsi::arg_reader<void * >() (args, heap);
  const void *arg2 = gsi::arg_reader<const void * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMetaSequence *)cls)->addValue (arg1, arg2);
}


// void QMetaSequence::addValueAtBegin(void *container, const void *value)


static void _init_f_addValueAtBegin_c2699 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("container");
  decl->add_arg<void * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("value");
  decl->add_arg<const void * > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_addValueAtBegin_c2699 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  void *arg1 = gsi::arg_reader<void * >() (args, heap);
  const void *arg2 = gsi::arg_reader<const void * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMetaSequence *)cls)->addValueAtBegin (arg1, arg2);
}


// void QMetaSequence::addValueAtEnd(void *container, const void *value)


static void _init_f_addValueAtEnd_c2699 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("container");
  decl->add_arg<void * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("value");
  decl->add_arg<const void * > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_addValueAtEnd_c2699 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  void *arg1 = gsi::arg_reader<void * >() (args, heap);
  const void *arg2 = gsi::arg_reader<const void * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMetaSequence *)cls)->addValueAtEnd (arg1, arg2);
}


// bool QMetaSequence::canAddValue()


static void _init_f_canAddValue_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_canAddValue_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QMetaSequence *)cls)->canAddValue ());
}


// bool QMetaSequence::canAddValueAtBegin()


static void _init_f_canAddValueAtBegin_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_canAddValueAtBegin_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QMetaSequence *)cls)->canAddValueAtBegin ());
}


// bool QMetaSequence::canAddValueAtEnd()


static void _init_f_canAddValueAtEnd_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_canAddValueAtEnd_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QMetaSequence *)cls)->canAddValueAtEnd ());
}


// bool QMetaSequence::canEraseRangeAtIterator()


static void _init_f_canEraseRangeAtIterator_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_canEraseRangeAtIterator_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QMetaSequence *)cls)->canEraseRangeAtIterator ());
}


// bool QMetaSequence::canEraseValueAtIterator()


static void _init_f_canEraseValueAtIterator_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_canEraseValueAtIterator_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QMetaSequence *)cls)->canEraseValueAtIterator ());
}


// bool QMetaSequence::canGetValueAtConstIterator()


static void _init_f_canGetValueAtConstIterator_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_canGetValueAtConstIterator_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QMetaSequence *)cls)->canGetValueAtConstIterator ());
}


// bool QMetaSequence::canGetValueAtIndex()


static void _init_f_canGetValueAtIndex_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_canGetValueAtIndex_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QMetaSequence *)cls)->canGetValueAtIndex ());
}


// bool QMetaSequence::canGetValueAtIterator()


static void _init_f_canGetValueAtIterator_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_canGetValueAtIterator_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QMetaSequence *)cls)->canGetValueAtIterator ());
}


// bool QMetaSequence::canInsertValueAtIterator()


static void _init_f_canInsertValueAtIterator_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_canInsertValueAtIterator_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QMetaSequence *)cls)->canInsertValueAtIterator ());
}


// bool QMetaSequence::canRemoveValue()


static void _init_f_canRemoveValue_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_canRemoveValue_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QMetaSequence *)cls)->canRemoveValue ());
}


// bool QMetaSequence::canRemoveValueAtBegin()


static void _init_f_canRemoveValueAtBegin_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_canRemoveValueAtBegin_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QMetaSequence *)cls)->canRemoveValueAtBegin ());
}


// bool QMetaSequence::canRemoveValueAtEnd()


static void _init_f_canRemoveValueAtEnd_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_canRemoveValueAtEnd_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QMetaSequence *)cls)->canRemoveValueAtEnd ());
}


// bool QMetaSequence::canSetValueAtIndex()


static void _init_f_canSetValueAtIndex_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_canSetValueAtIndex_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QMetaSequence *)cls)->canSetValueAtIndex ());
}


// bool QMetaSequence::canSetValueAtIterator()


static void _init_f_canSetValueAtIterator_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_canSetValueAtIterator_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QMetaSequence *)cls)->canSetValueAtIterator ());
}


// void QMetaSequence::eraseRangeAtIterator(void *container, const void *iterator1, const void *iterator2)


static void _init_f_eraseRangeAtIterator_c4342 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("container");
  decl->add_arg<void * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("iterator1");
  decl->add_arg<const void * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("iterator2");
  decl->add_arg<const void * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_eraseRangeAtIterator_c4342 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  void *arg1 = gsi::arg_reader<void * >() (args, heap);
  const void *arg2 = gsi::arg_reader<const void * >() (args, heap);
  const void *arg3 = gsi::arg_reader<const void * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMetaSequence *)cls)->eraseRangeAtIterator (arg1, arg2, arg3);
}


// void QMetaSequence::eraseValueAtIterator(void *container, const void *iterator)


static void _init_f_eraseValueAtIterator_c2699 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("container");
  decl->add_arg<void * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("iterator");
  decl->add_arg<const void * > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_eraseValueAtIterator_c2699 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  void *arg1 = gsi::arg_reader<void * >() (args, heap);
  const void *arg2 = gsi::arg_reader<const void * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMetaSequence *)cls)->eraseValueAtIterator (arg1, arg2);
}


// void QMetaSequence::insertValueAtIterator(void *container, const void *iterator, const void *value)


static void _init_f_insertValueAtIterator_c4342 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("container");
  decl->add_arg<void * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("iterator");
  decl->add_arg<const void * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("value");
  decl->add_arg<const void * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_insertValueAtIterator_c4342 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  void *arg1 = gsi::arg_reader<void * >() (args, heap);
  const void *arg2 = gsi::arg_reader<const void * >() (args, heap);
  const void *arg3 = gsi::arg_reader<const void * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMetaSequence *)cls)->insertValueAtIterator (arg1, arg2, arg3);
}


// bool QMetaSequence::isSortable()


static void _init_f_isSortable_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isSortable_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QMetaSequence *)cls)->isSortable ());
}


// void QMetaSequence::removeValue(void *container)


static void _init_f_removeValue_c1056 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("container");
  decl->add_arg<void * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_removeValue_c1056 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  void *arg1 = gsi::arg_reader<void * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMetaSequence *)cls)->removeValue (arg1);
}


// void QMetaSequence::removeValueAtBegin(void *container)


static void _init_f_removeValueAtBegin_c1056 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("container");
  decl->add_arg<void * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_removeValueAtBegin_c1056 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  void *arg1 = gsi::arg_reader<void * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMetaSequence *)cls)->removeValueAtBegin (arg1);
}


// void QMetaSequence::removeValueAtEnd(void *container)


static void _init_f_removeValueAtEnd_c1056 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("container");
  decl->add_arg<void * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_removeValueAtEnd_c1056 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  void *arg1 = gsi::arg_reader<void * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMetaSequence *)cls)->removeValueAtEnd (arg1);
}


// void QMetaSequence::setValueAtIndex(void *container, qsizetype index, const void *value)


static void _init_f_setValueAtIndex_c4033 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("container");
  decl->add_arg<void * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("index");
  decl->add_arg<qsizetype > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("value");
  decl->add_arg<const void * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_setValueAtIndex_c4033 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  void *arg1 = gsi::arg_reader<void * >() (args, heap);
  qsizetype arg2 = gsi::arg_reader<qsizetype >() (args, heap);
  const void *arg3 = gsi::arg_reader<const void * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMetaSequence *)cls)->setValueAtIndex (arg1, arg2, arg3);
}


// void QMetaSequence::setValueAtIterator(const void *iterator, const void *value)


static void _init_f_setValueAtIterator_c3394 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("iterator");
  decl->add_arg<const void * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("value");
  decl->add_arg<const void * > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_setValueAtIterator_c3394 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const void *arg1 = gsi::arg_reader<const void * >() (args, heap);
  const void *arg2 = gsi::arg_reader<const void * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMetaSequence *)cls)->setValueAtIterator (arg1, arg2);
}


// void QMetaSequence::valueAtConstIterator(const void *iterator, void *result)


static void _init_f_valueAtConstIterator_c2699 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("iterator");
  decl->add_arg<const void * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("result");
  decl->add_arg<void * > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_valueAtConstIterator_c2699 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const void *arg1 = gsi::arg_reader<const void * >() (args, heap);
  void *arg2 = gsi::arg_reader<void * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMetaSequence *)cls)->valueAtConstIterator (arg1, arg2);
}


// void QMetaSequence::valueAtIndex(const void *container, qsizetype index, void *result)


static void _init_f_valueAtIndex_c4033 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("container");
  decl->add_arg<const void * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("index");
  decl->add_arg<qsizetype > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("result");
  decl->add_arg<void * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_valueAtIndex_c4033 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const void *arg1 = gsi::arg_reader<const void * >() (args, heap);
  qsizetype arg2 = gsi::arg_reader<qsizetype >() (args, heap);
  void *arg3 = gsi::arg_reader<void * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMetaSequence *)cls)->valueAtIndex (arg1, arg2, arg3);
}


// void QMetaSequence::valueAtIterator(const void *iterator, void *result)


static void _init_f_valueAtIterator_c2699 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("iterator");
  decl->add_arg<const void * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("result");
  decl->add_arg<void * > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_valueAtIterator_c2699 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const void *arg1 = gsi::arg_reader<const void * >() (args, heap);
  void *arg2 = gsi::arg_reader<void * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QMetaSequence *)cls)->valueAtIterator (arg1, arg2);
}


// QMetaType QMetaSequence::valueMetaType()


static void _init_f_valueMetaType_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QMetaType > ();
}

static void _call_f_valueMetaType_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QMetaType > ((QMetaType)((QMetaSequence *)cls)->valueMetaType ());
}



namespace gsi
{

static gsi::Methods methods_QMetaSequence () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QMetaSequence::QMetaSequence()\nThis method creates an object of class QMetaSequence.", &_init_ctor_QMetaSequence_0, &_call_ctor_QMetaSequence_0);
  methods += new qt_gsi::GenericMethod ("addValue", "@brief Method void QMetaSequence::addValue(void *container, const void *value)\n", true, &_init_f_addValue_c2699, &_call_f_addValue_c2699);
  methods += new qt_gsi::GenericMethod ("addValueAtBegin", "@brief Method void QMetaSequence::addValueAtBegin(void *container, const void *value)\n", true, &_init_f_addValueAtBegin_c2699, &_call_f_addValueAtBegin_c2699);
  methods += new qt_gsi::GenericMethod ("addValueAtEnd", "@brief Method void QMetaSequence::addValueAtEnd(void *container, const void *value)\n", true, &_init_f_addValueAtEnd_c2699, &_call_f_addValueAtEnd_c2699);
  methods += new qt_gsi::GenericMethod ("canAddValue", "@brief Method bool QMetaSequence::canAddValue()\n", true, &_init_f_canAddValue_c0, &_call_f_canAddValue_c0);
  methods += new qt_gsi::GenericMethod ("canAddValueAtBegin", "@brief Method bool QMetaSequence::canAddValueAtBegin()\n", true, &_init_f_canAddValueAtBegin_c0, &_call_f_canAddValueAtBegin_c0);
  methods += new qt_gsi::GenericMethod ("canAddValueAtEnd", "@brief Method bool QMetaSequence::canAddValueAtEnd()\n", true, &_init_f_canAddValueAtEnd_c0, &_call_f_canAddValueAtEnd_c0);
  methods += new qt_gsi::GenericMethod ("canEraseRangeAtIterator", "@brief Method bool QMetaSequence::canEraseRangeAtIterator()\n", true, &_init_f_canEraseRangeAtIterator_c0, &_call_f_canEraseRangeAtIterator_c0);
  methods += new qt_gsi::GenericMethod ("canEraseValueAtIterator", "@brief Method bool QMetaSequence::canEraseValueAtIterator()\n", true, &_init_f_canEraseValueAtIterator_c0, &_call_f_canEraseValueAtIterator_c0);
  methods += new qt_gsi::GenericMethod ("canGetValueAtConstIterator", "@brief Method bool QMetaSequence::canGetValueAtConstIterator()\n", true, &_init_f_canGetValueAtConstIterator_c0, &_call_f_canGetValueAtConstIterator_c0);
  methods += new qt_gsi::GenericMethod ("canGetValueAtIndex", "@brief Method bool QMetaSequence::canGetValueAtIndex()\n", true, &_init_f_canGetValueAtIndex_c0, &_call_f_canGetValueAtIndex_c0);
  methods += new qt_gsi::GenericMethod ("canGetValueAtIterator", "@brief Method bool QMetaSequence::canGetValueAtIterator()\n", true, &_init_f_canGetValueAtIterator_c0, &_call_f_canGetValueAtIterator_c0);
  methods += new qt_gsi::GenericMethod ("canInsertValueAtIterator", "@brief Method bool QMetaSequence::canInsertValueAtIterator()\n", true, &_init_f_canInsertValueAtIterator_c0, &_call_f_canInsertValueAtIterator_c0);
  methods += new qt_gsi::GenericMethod ("canRemoveValue", "@brief Method bool QMetaSequence::canRemoveValue()\n", true, &_init_f_canRemoveValue_c0, &_call_f_canRemoveValue_c0);
  methods += new qt_gsi::GenericMethod ("canRemoveValueAtBegin", "@brief Method bool QMetaSequence::canRemoveValueAtBegin()\n", true, &_init_f_canRemoveValueAtBegin_c0, &_call_f_canRemoveValueAtBegin_c0);
  methods += new qt_gsi::GenericMethod ("canRemoveValueAtEnd", "@brief Method bool QMetaSequence::canRemoveValueAtEnd()\n", true, &_init_f_canRemoveValueAtEnd_c0, &_call_f_canRemoveValueAtEnd_c0);
  methods += new qt_gsi::GenericMethod ("canSetValueAtIndex", "@brief Method bool QMetaSequence::canSetValueAtIndex()\n", true, &_init_f_canSetValueAtIndex_c0, &_call_f_canSetValueAtIndex_c0);
  methods += new qt_gsi::GenericMethod ("canSetValueAtIterator", "@brief Method bool QMetaSequence::canSetValueAtIterator()\n", true, &_init_f_canSetValueAtIterator_c0, &_call_f_canSetValueAtIterator_c0);
  methods += new qt_gsi::GenericMethod ("eraseRangeAtIterator", "@brief Method void QMetaSequence::eraseRangeAtIterator(void *container, const void *iterator1, const void *iterator2)\n", true, &_init_f_eraseRangeAtIterator_c4342, &_call_f_eraseRangeAtIterator_c4342);
  methods += new qt_gsi::GenericMethod ("eraseValueAtIterator", "@brief Method void QMetaSequence::eraseValueAtIterator(void *container, const void *iterator)\n", true, &_init_f_eraseValueAtIterator_c2699, &_call_f_eraseValueAtIterator_c2699);
  methods += new qt_gsi::GenericMethod ("insertValueAtIterator", "@brief Method void QMetaSequence::insertValueAtIterator(void *container, const void *iterator, const void *value)\n", true, &_init_f_insertValueAtIterator_c4342, &_call_f_insertValueAtIterator_c4342);
  methods += new qt_gsi::GenericMethod ("isSortable?", "@brief Method bool QMetaSequence::isSortable()\n", true, &_init_f_isSortable_c0, &_call_f_isSortable_c0);
  methods += new qt_gsi::GenericMethod ("removeValue", "@brief Method void QMetaSequence::removeValue(void *container)\n", true, &_init_f_removeValue_c1056, &_call_f_removeValue_c1056);
  methods += new qt_gsi::GenericMethod ("removeValueAtBegin", "@brief Method void QMetaSequence::removeValueAtBegin(void *container)\n", true, &_init_f_removeValueAtBegin_c1056, &_call_f_removeValueAtBegin_c1056);
  methods += new qt_gsi::GenericMethod ("removeValueAtEnd", "@brief Method void QMetaSequence::removeValueAtEnd(void *container)\n", true, &_init_f_removeValueAtEnd_c1056, &_call_f_removeValueAtEnd_c1056);
  methods += new qt_gsi::GenericMethod ("setValueAtIndex", "@brief Method void QMetaSequence::setValueAtIndex(void *container, qsizetype index, const void *value)\n", true, &_init_f_setValueAtIndex_c4033, &_call_f_setValueAtIndex_c4033);
  methods += new qt_gsi::GenericMethod ("setValueAtIterator", "@brief Method void QMetaSequence::setValueAtIterator(const void *iterator, const void *value)\n", true, &_init_f_setValueAtIterator_c3394, &_call_f_setValueAtIterator_c3394);
  methods += new qt_gsi::GenericMethod ("valueAtConstIterator", "@brief Method void QMetaSequence::valueAtConstIterator(const void *iterator, void *result)\n", true, &_init_f_valueAtConstIterator_c2699, &_call_f_valueAtConstIterator_c2699);
  methods += new qt_gsi::GenericMethod ("valueAtIndex", "@brief Method void QMetaSequence::valueAtIndex(const void *container, qsizetype index, void *result)\n", true, &_init_f_valueAtIndex_c4033, &_call_f_valueAtIndex_c4033);
  methods += new qt_gsi::GenericMethod ("valueAtIterator", "@brief Method void QMetaSequence::valueAtIterator(const void *iterator, void *result)\n", true, &_init_f_valueAtIterator_c2699, &_call_f_valueAtIterator_c2699);
  methods += new qt_gsi::GenericMethod ("valueMetaType", "@brief Method QMetaType QMetaSequence::valueMetaType()\n", true, &_init_f_valueMetaType_c0, &_call_f_valueMetaType_c0);
  return methods;
}

gsi::Class<QMetaContainer> &qtdecl_QMetaContainer ();

gsi::Class<QMetaSequence> decl_QMetaSequence (qtdecl_QMetaContainer (), "QtCore", "QMetaSequence",
  methods_QMetaSequence (),
  "@qt\n@brief Binding of QMetaSequence");


GSI_QTCORE_PUBLIC gsi::Class<QMetaSequence> &qtdecl_QMetaSequence () { return decl_QMetaSequence; }

}

